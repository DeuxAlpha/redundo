
================================================================================

File: Backend/API/API.csproj
================================================================================

ï»¿<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
        <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="MediatR" Version="7.0.0" />
        <PackageReference Include="MediatR.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
        <PackageReference Include="Microsoft.AspNetCore.App" />
        <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All" />
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\Application\Application.csproj" />
      <ProjectReference Include="..\Common\Common.csproj" />
      <ProjectReference Include="..\Database\Database.csproj" />
      <ProjectReference Include="..\Domain\Domain.csproj" />
    </ItemGroup>

    <ItemGroup>
      <_ContentIncludedByDefault Remove="Properties\launchSettings.json" />
    </ItemGroup>

</Project>



================================================================================

File: Backend/API/appsettings.Development.json
================================================================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  }
}



================================================================================

File: Backend/API/appsettings.json
================================================================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "AllowedHosts": "*"
}



================================================================================

File: Backend/API/Controllers/FunctionalControllers/BaseController.cs
================================================================================

using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers.FunctionalControllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class BaseController : Controller
    {
        protected readonly IMediator Mediator;

        protected BaseController(IMediator mediator)
        {
            Mediator = mediator;
        }
    }
}


================================================================================

File: Backend/API/Controllers/FunctionalControllers/DashboardController.cs
================================================================================

using System.Threading.Tasks;
using Application.Dashboard.Queries;
using Application.Exceptions;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers.FunctionalControllers
{
    public class DashboardController : BaseController
    {
        public DashboardController(IMediator mediator) : base(mediator)
        {
        }

        [HttpGet]
        public async Task<IActionResult> GetDashboard()
        {
            try
            {
                return Ok(await Mediator.Send(new DashboardQuery()));
            }
            catch (AuthenticationException)
            {
                return Forbid();
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
        }
    }
}


================================================================================

File: Backend/API/Controllers/FunctionalControllers/MigrationController.cs
================================================================================

using System.Threading.Tasks;
using Application.Migration.Commands;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers.FunctionalControllers
{
	public class MigrationController : BaseController
	{
		public MigrationController(IMediator mediator) : base(mediator)
		{
		}

		[AllowAnonymous]
		[HttpPost]
		public async Task<IActionResult> Migrate()
		{
			await Mediator.Send(new ApplyMigrationsCommand());

			return Ok();
		}
	}
}


================================================================================

File: Backend/API/Controllers/GroupsController.cs
================================================================================

using System;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.GroupItems.Commands.CreateGroupItem;
using Application.GroupItems.Commands.DeleteGroupItem;
using Application.GroupItems.Commands.UpdateGroupItem;
using Application.GroupItems.Queries.GroupItemList;
using Application.Groups.Commands.CreateGroup;
using Application.Groups.Commands.DeleteGroup;
using Application.Groups.Commands.UpdateGroup;
using Application.Groups.Queries.GroupList;
using Application.UserGroups.Commands.CreateUserGroup;
using Application.UserGroups.Commands.DeleteUserGroup;
using Application.UserGroups.Commands.UpdateUserGroup;
using Application.UserGroups.Queries.UserGroupList;
using API.Controllers.FunctionalControllers;
using API.Models;
using Application.Groups.Queries.GroupDetail;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers
{
    public class GroupsController : BaseController
    {
        public GroupsController(IMediator mediator) : base(mediator)
        {
        }

        [HttpGet]
        public async Task<IActionResult> GetAll([FromQuery] PageQuery pageQuery, [FromQuery] string name, [FromQuery] int? userId)
        {
            return Ok(await Mediator.Send(new GroupListQuery
            {
                Name = name,
                UserId = userId,
                Page = pageQuery.Page,
                Items = pageQuery.Items
            }));
        }

        [HttpGet("{id}", Name = "GetGroup")]
        public async Task<IActionResult> Get(int id)
        {
            try
            {
                return Ok(await Mediator.Send(new GroupDetailQuery
                {
                    Id = id
                }));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
        }

        [HttpGet("{id}/items")]
        public async Task<IActionResult> GetGroupItems(int id, [FromQuery] PageQuery pageQuery, [FromQuery] string name)
        {
            return Ok(await Mediator.Send(new GroupItemListQuery
            {
                GroupId = id,
                Name = name,
                Page = pageQuery.Page,
                Items = pageQuery.Items
            }));
        }

        [HttpGet("{id}/users")]
        public async Task<IActionResult> GetGroupUsers(int id, [FromQuery] PageQuery pageQuery)
        {
            return Ok(await Mediator.Send(new UserGroupListQuery
            {
                GroupId = id,
                Page = pageQuery.Page,
                Items = pageQuery.Items
            }));
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateGroupCommand command)
        {
            try
            {
                var group = await Mediator.Send(command);

                return Created(Url.Link("GetGroup", new {id = group.Id}), group);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
            catch (UniqueConstraintException uniqueConstraintException)
            {
                return BadRequest(uniqueConstraintException.Message);
            }
        }

        [HttpPost("{id}/items")]
        public async Task<IActionResult> CreateGroupItem(int id, [FromBody] CreateGroupItemCommand command)
        {
            if (id != command.GroupId)
                return BadRequest();

            try
            {
                var groupItem = await Mediator.Send(command);

                return Ok(groupItem);
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
            catch (UniqueConstraintException uniqueConstraintException)
            {
                return Conflict(uniqueConstraintException.Message);
            }
        }

        [HttpPost("{id}/users")]
        public async Task<IActionResult> CreateGroupUser(int id, [FromBody] CreateUserGroupCommand command)
        {
            if (id != command.GroupId)
                return BadRequest();

            try
            {
                var groupUser = await Mediator.Send(command);

                return Ok(groupUser);
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (UniqueConstraintException uniqueConstraintException)
            {
                return BadRequest(uniqueConstraintException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] UpdateGroupCommand command)
        {
            if (id != command.Id)
                return BadRequest();

            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
            catch (InvalidOperationException invalidOperationException)
            {
                return BadRequest(invalidOperationException.Message);
            }
        }

        [HttpPut("{id}/items/{itemId}")]
        public async Task<IActionResult> UpdateGroupItem(int id, int itemId, [FromBody] UpdateGroupItemCommand command)
        {
            if (id != command.GroupId || itemId != command.ItemId)
                return BadRequest();

            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }

        [HttpPut("{id}/users/{userId}")]
        public async Task<IActionResult> UpdateGroupUser(int id, int userId, [FromBody] UpdateUserGroupCommand command)
        {
            if (id != command.GroupId || userId != command.UserId)
                return BadRequest();
            
            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await Mediator.Send(new DeleteGroupCommand
                {
                    Id = id
                });

                return NoContent();
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }

        [HttpDelete("{id}/items/{itemId}")]
        public async Task<IActionResult> DeleteGroupItem(int id, int itemId)
        {
            try
            {
                await Mediator.Send(new DeleteGroupItemCommand
                {
                    GroupId = id,
                    ItemId = itemId
                });

                return NoContent();
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }

        [HttpDelete("{id}/users/{userId}")]
        public async Task<IActionResult> DeleteUserGroup(int id, int userId)
        {
            try
            {
                await Mediator.Send(new DeleteUserGroupCommand
                {
                    GroupId = id,
                    UserId = userId
                });

                return NoContent();
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
        }
    }
}


================================================================================

File: Backend/API/Controllers/ItemsController.cs
================================================================================

using System.Threading.Tasks;
using Application.GroupItems.Commands.UpdateGroupItem;
using Application.Items.Commands.CreateItem;
using Application.Items.Queries.ItemList;
using API.Controllers.FunctionalControllers;
using API.Models;
using Application.Exceptions;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http;

namespace API.Controllers
{
    public class ItemsController : BaseController
    {
        public ItemsController(IMediator mediator) : base(mediator)
        {
        }

        [HttpGet]
        public async Task<IActionResult> GetAll([FromQuery] PageQuery pageQuery, [FromQuery] string name)
        {
            return Ok(await Mediator.Send(new ItemListQuery
            {
                Name = name,
                Page = pageQuery.Page,
                Items = pageQuery.Items
            }));
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CreateItemCommand command)
        {
            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (UniqueConstraintException uniqueConstraintException)
            {
                return Conflict(new
                {
                    uniqueConstraintException.Message, uniqueConstraintException.UniqueValue
                });
            }
        }
    }
}


================================================================================

File: Backend/API/Controllers/UsersController.cs
================================================================================

using System.Threading.Tasks;
using Application.Exceptions;
using Application.Users.Commands.CreateUser;
using Application.Users.Commands.DeleteUser;
using Application.Users.Commands.LoginUser;
using Application.Users.Commands.RefreshUser;
using Application.Users.Commands.UpdateUserPassword;
using Application.Users.Queries.UserDetail;
using Application.Users.Queries.UserList;
using API.Controllers.FunctionalControllers;
using API.Models;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers
{
    public class UsersController : BaseController
    {
        public UsersController(IMediator mediator) : base(mediator)
        {
        }

        [HttpGet]
        public async Task<IActionResult> GetAll([FromQuery] PageQuery pageQuery, [FromQuery] string username)
        {
            return Ok(await Mediator.Send(new UserListQuery
            {
                Page = pageQuery.Page,
                Items = pageQuery.Items,
                Username = username
            }));
        }

        [HttpGet("{id}", Name = "GetUser")]
        public async Task<IActionResult> Get(int id)
        {
            try
            {
                return Ok(await Mediator.Send(new UserDetailQuery
                {
                    Id = id
                }));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
        }

        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> Create([FromBody] CreateUserCommand command)
        {
            try
            {
                var user = await Mediator.Send(command);

                return Created(Url.Link("GetUser", new {id = user.Id}), user);
            }
            catch (UniqueConstraintException uniqueConstraintException)
            {
                return BadRequest(uniqueConstraintException.Message);
            }
        }

        [HttpPost("login")]
        [AllowAnonymous]
        public async Task<IActionResult> Login([FromBody] LoginUserCommand command)
        {
            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (AuthenticationException)
            {
                return Unauthorized();
            }
        }

        [HttpPost("refresh")]
        [AllowAnonymous]
        public async Task<IActionResult> Refresh([FromBody] RefreshUserCommand command)
        {
            try
            {
                return Ok(await Mediator.Send(command));
            }
            catch (AuthenticationException)
            {
                return Unauthorized();
            }
        }

        [HttpPut("{id}/password")]
        public async Task<IActionResult> Update(int id, [FromBody] UpdateUserPasswordCommand passwordCommand)
        {
            if (id != passwordCommand.Id)
                return BadRequest();
            try
            {
                return Ok(await Mediator.Send(passwordCommand));
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                return Forbid();
            }
            catch (AuthenticationException)
            {
                return Unauthorized();
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id, [FromBody] DeleteUserCommand command)
        {
            if (id != command.Id)
                return BadRequest();
            try
            {
                await Mediator.Send(command);

                return NoContent();
            }
            catch (NotFoundException notFoundException)
            {
                return NotFound(notFoundException.Message);
            }
            catch (AuthorizationException)
            {
                // TODO: Require update of groups and before deleting user.
                return Forbid();
            }
        }
    }
}


================================================================================

File: Backend/API/Models/PageQuery.cs
================================================================================

namespace API.Models
{
    public class PageQuery
    {
        public int Page { get; set; } = 1;
        public int Items { get; set; } = 20;
    }
}


================================================================================

File: Backend/API/Program.cs
================================================================================

ï»¿using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;

namespace API
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>();
    }
}


================================================================================

File: Backend/API/Services/AuthService.cs
================================================================================

using System.Linq;
using System.Security.Claims;
using Application.Interfaces;
using Application.Services.Authentication;
using Common.Extensions;
using Domain.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;

namespace API.Services
{
    public class AuthService : IAuthService
    {
        private readonly ClaimsPrincipal _claims;

        public AuthService(IConfiguration configuration, IHttpContextAccessor contextAccessor)
        {
            var authorizationString =
                contextAccessor.HttpContext.Request.Headers["Authorization"].ElementAtOrDefault(0);
            var jwt = authorizationString?.Split("Bearer ").ElementAtOrDefault(1);
            if (jwt == null) return;
            _claims = AuthenticationService.GetPrincipalFromTokenString(new StandardAuthenticationModel
            {
                JwtToken = jwt,
                SecurityKey = configuration["SecurityKey"],
                Issuer = configuration["Issuer"],
                Audience = configuration["Audience"]
            });
        }

        public int? GetUserId()
        {
            if (int.TryParse(_claims.GetClaimValue(ClaimTypes.PrimarySid), out var result))
                return result;
            return null;
        }

        public bool IsUserIdSelf(int? userId)
        {
            if (userId == null) return false;
            return GetUserId() == userId;
        }

        public bool UserIsManagerOfGroup(Group group)
        {
            if (group == null) return false;
            var userGroupWithId = group.GroupUsers.Where(gu => gu.UserId == GetUserId());
            return userGroupWithId.Any(ug => ug.IsManager == true);
        }

        public bool UserIsManagerOfGroup(User user, Group @group)
        {
            var userGroupWithId = group.GroupUsers.Where(gu => gu.UserId == user.Id);
            return userGroupWithId.Any(ug => ug.IsManager == true);
        }

        public bool UserIsOwnerOfGroup(Group group)
        {
            return group.OwnerId == GetUserId();
        }

        public bool UserIsOwnerOfGroup(User user, Group group)
        {
            return group.OwnerId == user.Id;
        }

        public bool UserIsPartOfGroup(Group group)
        {
            return group.GroupUsers.Any(gu => gu.UserId == GetUserId());
        }
    }
}


================================================================================

File: Backend/API/Startup.cs
================================================================================

ï»¿using System;
using System.Text;
using Application;
using Application.Interfaces;
using Application.Services;
using API.Services;
using Database.Context;
using Domain.Models;
using FluentValidation.AspNetCore;
using MediatR;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpOverrides;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;

namespace API
{
    public class Startup
    {
        public Startup(IHostingEnvironment environment)
        {
            Configuration = Common.Configuration.GetInstance();
            Environment = environment;
        }

        public IConfiguration Configuration { get; }
        public IHostingEnvironment Environment { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton(Configuration);

            services.AddDbContext<PurchaseManagerContext>(options =>
                options.UseNpgsql(Configuration["ConnectionString"]));

            services.AddTransient<IPasswordHasher<User>, PasswordHasher<User>>();
            services.AddTransient<IAuthService, AuthService>();
            services.AddTransient<IPasswordService, PasswordService>();

            services.AddMediatR(ProgramInfo.GetAssembly());

            services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy",
                    builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
            });

            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =>
            {
                options.RequireHttpsMetadata = false;
                options.SaveToken = true;
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(Configuration["SecurityKey"])),
                    ValidateIssuer = true,
                    ValidIssuer = Configuration["Issuer"],
                    ValidateAudience = true,
                    ValidAudience = Configuration["Audience"],
                    ValidateLifetime = true,
                    ClockSkew = TimeSpan.Zero
                };
            });

            services.AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_2)
                .AddFluentValidation(configuration =>
                    configuration.RegisterValidatorsFromAssembly(ProgramInfo.GetAssembly()));

            services.Configure<ForwardedHeadersOptions>(options =>
            {
                options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app)
        {
            app.UseForwardedHeaders();

            app.UseCors("CorsPolicy");

            app.UseAuthentication();

            app.UseMvc();
        }
    }
}


================================================================================

File: Backend/Application/Application.csproj
================================================================================

ï»¿<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <PackageReference Include="FluentValidation.AspNetCore" Version="8.4.0" />
      <PackageReference Include="MediatR" Version="7.0.0" />
      <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.2.0" />
      <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="5.4.0" />
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\Common\Common.csproj" />
      <ProjectReference Include="..\Database\Database.csproj" />
      <ProjectReference Include="..\Domain\Domain.csproj" />
    </ItemGroup>

</Project>



================================================================================

File: Backend/Application/Dashboard/Queries/DashboardGroupViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Application.GroupItems.Models;
using Domain.Models;
using Microsoft.AspNetCore.Identity;

namespace Application.Dashboard.Queries
{
    public class DashboardGroupViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public DashboardGroupViewModel(Group group)
        {
            Id = group.Id;
            Name = group.Name;
        }
    }
}


================================================================================

File: Backend/Application/Dashboard/Queries/DashboardItemViewModel.cs
================================================================================

using System;
using Domain.Enums;
using Domain.Models;

namespace Application.Dashboard.Queries
{
    public class DashboardItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public DateTime LastUpdate { get; set; }
        public string Notes { get; set; }
        public bool OneTimePurchase { get; set; }
        public DashboardGroupViewModel Group { get; set; }

        public DashboardItemViewModel(GroupItem groupItem)
        {
            Id = groupItem.ItemId;
            Name = groupItem.Item.Name;
            ItemStatusId = groupItem.ItemStatusId;
            LastUpdate = groupItem.LastUpdate;
            Notes = groupItem.Notes;
            OneTimePurchase = groupItem.OneTimePurchase == true;
            Group = new DashboardGroupViewModel(groupItem.Group);
        }
    }
}


================================================================================

File: Backend/Application/Dashboard/Queries/DashboardQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.Dashboard.Queries
{
    public class DashboardQuery : IRequest<DashboardViewModel>
    {
    }
}


================================================================================

File: Backend/Application/Dashboard/Queries/DashboardQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;
using AuthenticationException = System.Security.Authentication.AuthenticationException;

namespace Application.Dashboard.Queries
{
    public class DashboardQueryHandler : IRequestHandler<DashboardQuery, DashboardViewModel>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public DashboardQueryHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<DashboardViewModel> Handle(DashboardQuery request, CancellationToken cancellationToken)
        {
            var userId = _authService.GetUserId();
            if (userId == null)
                throw new AuthenticationException("Can not identify user.");
            var user = await _context.Users
                .Include(u => u.UserGroups)
                .ThenInclude(ug => ug.Group)
                .ThenInclude(g => g.GroupItems)
                .ThenInclude(gi => gi.Item)
                .SingleOrDefaultAsync(u => u.Id == userId, cancellationToken);
            if (user == null)
                throw new NotFoundException(nameof(User), userId);
            return new DashboardViewModel(user);
        }
    }
}


================================================================================

File: Backend/Application/Dashboard/Queries/DashboardViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.Dashboard.Queries
{
    public class DashboardViewModel
    {
        public IEnumerable<DashboardItemViewModel> Items { get; set; }
        public bool AnyGroups { get; set; }

        public DashboardViewModel(User user)
        {
            AnyGroups = user.UserGroups.Any();
            Items = user.UserGroups
                .Where(ug => ug.IsAcceptedByManager == true && ug.IsAcceptedByUser == true)
                .Select(u => u.Group)
                .SelectMany(g => g.GroupItems)
                .Where(gi => gi.DoNotBuy != true)
                .Select(gi => new DashboardItemViewModel(gi))
                .OrderBy(i => i.Name);
        }
    }
}


================================================================================

File: Backend/Application/Exceptions/AuthenticationException.cs
================================================================================

using System;

namespace Application.Exceptions
{
    public class AuthenticationException : Exception
    {
        public AuthenticationException(){}
        
        public AuthenticationException(string message) : base(message){}
    }
}


================================================================================

File: Backend/Application/Exceptions/AuthorizationException.cs
================================================================================

using System;

namespace Application.Exceptions
{
	public class AuthorizationException : Exception
	{
		public AuthorizationException(string message) : base(message) {}
	}
}


================================================================================

File: Backend/Application/Exceptions/NotFoundException.cs
================================================================================

using System;

namespace Application.Exceptions
{
	public class NotFoundException : Exception
	{
		public NotFoundException(string name, object key) : base($"{name} ({key}) was not found.")
		{
		}

		public NotFoundException(string message) : base(message){}
	}
}


================================================================================

File: Backend/Application/Exceptions/UniqueConstraintException.cs
================================================================================

using System;

namespace Application.Exceptions
{
	public class UniqueConstraintException : Exception
	{
		public object UniqueValue { get; set; }
		
		public UniqueConstraintException(string objectName, object uniqueValue) 
			: base($"{objectName} with value '{uniqueValue}' already exists.")
		{
			UniqueValue = uniqueValue;
		}

		public UniqueConstraintException(string objectName, Exception exception)
			: base($"{objectName} already exists.", exception)
		{
		}
	}
}


================================================================================

File: Backend/Application/GroupItems/Commands/CreateGroupItem/CreateGroupItemCommand.cs
================================================================================

using System;
using Application.GroupItems.Models;
using Domain.Enums;
using MediatR;

namespace Application.GroupItems.Commands.CreateGroupItem
{
    public class CreateGroupItemCommand : IRequest<GroupItemDto>
    {
        public int GroupId { get; set; }
        public int ItemId { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public string Notes { get; set; }
        public bool OneTimePurchase { get; set; }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/CreateGroupItem/CreateGroupItemCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.GroupItems.Models;
using Application.Interfaces;
using Database.Context;
using Domain.Enums;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.GroupItems.Commands.CreateGroupItem
{
    public class CreateGroupItemCommandHandler : IRequestHandler<CreateGroupItemCommand, GroupItemDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public CreateGroupItemCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<GroupItemDto> Handle(CreateGroupItemCommand request, CancellationToken cancellationToken)
        {
            var group = await _context.Groups.Include(g => g.GroupUsers)
                .SingleOrDefaultAsync(g => g.Id == request.GroupId, cancellationToken);
            if (group == null)
                throw new NotFoundException(nameof(Group), request.GroupId);
            var item = await _context.Items.SingleOrDefaultAsync(i => i.Id == request.ItemId, cancellationToken);
            if (item == null)
                throw new NotFoundException(nameof(Item), request.ItemId);
            var existingGroupItem =
                await _context.GroupItems.SingleOrDefaultAsync(
                    gi => gi.GroupId == request.GroupId && gi.ItemId == request.ItemId, cancellationToken);
            if (existingGroupItem != null)
                throw new UniqueConstraintException(nameof(GroupItem), $"GroupID: {request.GroupId}, ItemID: {request.ItemId}");
            if (!_authService.UserIsPartOfGroup(group))
                throw new AuthorizationException("User is not part of group.");
            
            var groupItem = new GroupItem
            {
                GroupId = request.GroupId,
                ItemId = request.ItemId,
                LastUpdate = DateTime.UtcNow,
                ItemStatusId = request.ItemStatusId,
                Notes = request.Notes,
                OneTimePurchase = request.OneTimePurchase
            };

            await _context.GroupItems.AddAsync(groupItem, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);

            return new GroupItemDto(groupItem);
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/CreateGroupItem/CreateGroupItemCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.GroupItems.Commands.CreateGroupItem
{
    public class CreateGroupItemCommandValidator : AbstractValidator<CreateGroupItemCommand>
    {
        public CreateGroupItemCommandValidator()
        {
            RuleFor(gi => gi.ItemId).NotEmpty();
            RuleFor(gi => gi.GroupId).NotEmpty();
            RuleFor(gi => gi.ItemStatusId).NotEmpty();
            RuleFor(gi => gi.Notes).MaximumLength(255);
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/DeleteGroupItem/DeleteGroupItemCommand.cs
================================================================================

using MediatR;

namespace Application.GroupItems.Commands.DeleteGroupItem
{
    public class DeleteGroupItemCommand : IRequest
    {
        public int GroupId { get; set; }
        public int ItemId { get; set; }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/DeleteGroupItem/DeleteGroupItemCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.GroupItems.Commands.DeleteGroupItem
{
    public class DeleteGroupItemCommandHandler : IRequestHandler<DeleteGroupItemCommand>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public DeleteGroupItemCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<Unit> Handle(DeleteGroupItemCommand request, CancellationToken cancellationToken)
        {
            var groupItem = await _context.GroupItems
                .Include(gi => gi.Group)
                .ThenInclude(g => g.GroupUsers)
                .SingleOrDefaultAsync(gi => gi.GroupId == request.GroupId && gi.ItemId == request.ItemId,
                    cancellationToken);
            if (groupItem == null)
                throw new NotFoundException(nameof(GroupItem), $"GroupID: {request.GroupId}, ItemID: {request.ItemId}");
            if (!_authService.UserIsManagerOfGroup(groupItem.Group))
                throw new AuthorizationException("User is not manager of group.");

            _context.GroupItems.Remove(groupItem);

            await _context.SaveChangesAsync(cancellationToken);
            
            return Unit.Value;
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/DeleteGroupItem/DeleteGroupItemCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.GroupItems.Commands.DeleteGroupItem
{
    public class DeleteGroupItemCommandValidator : AbstractValidator<DeleteGroupItemCommand>
    {
        public DeleteGroupItemCommandValidator()
        {
            RuleFor(gi => gi.GroupId).NotEmpty();
            RuleFor(gi => gi.ItemId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/UpdateGroupItem/UpdateGroupItemCommand.cs
================================================================================

using Application.GroupItems.Models;
using Domain.Enums;
using MediatR;

namespace Application.GroupItems.Commands.UpdateGroupItem
{
    public class UpdateGroupItemCommand : IRequest<GroupItemDto>
    {
        public int GroupId { get; set; }
        public int ItemId { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public string Notes { get; set; }
        public bool OneTimePurchase { get; set; }
        public bool DoNotBuy { get; set; }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/UpdateGroupItem/UpdateGroupItemCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.GroupItems.Models;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.GroupItems.Commands.UpdateGroupItem
{
    public class UpdateGroupItemCommandHandler : IRequestHandler<UpdateGroupItemCommand, GroupItemDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public UpdateGroupItemCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<GroupItemDto> Handle(UpdateGroupItemCommand request, CancellationToken cancellationToken)
        {
            var groupItem = await _context.GroupItems
                .Include(gi => gi.Group)
                .ThenInclude(g => g.GroupUsers)
                .SingleOrDefaultAsync(
                gi => gi.GroupId == request.GroupId && gi.ItemId == request.ItemId, cancellationToken);
            if (groupItem == null)
                throw new NotFoundException(nameof(GroupItem),
                    $"GroupID: ${request.GroupId}, ItemID: {request.ItemId}");
            if (!_authService.UserIsPartOfGroup(groupItem.Group))
                throw new AuthorizationException("User is not part of group.");

            groupItem.ItemStatusId = request.ItemStatusId;
            groupItem.Notes = request.Notes;
            groupItem.OneTimePurchase = request.OneTimePurchase;
            groupItem.DoNotBuy = request.DoNotBuy;
            groupItem.LastUpdate = DateTime.UtcNow;

            await _context.SaveChangesAsync(cancellationToken);

            return new GroupItemDto(groupItem);
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Commands/UpdateGroupItem/UpdateGroupItemCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.GroupItems.Commands.UpdateGroupItem
{
    public class UpdateGroupItemCommandValidator : AbstractValidator<UpdateGroupItemCommand>
    {
        public UpdateGroupItemCommandValidator()
        {
            RuleFor(gi => gi.GroupId).NotEmpty();
            RuleFor(gi => gi.ItemId).NotEmpty();
            RuleFor(gi => gi.ItemStatusId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Models/GroupItemDto.cs
================================================================================

using System;
using Domain.Enums;
using Domain.Models;
using Microsoft.AspNetCore.Razor.Language.Extensions;

namespace Application.GroupItems.Models
{
    public class GroupItemDto
    {
        public int GroupId { get; set; }
        public int ItemId { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public DateTime LastUpdate { get; set; }
        public string Notes { get; set; }
        public bool DoNotBuy { get; set; }
        public bool OneTimePurchase { get; set; }
        
        public GroupItemDto(GroupItem groupItem)
        {
            GroupId = groupItem.GroupId;
            ItemId = groupItem.ItemId;
            ItemStatusId = groupItem.ItemStatusId;
            LastUpdate = groupItem.LastUpdate;
            Notes = groupItem.Notes;
            DoNotBuy = groupItem.DoNotBuy == true;
            OneTimePurchase = groupItem.OneTimePurchase == true;
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Queries/GroupItemList/GroupItemListItemModel.cs
================================================================================

using System;
using Application.GroupItems.Models;
using Domain.Enums;
using Domain.Models;

namespace Application.GroupItems.Queries.GroupItemList
{
    public class GroupItemListItemModel
    {
        public int GroupId { get; set; }
        public int ItemId { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public string ItemStatus { get; set; }
        public string Notes { get; set; }
        public DateTime LastUpdate { get; set; }

        public GroupItemListItemModel(GroupItem groupItem)
        {
            GroupId = groupItem.GroupId;
            ItemId = groupItem.ItemId;
            ItemStatusId = groupItem.ItemStatusId;
            ItemStatus = groupItem.ItemStatus.Name;
            Notes = groupItem.Notes;
            LastUpdate = groupItem.LastUpdate;
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Queries/GroupItemList/GroupItemListQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.GroupItems.Queries.GroupItemList
{
    public class GroupItemListQuery : IPageRequest, IRequest<GroupItemListViewModel>
    {
        public int GroupId { get; set; }
        public string Name { get; set; }
        public int Items { get; set; } = 20;
        public int Page { get; set; } = 1;
    }
}


================================================================================

File: Backend/Application/GroupItems/Queries/GroupItemList/GroupItemListQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Common.Extensions;
using Database.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.GroupItems.Queries.GroupItemList
{
    public class GroupItemListQueryHandler : IRequestHandler<GroupItemListQuery, GroupItemListViewModel>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public GroupItemListQueryHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public Task<GroupItemListViewModel> Handle(GroupItemListQuery request, CancellationToken cancellationToken)
        {
            var groupItems = _context.GroupItems
                .Include(gi => gi.Group)
                .Include(gi => gi.Item)
                .Where(gi => gi.Item.Name.HasValue(request.Name));

            if (groupItems.Any(gi => !_authService.UserIsPartOfGroup(gi.Group)))
                throw new AuthorizationException("User is not part of group.");

            var groupItemListViewModel = new GroupItemListViewModel(groupItems);

            return Task.FromResult(groupItemListViewModel);
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Queries/GroupItemList/GroupItemListQueryValidator.cs
================================================================================

using FluentValidation;

namespace Application.GroupItems.Queries.GroupItemList
{
    public class GroupItemListQueryValidator : AbstractValidator<GroupItemListQuery>
    {
        public GroupItemListQueryValidator()
        {
            RuleFor(gi => gi.GroupId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/GroupItems/Queries/GroupItemList/GroupItemListViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.GroupItems.Queries.GroupItemList
{
    public class GroupItemListViewModel
    {
        public IEnumerable<GroupItemListItemModel> Items { get; set; }

        public GroupItemListViewModel(IEnumerable<GroupItem> groupItems)
        {
            Items = groupItems.Select(gi => new GroupItemListItemModel(gi));
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/CreateGroup/CreateGroupCommand.cs
================================================================================

using Application.Groups.Models;
using MediatR;

namespace Application.Groups.Commands.CreateGroup
{
    public class CreateGroupCommand : IRequest<GroupDto>
    {
        public string Name { get; set; }
        /// <summary>
        /// The user creating the group to immediately create a UserGroup for it.
        /// </summary>
        public int GroupCreatorId { get; set; }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/CreateGroup/CreateGroupCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Groups.Models;
using Application.Interfaces;
using Common.Extensions;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Groups.Commands.CreateGroup
{
    public class CreateGroupCommandHandler : IRequestHandler<CreateGroupCommand, GroupDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public CreateGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<GroupDto> Handle(CreateGroupCommand request, CancellationToken cancellationToken)
        {
            var existingGroup =
                await _context.Groups.SingleOrDefaultAsync(g => g.Name.IsValue(request.Name), cancellationToken);
            if (existingGroup != null)
                throw new UniqueConstraintException(nameof(Group), request.Name);
            var userId = _authService.GetUserId();
            if (userId == null)
                throw new AuthorizationException("Not a valid user.");
            if (request.GroupCreatorId != userId)
                throw new AuthorizationException("User must be creator.");
            
            var group = new Group
            {
                Name = request.Name,
                OwnerId = (int)userId
            };

            await _context.Groups.AddAsync(group, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);
            
            var userGroup = new UserGroup
            {
                UserId = (int) userId,
                GroupId = group.Id,
                IsManager = true,
                IsAcceptedByManager = true,
                IsAcceptedByUser = true
            };

            await _context.UserGroups.AddAsync(userGroup, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);

            return new GroupDto(group);
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/CreateGroup/CreateGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Groups.Commands.CreateGroup
{
    public class CreateGroupCommandValidator : AbstractValidator<CreateGroupCommand>
    {
        public CreateGroupCommandValidator()
        {
            RuleFor(g => g.Name).MinimumLength(3).NotEmpty();
            RuleFor(g => g.GroupCreatorId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/DeleteGroup/DeleteGroupCommand.cs
================================================================================

using MediatR;

namespace Application.Groups.Commands.DeleteGroup
{
    public class DeleteGroupCommand : IRequest
    {
        public int Id { get; set; }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/DeleteGroup/DeleteGroupCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Groups.Commands.DeleteGroup
{
    public class DeleteGroupCommandHandler : IRequestHandler<DeleteGroupCommand>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public DeleteGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<Unit> Handle(DeleteGroupCommand request, CancellationToken cancellationToken)
        {
            var group = await _context.Groups
                .Include(g => g.GroupUsers)
                .SingleOrDefaultAsync(g => g.Id == request.Id, cancellationToken);
            if (group == null)
                throw new NotFoundException(nameof(Group), request.Id);
            if (!_authService.UserIsOwnerOfGroup(group))
                throw new AuthorizationException("User is not owner.");

            _context.Groups.Remove(group);

            await _context.SaveChangesAsync(cancellationToken);
            
            return Unit.Value;
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/DeleteGroup/DeleteGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Groups.Commands.DeleteGroup
{
    public class DeleteGroupCommandValidator : AbstractValidator<DeleteGroupCommand>
    {
        public DeleteGroupCommandValidator()
        {
            RuleFor(g => g.Id).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/UpdateGroup/UpdateGroupCommand.cs
================================================================================

using Application.Groups.Models;
using MediatR;

namespace Application.Groups.Commands.UpdateGroup
{
    public class UpdateGroupCommand : IRequest<GroupDto>
    {
        public int Id { get; set; }
        public int OwnerId { get; set; }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/UpdateGroup/UpdateGroupCommandHandler.cs
================================================================================

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Groups.Models;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Groups.Commands.UpdateGroup
{
    public class UpdateGroupCommandHandler : IRequestHandler<UpdateGroupCommand, GroupDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public UpdateGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<GroupDto> Handle(UpdateGroupCommand request, CancellationToken cancellationToken)
        {
            var group = await _context.Groups
                .Include(g => g.GroupUsers)
                .SingleOrDefaultAsync(g => g.Id == request.Id, cancellationToken);
            if (group == null)
                throw new NotFoundException(nameof(Group), request.Id);
            if (!_authService.UserIsOwnerOfGroup(group))
                throw new AuthorizationException("User is not owner.");

            var newOwnerGroupUser = group.GroupUsers.SingleOrDefault(gu => gu.UserId == request.OwnerId);
            if (newOwnerGroupUser == null)
                throw new NotFoundException(nameof(UserGroup), request.OwnerId);
            if (newOwnerGroupUser.IsAcceptedByManager == false || newOwnerGroupUser.IsAcceptedByUser == false)
                throw new InvalidOperationException("User is not part of group yet.");
            
            newOwnerGroupUser.IsManager = true;
            group.OwnerId = request.OwnerId;

            await _context.SaveChangesAsync(cancellationToken);

            return new GroupDto(group);
        }
    }
}


================================================================================

File: Backend/Application/Groups/Commands/UpdateGroup/UpdateGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Groups.Commands.UpdateGroup
{
    public class UpdateGroupCommandValidator : AbstractValidator<UpdateGroupCommand>
    {
        public UpdateGroupCommandValidator()
        {
            RuleFor(g => g.Id).NotEmpty();
            RuleFor(g => g.OwnerId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Groups/Models/GroupDto.cs
================================================================================

using Domain.Models;

namespace Application.Groups.Models
{
    public class GroupDto
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public GroupDto(Group group)
        {
            Id = group.Id;
            Name = group.Name;
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupDetailQuery.cs
================================================================================

using MediatR;

namespace Application.Groups.Queries.GroupDetail
{
    public class GroupDetailQuery : IRequest<GroupViewModel>
    {
        public int Id { get; set; }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupDetailQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Groups.Queries.GroupDetail
{
    public class GroupDetailQueryHandler : IRequestHandler<GroupDetailQuery, GroupViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public GroupDetailQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public async Task<GroupViewModel> Handle(GroupDetailQuery request, CancellationToken cancellationToken)
        {
            var userGroups = await _context.UserGroups
                .Include(ug => ug.Group)
                .ThenInclude(g => g.GroupItems)
                .ThenInclude(gi => gi.Item)
                .Include(ug => ug.User)
                .Where(ug => ug.GroupId == request.Id)
                .ToListAsync(cancellationToken);
            if (userGroups == null)
                throw new NotFoundException(nameof(Group), request.Id);

            return new GroupViewModel(userGroups);
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupDetailQueryValidator.cs
================================================================================

using FluentValidation;

namespace Application.Groups.Queries.GroupDetail
{
    public class GroupDetailQueryValidator : AbstractValidator<GroupDetailQuery>
    {
        public GroupDetailQueryValidator()
        {
            RuleFor(g => g.Id).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupItemViewModel.cs
================================================================================

using System;
using Domain.Enums;
using Domain.Models;

namespace Application.Groups.Queries.GroupDetail
{
	public class GroupItemViewModel
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public ItemStatusEnum ItemStatusId { get; set; }
		public DateTime LastUpdate { get; set; }
		public string Notes { get; set; }
		public bool DoNotBuy { get; set; }
		public bool OneTimePurchase { get; set; }

		public GroupItemViewModel(GroupItem groupItem)
		{
			Id = groupItem.ItemId;
			Name = groupItem.Item.Name;
			ItemStatusId = groupItem.ItemStatusId;
			LastUpdate = groupItem.LastUpdate;
			Notes = groupItem.Notes;
			DoNotBuy = groupItem.DoNotBuy == true;
			OneTimePurchase = groupItem.OneTimePurchase == true;
		}
	}
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupUserViewModel.cs
================================================================================

using Domain.Models;

namespace Application.Groups.Queries.GroupDetail
{
    public class GroupUserViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsManager { get; set; }
        public bool IsOwner { get; set; }
        public bool IsAcceptedByManager { get; set; }
        public bool IsAcceptedByUser { get; set; }
        public string RequestMessage { get; set; }

        public GroupUserViewModel(UserGroup userGroup)
        {
            Id = userGroup.UserId;
            Name = userGroup.User.Username;
            IsManager = userGroup.IsManager == true;
            IsOwner = userGroup.Group.OwnerId == Id;
            IsAcceptedByManager = userGroup.IsAcceptedByManager == true;
            IsAcceptedByUser = userGroup.IsAcceptedByUser == true;
            RequestMessage = userGroup.RequestMessage;
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupDetail/GroupViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.Groups.Queries.GroupDetail
{
    public class GroupViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public IEnumerable<GroupUserViewModel> Users { get; set; }
        public IEnumerable<GroupItemViewModel> Items { get; set; }

        public GroupViewModel(IReadOnlyCollection<UserGroup> userGroups)
        {
            var group = userGroups.First().Group;
            Id = group.Id;
            Name = group.Name;
            Users = userGroups
                .Select(ug => new GroupUserViewModel(ug))
                .OrderByDescending(u => u.IsOwner)
                .ThenByDescending(u => u.IsManager)
                .ThenByDescending(u => u.IsAcceptedByManager)
                .ThenByDescending(u => u.IsAcceptedByUser);
            Items = group.GroupItems.Select(gi => new GroupItemViewModel(gi))
                .OrderBy(gi => gi.Name);
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupList/GroupListItemViewModel.cs
================================================================================

using Domain.Models;

namespace Application.Groups.Queries.GroupList
{
    public class GroupListItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsAcceptedByManager { get; set; }
        public bool IsAcceptedByUser { get; set; }
        public bool IsOwner { get; set; }
        public bool IsManager { get; set; }
        public string RequestMessage { get; set; }

        public GroupListItemViewModel(UserGroup userGroup)
        {
            Id = userGroup.GroupId;
            Name = userGroup.Group.Name;
            IsOwner = userGroup.UserId == userGroup.Group.OwnerId;
            IsManager = userGroup.IsManager == true;
            IsAcceptedByManager = userGroup.IsAcceptedByManager == true;
            IsAcceptedByUser = userGroup.IsAcceptedByUser == true;
            RequestMessage = userGroup.RequestMessage;
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupList/GroupListQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.Groups.Queries.GroupList
{
    public class GroupListQuery : IPageRequest, IRequest<GroupListViewModel>
    {
        public string Name { get; set; }
        public int? UserId { get; set; }
        public int Items { get; set; } = 20;
        public int Page { get; set; } = 1;
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupList/GroupListQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Common.Extensions;
using Database.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Groups.Queries.GroupList
{
    public class GroupListQueryHandler : IRequestHandler<GroupListQuery, GroupListViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public GroupListQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public Task<GroupListViewModel> Handle(GroupListQuery request, CancellationToken cancellationToken)
        {
            var groups = request.UserId == null
                ? _context.UserGroups.Include(ug => ug.Group)
                    .Where(ug => ug.Group.Name.HasValue(request.Name))
                    .PaginateItems(request.Page, request.Items)
                : _context.UserGroups
                    .Include(ug => ug.Group)
                    .Where(ug => ug.Group.Name.HasValue(request.Name) && ug.UserId == request.UserId)
                    .PaginateItems(request.Page, request.Items);

            var groupListViewModel = new GroupListViewModel(groups);

            return Task.FromResult(groupListViewModel);
        }
    }
}


================================================================================

File: Backend/Application/Groups/Queries/GroupList/GroupListViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Common.Extensions;
using Domain.Models;

namespace Application.Groups.Queries.GroupList
{
    public class GroupListViewModel
    {
        public IEnumerable<GroupListItemViewModel> Groups { get; set; }

        public GroupListViewModel(IEnumerable<UserGroup> userGroups)
        {
            Groups = userGroups.Select(g => new GroupListItemViewModel(g)).OrderBy(g => g.Name);
        }
    }
}


================================================================================

File: Backend/Application/Interfaces/IAuthService.cs
================================================================================

using Domain.Models;

namespace Application.Interfaces
{
	public interface IAuthService
	{
		int? GetUserId();

		bool IsUserIdSelf(int? userId);

		bool UserIsManagerOfGroup(Group group);

		bool UserIsManagerOfGroup(User user, Group group);

		bool UserIsOwnerOfGroup(Group group);

		bool UserIsOwnerOfGroup(User user, Group group);
		bool UserIsPartOfGroup(Group group);
	}
}


================================================================================

File: Backend/Application/Interfaces/IPageRequest.cs
================================================================================

namespace Application.Interfaces
{
    public interface IPageRequest
    {
        int Items { get; set; }
        int Page { get; set; }
    }
}


================================================================================

File: Backend/Application/Interfaces/IPasswordService.cs
================================================================================

using Domain.Models;

namespace Application.Interfaces
{
	public interface IPasswordService
	{
		string SecurePassword(User user, string plainTextPassword);
		bool PasswordsMatch(User user, string hashedPassword, string plainTextPassword);
	}
}


================================================================================

File: Backend/Application/Items/Commands/CreateItem/CreateItemCommand.cs
================================================================================

using Application.Items.Models;
using MediatR;

namespace Application.Items.Commands.CreateItem
{
    public class CreateItemCommand : IRequest<ItemDto>
    {
        public string Name { get; set; }
    }
}


================================================================================

File: Backend/Application/Items/Commands/CreateItem/CreateItemCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Items.Models;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Items.Commands.CreateItem
{
    public class CreateItemCommandHandler : IRequestHandler<CreateItemCommand, ItemDto>
    {
        private readonly PurchaseManagerContext _context;

        public CreateItemCommandHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public async Task<ItemDto> Handle(CreateItemCommand request, CancellationToken cancellationToken)
        {
            var existingItem =
                await _context.Items.SingleOrDefaultAsync(i => i.Name == request.Name, cancellationToken);
            if (existingItem != null)
                throw new UniqueConstraintException(nameof(Item), existingItem.Id);
            var item = new Item
            {
                Name = request.Name
            };

            await _context.Items.AddAsync(item, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);

            return new ItemDto(item);
        }
    }
}


================================================================================

File: Backend/Application/Items/Commands/CreateItem/CreateItemCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Items.Commands.CreateItem
{
    public class CreateItemCommandValidator : AbstractValidator<CreateItemCommand>
    {
        public CreateItemCommandValidator()
        {
            RuleFor(i => i.Name).NotEmpty().MinimumLength(2);
        }
    }
}


================================================================================

File: Backend/Application/Items/Models/ItemDto.cs
================================================================================

using Domain.Models;

namespace Application.Items.Models
{
    public class ItemDto
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public ItemDto(Item item)
        {
            Id = item.Id;
            Name = item.Name;
        }
    }
}


================================================================================

File: Backend/Application/Items/Queries/ItemList/ItemListItemModel.cs
================================================================================

using Domain.Models;

namespace Application.Items.Queries.ItemList
{
    public class ItemListItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public ItemListItemModel(Item item)
        {
            Id = item.Id;
            Name = item.Name;
        }
    }
}


================================================================================

File: Backend/Application/Items/Queries/ItemList/ItemListQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.Items.Queries.ItemList
{
    public class ItemListQuery : IPageRequest, IRequest<ItemListViewModel>
    {
        public string Name { get; set; }
        public int Items { get; set; } = 20;
        public int Page { get; set; } = 1;
    }
}


================================================================================

File: Backend/Application/Items/Queries/ItemList/ItemListQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Common.Extensions;
using Database.Context;
using MediatR;

namespace Application.Items.Queries.ItemList
{
    public class ItemListQueryHandler : IRequestHandler<ItemListQuery, ItemListViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public ItemListQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public Task<ItemListViewModel> Handle(ItemListQuery request, CancellationToken cancellationToken)
        {
            var items = _context.Items
                .Where(i => i.Name.HasValue(request.Name))
                .PaginateItems(request.Page, request.Items);
            
            var itemListViewModel = new ItemListViewModel(items);

            return Task.FromResult(itemListViewModel);
        }
    }
}


================================================================================

File: Backend/Application/Items/Queries/ItemList/ItemListViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.Items.Queries.ItemList
{
    public class ItemListViewModel
    {
        public IEnumerable<ItemListItemModel> Items { get; set; }

        public ItemListViewModel(IEnumerable<Item> items)
        {
            Items = items.Select(i => new ItemListItemModel(i));
        }
    }
}


================================================================================

File: Backend/Application/Migration/Commands/ApplyMigrationsCommand.cs
================================================================================

using MediatR;

namespace Application.Migration.Commands
{
	public class ApplyMigrationsCommand : IRequest
	{
		
	}
}


================================================================================

File: Backend/Application/Migration/Commands/ApplyMigrationsCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Database.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Migration.Commands
{
	public class ApplyMigrationsCommandHandler : IRequestHandler<ApplyMigrationsCommand>
	{
		private readonly PurchaseManagerContext _context;

		public ApplyMigrationsCommandHandler(PurchaseManagerContext context)
		{
			_context = context;
		}

		public async Task<Unit> Handle(ApplyMigrationsCommand request, CancellationToken cancellationToken)
		{
			await _context.Database.MigrateAsync(cancellationToken);

			return Unit.Value;
		}
	}
}


================================================================================

File: Backend/Application/ProgramInfo.cs
================================================================================

using System.Reflection;

namespace Application
{
    public class ProgramInfo
    {
        public static Assembly GetAssembly()
        {
            return typeof(ProgramInfo).GetTypeInfo().Assembly;
        }
    }
}


================================================================================

File: Backend/Application/Services/Authentication/AuthenticationService.cs
================================================================================

using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;

namespace Application.Services.Authentication
{
    public static class AuthenticationService
	{
		public static string CreateTokenString(SecureAuthenticationModel secureAuthenticationModel)
		{
			var tokenHandler = new JwtSecurityTokenHandler();
			var key = Encoding.ASCII.GetBytes(secureAuthenticationModel.SecurityKey);
			var tokenDescriptor = new SecurityTokenDescriptor
			{
				Subject = new ClaimsIdentity(new[]
				{
					new Claim(ClaimTypes.PrimarySid, secureAuthenticationModel.User.Id.ToString()),
					new Claim(ClaimTypes.NameIdentifier, secureAuthenticationModel.User.Username)
				}),
				Issuer = secureAuthenticationModel.Issuer,
				Audience = secureAuthenticationModel.Audience,
				Expires = secureAuthenticationModel.ExpirationDate,
				NotBefore = DateTime.UtcNow,
				SigningCredentials =
					new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
			};
			var jwtToken = tokenHandler.CreateToken(tokenDescriptor);
			var tokenString = tokenHandler.WriteToken(jwtToken);
			return tokenString;
		}

		public static ClaimsPrincipal GetPrincipalFromTokenString(StandardAuthenticationModel standardAuthenticationModel)
		{
			var tokenValidationParameters = new TokenValidationParameters
			{
				ValidateAudience = true,
				ValidAudience = standardAuthenticationModel.Audience,
				ValidateIssuer = true,
				ValidIssuer = standardAuthenticationModel.Issuer,
				ValidateIssuerSigningKey = true,
				IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(standardAuthenticationModel.SecurityKey)),
				ValidateLifetime = false
			};
			
			var tokenHandler = new JwtSecurityTokenHandler();
			var principal = tokenHandler.ValidateToken(
				standardAuthenticationModel.JwtToken,
				tokenValidationParameters,
				out var securityToken);
			if (!(securityToken is JwtSecurityToken jwtSecurityToken) ||
			    !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256,
				    StringComparison.InvariantCultureIgnoreCase))
				throw new SecurityTokenException("Invalid Token");
			return principal;
		}
	}
}


================================================================================

File: Backend/Application/Services/Authentication/ExpirationDateService.cs
================================================================================

using System;

namespace Application.Services.Authentication
{
    public static class ExpirationDateService
    {
        public static DateTime JwtExpirationDate => DateTime.UtcNow.AddHours(3);

        public static DateTime RefreshTokenExpirationDate => DateTime.UtcNow.AddDays(7);
    }
}


================================================================================

File: Backend/Application/Services/Authentication/SecureAuthenticationModel.cs
================================================================================

using System;
using Domain.Models;

namespace Application.Services.Authentication
{
    public class SecureAuthenticationModel
    {
        public User User { get; set; }
        public DateTime ExpirationDate { get; set; }
        public string SecurityKey { get; set; }
        public string Issuer { get; set; }
        public string Audience { get; set; }
    }
}


================================================================================

File: Backend/Application/Services/Authentication/StandardAuthenticationModel.cs
================================================================================

namespace Application.Services.Authentication
{
    public class StandardAuthenticationModel
    {
        public string JwtToken { get; set; }
        public string SecurityKey { get; set; }
        public string Issuer { get; set; }
        public string Audience { get; set; }
    }
}


================================================================================

File: Backend/Application/Services/PasswordService.cs
================================================================================

using Application.Interfaces;
using Domain.Models;
using Microsoft.AspNetCore.Identity;

namespace Application.Services
{
	public class PasswordService : IPasswordService
	{
		private readonly IPasswordHasher<User> _passwordHasher;

		public PasswordService(IPasswordHasher<User> passwordHasher)
		{
			_passwordHasher = passwordHasher;
		}
		
		public string SecurePassword(User user, string plainTextPassword)
		{
			return _passwordHasher.HashPassword(user, plainTextPassword);
		}

		public bool PasswordsMatch(User user, string hashedPassword, string plainTextPassword)
		{
			var passwordResult = _passwordHasher.VerifyHashedPassword(user, hashedPassword, plainTextPassword);

			return passwordResult == PasswordVerificationResult.Success ||
			       passwordResult == PasswordVerificationResult.SuccessRehashNeeded;
		}
	}
}


================================================================================

File: Backend/Application/UserGroups/Commands/CreateUserGroup/CreateUserGroupCommand.cs
================================================================================

using Application.UserGroups.Models;
using MediatR;

namespace Application.UserGroups.Commands.CreateUserGroup
{
    public class CreateUserGroupCommand : IRequest<UserGroupDto>
    {
        public int UserId { get; set; }
        public int GroupId { get; set; }
        public string RequestMessage { get; set; }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/CreateUserGroup/CreateUserGroupCommandHandler.cs
================================================================================

using System;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.UserGroups.Models;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.UserGroups.Commands.CreateUserGroup
{
    public class CreateUserGroupCommandHandler : IRequestHandler<CreateUserGroupCommand, UserGroupDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public CreateUserGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<UserGroupDto> Handle(CreateUserGroupCommand request, CancellationToken cancellationToken)
        {
            var userGroups = _context.UserGroups.Include(ug => ug.Group)
                .Where(ug => ug.GroupId == request.GroupId)
                .AsNoTracking();
            if (!await userGroups.AnyAsync(cancellationToken))
                throw new NotFoundException(nameof(UserGroup), request.GroupId);
            var userIsManager =
                _authService.UserIsManagerOfGroup(
                    (await userGroups.SingleOrDefaultAsync(ug => ug.UserId == _authService.GetUserId(), cancellationToken))?
                    .Group);
            var userGroup = new UserGroup
            {
                UserId = request.UserId,
                GroupId = request.GroupId,
                IsAcceptedByUser = _authService.IsUserIdSelf(request.UserId),
                IsAcceptedByManager = userIsManager,
                RequestMessage = request.RequestMessage
            };
            if (userGroup.IsAcceptedByManager != true && userGroup.IsAcceptedByUser != true) // Someone unauthorized tried to add user to group
                throw new AuthorizationException("You are not allowed to add users to this group.");
            await _context.UserGroups.AddAsync(userGroup, cancellationToken);

            try
            {
                await _context.SaveChangesAsync(cancellationToken);
            }
            catch (DbUpdateException dbUpdateException)
            {
                if (dbUpdateException.InnerException.Message.Contains("unique constraint"))
                    throw new UniqueConstraintException(nameof(User), dbUpdateException);
                throw;
            }

            return new UserGroupDto(userGroup);
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/CreateUserGroup/CreateUserGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.UserGroups.Commands.CreateUserGroup
{
    public class CreateUserGroupCommandValidator : AbstractValidator<CreateUserGroupCommand>
    {
        public CreateUserGroupCommandValidator()
        {
            RuleFor(ug => ug.UserId).NotEmpty();
            RuleFor(ug => ug.GroupId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/DeleteUserGroup/DeleteUserGroupCommand.cs
================================================================================

using MediatR;

namespace Application.UserGroups.Commands.DeleteUserGroup
{
    public class DeleteUserGroupCommand : IRequest
    {
        public int UserId { get; set; }
        public int GroupId { get; set; }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/DeleteUserGroup/DeleteUserGroupCommandHandler.cs
================================================================================

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.UserGroups.Commands.DeleteUserGroup
{
    public class DeleteUserGroupCommandHandler : IRequestHandler<DeleteUserGroupCommand>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public DeleteUserGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<Unit> Handle(DeleteUserGroupCommand request, CancellationToken cancellationToken)
        {
            var userGroups = _context.UserGroups
                .Include(ug => ug.Group)
                .Include(ug => ug.User)
                .Where(ug => ug.GroupId == request.GroupId);
            var userGroupToDelete = await 
                userGroups.SingleOrDefaultAsync(ug => ug.UserId == request.UserId, cancellationToken);
            if (userGroupToDelete == null)
                throw new NotFoundException(nameof(UserGroup), request.UserId);
            var requesterGroup = await
                userGroups.SingleOrDefaultAsync(ug => ug.UserId == _authService.GetUserId(), cancellationToken);
            if (userGroupToDelete == requesterGroup)
                return await RemoveUserAndReturn(userGroupToDelete, cancellationToken);
            if (!_authService.UserIsOwnerOfGroup(requesterGroup.Group) &&
                !_authService.UserIsManagerOfGroup(requesterGroup.Group))
                throw new AuthorizationException("Only managers and owner can delete users from group.");
            if (_authService.UserIsOwnerOfGroup(userGroupToDelete.User, userGroupToDelete.Group))
                throw new InvalidOperationException("Owner can not be deleted from group.");
            if (!_authService.UserIsOwnerOfGroup(requesterGroup.Group) &&
                _authService.UserIsManagerOfGroup(userGroupToDelete.User, userGroupToDelete.Group))
                throw new AuthorizationException("Only owner can delete managers from group.");

            return await RemoveUserAndReturn(userGroupToDelete, cancellationToken);
        }

        private async Task<Unit> RemoveUserAndReturn(UserGroup userGroupToDelete, CancellationToken cancellationToken)
        {
            _context.UserGroups.Remove(userGroupToDelete);
            await _context.SaveChangesAsync(cancellationToken);
            return Unit.Value;
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/DeleteUserGroup/DeleteUserGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.UserGroups.Commands.DeleteUserGroup
{
    public class DeleteUserGroupCommandValidator : AbstractValidator<DeleteUserGroupCommand>
    {
        public DeleteUserGroupCommandValidator()
        {
            RuleFor(ug => ug.UserId).NotEmpty();
            RuleFor(ug => ug.GroupId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/UpdateUserGroup/UpdateUserGroupCommand.cs
================================================================================

using Application.UserGroups.Models;
using MediatR;

namespace Application.UserGroups.Commands.UpdateUserGroup
{
    public class UpdateUserGroupCommand : IRequest<UserGroupDto>
    {
        public int UserId { get; set; }
        public int GroupId { get; set; }
        public bool? IsManager { get; set; }
        public bool? UserAccepted { get; set; }       
        public bool? ManagerAccepted { get; set; }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/UpdateUserGroup/UpdateUserGroupCommandHandler.cs
================================================================================

using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.UserGroups.Models;
using Database.Context;
using MediatR;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.EntityFrameworkCore;

namespace Application.UserGroups.Commands.UpdateUserGroup
{
    public class UpdateUserGroupCommandHandler : IRequestHandler<UpdateUserGroupCommand, UserGroupDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IAuthService _authService;

        public UpdateUserGroupCommandHandler(PurchaseManagerContext context, IAuthService authService)
        {
            _context = context;
            _authService = authService;
        }

        public async Task<UserGroupDto> Handle(UpdateUserGroupCommand request, CancellationToken cancellationToken)
        {
            var userGroups = _context.UserGroups
                .Include(ug => ug.Group)
                .Where(ug => ug.GroupId == request.GroupId);
            var userGroupToChange = 
                await userGroups.SingleOrDefaultAsync(ug => ug.UserId == request.UserId, cancellationToken);
            var requesterGroup =
                await userGroups.SingleOrDefaultAsync(ug => ug.UserId == _authService.GetUserId(), cancellationToken);
            if (!userGroups.Any() || userGroupToChange == null)
                throw new NotFoundException(nameof(userGroups),
                    $"UserID: ${request.UserId}, GroupID: ${request.GroupId}");
            if (requesterGroup == null)
                throw new AuthorizationException("User is not part of group.");
            if (request.UserAccepted != null &&
                userGroupToChange.IsAcceptedByUser != request.UserAccepted &&
                _authService.IsUserIdSelf(request.UserId))
                userGroupToChange.IsAcceptedByUser = request.UserAccepted == true;
            if (request.ManagerAccepted != null &&
                userGroupToChange.IsAcceptedByManager != request.ManagerAccepted &&
                _authService.UserIsManagerOfGroup(requesterGroup.Group))
                userGroupToChange.IsAcceptedByManager = request.ManagerAccepted == true;
            if (request.IsManager != null &&
                userGroupToChange.IsManager != request.IsManager &&
                !_authService.UserIsOwnerOfGroup(requesterGroup.Group))
                userGroupToChange.IsManager = request.IsManager == true;

            await _context.SaveChangesAsync(cancellationToken);

            return new UserGroupDto(userGroupToChange);
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Commands/UpdateUserGroup/UpdateUserGroupCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.UserGroups.Commands.UpdateUserGroup
{
    public class UpdateUserGroupCommandValidator : AbstractValidator<UpdateUserGroupCommand>
    {
        public UpdateUserGroupCommandValidator()
        {
            RuleFor(ug => ug.UserId).NotEmpty();
            RuleFor(ug => ug.GroupId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Models/UserGroupDto.cs
================================================================================

using Application.Interfaces;
using Domain.Models;

namespace Application.UserGroups.Models
{
    public class UserGroupDto
    {
        public int UserId { get; set; }
        public int GroupId { get; set; }
        public bool IsManager { get; set; }
        public bool IsAcceptedByUser { get; set; }
        public bool IsAcceptedByManager { get; set; }
        public string RequestMessage { get; set; }

        public UserGroupDto(UserGroup userGroup)
        {
            UserId = userGroup.UserId;
            GroupId = userGroup.GroupId;
            IsManager = userGroup.IsManager == true;
            IsAcceptedByUser = userGroup.IsAcceptedByUser == true;
            IsAcceptedByManager = userGroup.IsAcceptedByManager == true;
            RequestMessage = userGroup.RequestMessage;
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Queries/UserGroupList/UserGroupListItemModel.cs
================================================================================

using System.Data;
using Domain.Models;

namespace Application.UserGroups.Queries.UserGroupList
{
    public class UserGroupListItemModel
    {
        public int GroupId { get; set; }
        public string GroupName { get; set; }
        public int UserId { get; set; }
        public string Username { get; set; }
        public bool IsOwner { get; set; }
        public bool IsManager { get; set; }
        public bool IsAccepted { get; set; }

        public UserGroupListItemModel(UserGroup userGroup)
        {
            GroupId = userGroup.GroupId;
            GroupName = userGroup.Group.Name;
            UserId = userGroup.UserId;
            Username = userGroup.User.Username;
            IsOwner = userGroup.Group.OwnerId == userGroup.UserId;
            IsManager = userGroup.IsManager == true;
            IsAccepted = userGroup.IsAcceptedByUser == true && userGroup.IsAcceptedByManager == true;
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Queries/UserGroupList/UserGroupListQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.UserGroups.Queries.UserGroupList
{
    public class UserGroupListQuery : IPageRequest, IRequest<UserGroupListViewModel>
    {
        public int GroupId { get; set; }
        public int Items { get; set; } = 20;
        public int Page { get; set; } = 1;
    }
}


================================================================================

File: Backend/Application/UserGroups/Queries/UserGroupList/UserGroupListQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Common.Extensions;
using Database.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.UserGroups.Queries.UserGroupList
{
    public class UserGroupListQueryHandler : IRequestHandler<UserGroupListQuery, UserGroupListViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public UserGroupListQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public Task<UserGroupListViewModel> Handle(UserGroupListQuery request, CancellationToken cancellationToken)
        {
            var userGroups = _context.UserGroups
                .Include(ug => ug.Group)
                .Include(ug => ug.User)
                .Where(ug => ug.GroupId == request.GroupId)
                .PaginateItems(request.Page, request.Items);

            var userGroupListViewModel = new UserGroupListViewModel(userGroups);

            return Task.FromResult(userGroupListViewModel);
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Queries/UserGroupList/UserGroupListQueryValidator.cs
================================================================================

using FluentValidation;

namespace Application.UserGroups.Queries.UserGroupList
{
    public class UserGroupListQueryValidator : AbstractValidator<UserGroupListQuery>
    {
        public UserGroupListQueryValidator()
        {
            RuleFor(ug => ug.GroupId).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/UserGroups/Queries/UserGroupList/UserGroupListViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.UserGroups.Queries.UserGroupList
{
    public class UserGroupListViewModel
    {
        public IEnumerable<UserGroupListItemModel> Users { get; set; }

        public UserGroupListViewModel(IEnumerable<UserGroup> userGroups)
        {
            Users = userGroups
                .Select(ug => new UserGroupListItemModel(ug))
                .OrderBy(u => u.GroupName)
                .ThenBy(u => u.Username);
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/CreateUser/CreateUserCommand.cs
================================================================================

using Application.Users.Models;
using MediatR;

namespace Application.Users.Commands.CreateUser
{
    public class CreateUserCommand : IRequest<UserDto>
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}


================================================================================

File: Backend/Application/Users/Commands/CreateUser/CreateUserCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.Users.Models;
using Common.Extensions;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Users.Commands.CreateUser
{
    public class CreateUserCommandHandler : IRequestHandler<CreateUserCommand, UserDto>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IPasswordService _passwordService;

        public CreateUserCommandHandler(PurchaseManagerContext context, IPasswordService passwordService)
        {
            _context = context;
            _passwordService = passwordService;
        }

        public async Task<UserDto> Handle(CreateUserCommand request, CancellationToken cancellationToken)
        {
            var existingUser = await _context.Users.SingleOrDefaultAsync(
                u => u.Username.IsValue(request.Username), cancellationToken);

            if (existingUser != null)
                throw new UniqueConstraintException(nameof(User), request.Username);

            var user = new User()
            {
                Username = request.Username
            };

            user.Password = _passwordService.SecurePassword(user, request.Password);

            await _context.Users.AddAsync(user, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);

            return new UserDto(user);
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/CreateUser/CreateUserCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Commands.CreateUser
{
    public class CreateUserCommandValidator : AbstractValidator<CreateUserCommand>
    {
        public CreateUserCommandValidator()
        {
            RuleFor(u => u.Username).NotEmpty().MinimumLength(6);
            RuleFor(u => u.Password).NotEmpty().MinimumLength(7);
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/DeleteUser/DeleteUserCommand.cs
================================================================================

using MediatR;

namespace Application.Users.Commands.DeleteUser
{
	public class DeleteUserCommand : IRequest
	{
		public int Id { get; set; }
		public string Password { get; set; }
	}
}


================================================================================

File: Backend/Application/Users/Commands/DeleteUser/DeleteUserCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Users.Commands.DeleteUser
{
	public class DeleteUserCommandHandler : IRequestHandler<DeleteUserCommand>
	{
		private readonly PurchaseManagerContext _context;
		private readonly IAuthService _authService;
		private readonly IPasswordService _passwordService;

		public DeleteUserCommandHandler(PurchaseManagerContext context, IAuthService authService, IPasswordService passwordService)
		{
			_context = context;
			_authService = authService;
			_passwordService = passwordService;
		}

		public async Task<Unit> Handle(DeleteUserCommand request, CancellationToken cancellationToken)
		{
			var user = await _context.Users.SingleOrDefaultAsync(u => u.Id == request.Id, cancellationToken);

			if (user == null)
				throw new NotFoundException(nameof(User), request.Id);

			if (!_authService.IsUserIdSelf(user.Id))
				throw new AuthorizationException("Only user may delete own account.");

			if (!_passwordService.PasswordsMatch(user, user.Password, request.Password))
				throw new AuthorizationException("Password was invalid.");

			_context.Users.Remove(user);

			await _context.SaveChangesAsync(cancellationToken);

			return Unit.Value;
		}
	}
}


================================================================================

File: Backend/Application/Users/Commands/DeleteUser/DeleteUserCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Commands.DeleteUser
{
	public class DeleteUserCommandValidator : AbstractValidator<DeleteUserCommand>
	{
		public DeleteUserCommandValidator()
		{
			RuleFor(u => u.Id).NotEmpty();
			RuleFor(u => u.Password).NotEmpty();
		}
	}
}


================================================================================

File: Backend/Application/Users/Commands/LoginUser/LoginUserCommand.cs
================================================================================

using Application.Users.Models;
using MediatR;

namespace Application.Users.Commands.LoginUser
{
	public class LoginUserCommand : IRequest<UserTokenModel>
	{
		public string Username { get; set; }
		public string Password { get; set; }
	}
}


================================================================================

File: Backend/Application/Users/Commands/LoginUser/LoginUserCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.Services.Authentication;
using Application.Users.Models;
using Common;
using Common.Extensions;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Application.Users.Commands.LoginUser
{
    public class LoginUserCommandHandler : IRequestHandler<LoginUserCommand, UserTokenModel>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IPasswordService _passwordService;
        private readonly IConfiguration _configuration;

        public LoginUserCommandHandler(PurchaseManagerContext context, IPasswordService passwordService, IConfiguration configuration)
        {
            _context = context;
            _passwordService = passwordService;
            _configuration = configuration;
        }

        public async Task<UserTokenModel> Handle(LoginUserCommand request, CancellationToken cancellationToken)
        {
            var user = await _context.Users.SingleOrDefaultAsync(
                u => u.Username.IsValue(request.Username),
                cancellationToken);

            if (user == null || !_passwordService.PasswordsMatch(user, user.Password, request.Password))
                throw new AuthenticationException();

            var tokenString = AuthenticationService.CreateTokenString(new SecureAuthenticationModel
            {
                User = user,
                ExpirationDate = ExpirationDateService.JwtExpirationDate,
                SecurityKey = _configuration["SecurityKey"],
                Issuer = _configuration["Issuer"],
                Audience = _configuration["Audience"]
            });

            var refreshToken = await _context.RefreshTokens.AddAsync(new RefreshToken
            {
                UserId = user.Id,
                ExpirationDate = ExpirationDateService.RefreshTokenExpirationDate,
                CreationDate = DateTime.Now,
                Token = Randomizer.GetRandomBase64String()
            }, cancellationToken);

            await _context.SaveChangesAsync(cancellationToken);

            return new UserTokenModel(user)
            {
                JwtToken = tokenString,
                RefreshToken = refreshToken.Entity.Token,
                JwtExpirationDate = ExpirationDateService.JwtExpirationDate,
                RefreshTokenExpirationDate = ExpirationDateService.RefreshTokenExpirationDate
            };
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/LoginUser/LoginUserCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Commands.LoginUser
{
	public class LoginUserCommandValidator : AbstractValidator<LoginUserCommand>
	{
		public LoginUserCommandValidator()
		{
			RuleFor(u => u.Username).NotEmpty();
			RuleFor(u => u.Password).NotEmpty();
		}
	}
}


================================================================================

File: Backend/Application/Users/Commands/RefreshUser/RefreshUserCommand.cs
================================================================================

using Application.Users.Models;
using MediatR;

namespace Application.Users.Commands.RefreshUser
{
    public class RefreshUserCommand : IRequest<UserTokenModel>
    {
        public string JwtToken { get; set; }
        public string RefreshToken { get; set; }
    }
}


================================================================================

File: Backend/Application/Users/Commands/RefreshUser/RefreshUserCommandHandler.cs
================================================================================

using System;
using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.Services.Authentication;
using Application.Users.Models;
using Common;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Application.Users.Commands.RefreshUser
{
    public class RefreshUserCommandHandler : IRequestHandler<RefreshUserCommand, UserTokenModel>
    {
        private readonly PurchaseManagerContext _context;
        private readonly IConfiguration _configuration;
        private readonly IAuthService _authService;

        public RefreshUserCommandHandler(PurchaseManagerContext context, IConfiguration configuration, IAuthService authService)
        {
            _context = context;
            _configuration = configuration;
            _authService = authService;
        }

        public async Task<UserTokenModel> Handle(RefreshUserCommand request, CancellationToken cancellationToken)
        {
            var userId = _authService.GetUserId();
            if (userId == null)
                throw new AuthenticationException("No User ID found.");
            var _ = AuthenticationService.GetPrincipalFromTokenString(new StandardAuthenticationModel
            {
                JwtToken = request.JwtToken,
                SecurityKey = _configuration["SecurityKey"],
                Issuer = _configuration["Issuer"],
                Audience = _configuration["Audience"]
            });
            var storedRefreshToken =
                await _context.RefreshTokens.SingleOrDefaultAsync(
                    t => t.Token == request.RefreshToken,
                    cancellationToken);
            if (storedRefreshToken == null)
                throw new AuthenticationException("Refresh token not found.");
            if (storedRefreshToken.IsInvalidated == true || storedRefreshToken.ExpirationDate < DateTime.UtcNow)
            {
                storedRefreshToken.IsInvalidated = true;
                await _context.SaveChangesAsync(cancellationToken);
                throw new AuthenticationException("Refresh token is invalid.");
            }

            var user = await _context.Users.SingleOrDefaultAsync(u => u.Id == userId, cancellationToken);
            if (user == null)
                throw new AuthenticationException("User not found.");

            var newTokenString = AuthenticationService.CreateTokenString(new SecureAuthenticationModel
            {
                User = user,
                ExpirationDate = ExpirationDateService.JwtExpirationDate,
                SecurityKey = _configuration["SecurityKey"],
                Issuer = _configuration["Issuer"],
                Audience = _configuration["Audience"]
            });
            var refreshToken = await _context.RefreshTokens.AddAsync(new RefreshToken
            {
                UserId = (int)userId,
                ExpirationDate = ExpirationDateService.RefreshTokenExpirationDate,
                CreationDate = DateTime.Now,
                Token = Randomizer.GetRandomBase64String()
            }, cancellationToken);
            storedRefreshToken.IsInvalidated = true;
            await _context.SaveChangesAsync(cancellationToken);
            
            return new UserTokenModel(user)
            {
                JwtToken = newTokenString,
                RefreshToken = refreshToken.Entity.Token,
                JwtExpirationDate = ExpirationDateService.JwtExpirationDate,
                RefreshTokenExpirationDate = ExpirationDateService.RefreshTokenExpirationDate
            };
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/RefreshUser/RefreshUserCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Commands.RefreshUser
{
    public class RefreshUserCommandValidator : AbstractValidator<RefreshUserCommand>
    {
        public RefreshUserCommandValidator()
        {
            RuleFor(u => u.JwtToken).NotEmpty();
            RuleFor(u => u.RefreshToken).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Users/Commands/UpdateUserPassword/UpdateUserPasswordCommand.cs
================================================================================

using Application.Users.Models;
using MediatR;

namespace Application.Users.Commands.UpdateUserPassword
{
	public class UpdateUserPasswordCommand : IRequest<UserDto>
	{
		public int Id { get; set; }
		public string OldPassword { get; set; }
		public string NewPassword { get; set; }
	}
}


================================================================================

File: Backend/Application/Users/Commands/UpdateUserPassword/UpdateUserPasswordCommandHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Application.Interfaces;
using Application.Users.Models;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Users.Commands.UpdateUserPassword
{
	public class UpdateUserPasswordCommandHandler : IRequestHandler<UpdateUserPasswordCommand, UserDto>
	{
		private readonly PurchaseManagerContext _context;
		private readonly IAuthService _authService;
		private readonly IPasswordService _passwordService;

		public UpdateUserPasswordCommandHandler(PurchaseManagerContext context, IAuthService authService, IPasswordService passwordService)
		{
			_context = context;
			_authService = authService;
			_passwordService = passwordService;
		}

		public async Task<UserDto> Handle(UpdateUserPasswordCommand request, CancellationToken cancellationToken)
		{
			var user = await _context.Users.SingleOrDefaultAsync(u => u.Id == request.Id, cancellationToken);

			if (user == null)
				throw new NotFoundException(nameof(User), request.Id);

			if (!_authService.IsUserIdSelf(user.Id))
				throw new AuthenticationException("May not change password of other users.");

			if (!_passwordService.PasswordsMatch(user, user.Password, request.OldPassword))
				throw new AuthorizationException("Password was not valid.");

			user.Password = _passwordService.SecurePassword(user, request.NewPassword);

			await _context.SaveChangesAsync(cancellationToken);

			return new UserDto(user);
		}
	}
}


================================================================================

File: Backend/Application/Users/Commands/UpdateUserPassword/UpdateUserPasswordCommandValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Commands.UpdateUserPassword
{
	public class UpdateUserPasswordCommandValidator : AbstractValidator<UpdateUserPasswordCommand>
	{
		public UpdateUserPasswordCommandValidator()
		{
			RuleFor(u => u.Id).NotEmpty();
			RuleFor(u => u.OldPassword).NotEmpty();
			RuleFor(u => u.NewPassword).NotEmpty().MinimumLength(7);
		}		
	}
}


================================================================================

File: Backend/Application/Users/Models/UserDto.cs
================================================================================

using Domain.Models;

namespace Application.Users.Models
{
    public class UserDto
    {
        public int Id { get; set; }
        public string Username { get; set; }

        public UserDto(User user)
        {
            Id = user.Id;
            Username = user.Username;
        }
    }
}


================================================================================

File: Backend/Application/Users/Models/UserTokenModel.cs
================================================================================

using System;
using Domain.Models;

namespace Application.Users.Models
{
	public class UserTokenModel
	{
		public UserDto User { get; set; }
		public string JwtToken { get; set; }
		public string RefreshToken { get; set; }
		public DateTime JwtExpirationDate { get; set; }
		public DateTime RefreshTokenExpirationDate { get; set; }

		public UserTokenModel(User user)
		{
			User = new UserDto(user);
		}
	}
}


================================================================================

File: Backend/Application/Users/Queries/UserDetail/UserDetailQuery.cs
================================================================================

using MediatR;

namespace Application.Users.Queries.UserDetail
{
    public class UserDetailQuery : IRequest<UserViewModel>
    {
        public int Id { get; set; }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserDetail/UserDetailQueryHandler.cs
================================================================================

using System.Threading;
using System.Threading.Tasks;
using Application.Exceptions;
using Database.Context;
using Domain.Models;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Users.Queries.UserDetail
{
    public class UserDetailQueryHandler : IRequestHandler<UserDetailQuery, UserViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public UserDetailQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public async Task<UserViewModel> Handle(UserDetailQuery request, CancellationToken cancellationToken)
        {
            var user = await _context.Users.SingleOrDefaultAsync(u => u.Id == request.Id, cancellationToken);

            if (user == null)
                throw new NotFoundException(nameof(User), request.Id);

            return new UserViewModel(user);
        }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserDetail/UserDetailQueryValidator.cs
================================================================================

using FluentValidation;

namespace Application.Users.Queries.UserDetail
{
    public class UserDetailQueryValidator : AbstractValidator<UserDetailQuery>
    {
        public UserDetailQueryValidator()
        {
            RuleFor(u => u.Id).NotEmpty();
        }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserDetail/UserViewModel.cs
================================================================================

using Domain.Models;

namespace Application.Users.Queries.UserDetail
{
    public class UserViewModel
    {
        public int Id { get; set; }
        public string Username { get; set; }

        public UserViewModel(User user)
        {
            Id = user.Id;
            Username = user.Username;
        }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserList/UserListItemModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.Users.Queries.UserList
{
    public class UserListItemModel
    {
        public int Id { get; set; }
        public string Username { get; set; }

        public UserListItemModel(User user)
        {
            Id = user.Id;
            Username = user.Username;
        }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserList/UserListQuery.cs
================================================================================

using Application.Interfaces;
using MediatR;

namespace Application.Users.Queries.UserList
{
    public class UserListQuery : IPageRequest, IRequest<UserListViewModel>
    {
        public int Items { get; set; }
        public int Page { get; set; }
        public string Username { get; set; }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserList/UserListQueryHandler.cs
================================================================================

using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Common.Extensions;
using Database.Context;
using MediatR;
using Microsoft.EntityFrameworkCore;

namespace Application.Users.Queries.UserList
{
    public class UserListQueryHandler : IRequestHandler<UserListQuery, UserListViewModel>
    {
        private readonly PurchaseManagerContext _context;

        public UserListQueryHandler(PurchaseManagerContext context)
        {
            _context = context;
        }

        public Task<UserListViewModel> Handle(UserListQuery request, CancellationToken cancellationToken)
        {
            var users = _context.Users
                .Where(u => u.Username.HasValue(request.Username))
                .Include(u => u.UserGroups)
                .PaginateItems(request.Page, request.Items);

            var userListViewModel = new UserListViewModel(users);

            return Task.FromResult(userListViewModel);
        }
    }
}


================================================================================

File: Backend/Application/Users/Queries/UserList/UserListViewModel.cs
================================================================================

using System.Collections.Generic;
using System.Linq;
using Domain.Models;

namespace Application.Users.Queries.UserList
{
    public class UserListViewModel
    {
        public IEnumerable<UserListItemModel> Users { get; set; }

        public UserListViewModel(IEnumerable<User> users)
        {
            Users = users.Select(u => new UserListItemModel(u)).OrderBy(u => u.Username);
        }
    }
}


================================================================================

File: Backend/Backend.sln
================================================================================

ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Domain", "Domain\Domain.csproj", "{FD671960-91AB-4F27-92CD-E4E052FE4406}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Application", "Application\Application.csproj", "{D65014B1-D578-42E2-8DF6-B2013D156065}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Database", "Database\Database.csproj", "{10EF15C1-A568-4E1D-BB1A-46780D309A31}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Common", "Common\Common.csproj", "{8D20B32A-317D-491F-B519-710F81658C06}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "API", "API\API.csproj", "{30156399-63A9-45EF-8CA6-105D4D320DB4}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{FD671960-91AB-4F27-92CD-E4E052FE4406}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{FD671960-91AB-4F27-92CD-E4E052FE4406}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{FD671960-91AB-4F27-92CD-E4E052FE4406}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{FD671960-91AB-4F27-92CD-E4E052FE4406}.Release|Any CPU.Build.0 = Release|Any CPU
		{D65014B1-D578-42E2-8DF6-B2013D156065}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D65014B1-D578-42E2-8DF6-B2013D156065}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D65014B1-D578-42E2-8DF6-B2013D156065}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D65014B1-D578-42E2-8DF6-B2013D156065}.Release|Any CPU.Build.0 = Release|Any CPU
		{10EF15C1-A568-4E1D-BB1A-46780D309A31}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{10EF15C1-A568-4E1D-BB1A-46780D309A31}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{10EF15C1-A568-4E1D-BB1A-46780D309A31}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{10EF15C1-A568-4E1D-BB1A-46780D309A31}.Release|Any CPU.Build.0 = Release|Any CPU
		{8D20B32A-317D-491F-B519-710F81658C06}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8D20B32A-317D-491F-B519-710F81658C06}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8D20B32A-317D-491F-B519-710F81658C06}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8D20B32A-317D-491F-B519-710F81658C06}.Release|Any CPU.Build.0 = Release|Any CPU
		{30156399-63A9-45EF-8CA6-105D4D320DB4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{30156399-63A9-45EF-8CA6-105D4D320DB4}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{30156399-63A9-45EF-8CA6-105D4D320DB4}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{30156399-63A9-45EF-8CA6-105D4D320DB4}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
EndGlobal



================================================================================

File: Backend/Backend.sln.DotSettings
================================================================================

ï»¿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:Boolean x:Key="/Default/UserDictionary/Words/=appsettings/@EntryIndexedValue">True</s:Boolean>
	
	<s:Boolean x:Key="/Default/UserDictionary/Words/=Randomizer/@EntryIndexedValue">True</s:Boolean></wpf:ResourceDictionary>


================================================================================

File: Backend/Backend.sln.DotSettings.user
================================================================================

ï»¿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
	<s:Int64 x:Key="/Default/CodeStyle/Naming/CSharpAutoNaming/AutoNamingCompletedVersion/@EntryValue">2</s:Int64></wpf:ResourceDictionary>


================================================================================

File: Backend/Common/Common.csproj
================================================================================

ï»¿<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
        <UserSecretsId>F110AAB6-966D-4A41-97A0-183E8D0CBA38</UserSecretsId>
    </PropertyGroup>

    <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="2.2.4" />
      <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="2.2.0" />
    </ItemGroup>

</Project>



================================================================================

File: Backend/Common/Configuration.cs
================================================================================

using System.IO;
using Microsoft.Extensions.Configuration;

namespace Common
{
	public class Configuration
	{
		private static IConfiguration _configuration;

		public static IConfiguration GetInstance()
		{
			var sharedFolder = Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).ToString(), "Shared");
			return _configuration ?? (_configuration = new ConfigurationBuilder()
				       .AddUserSecrets<Configuration>()
				       .AddJsonFile(Path.Combine(sharedFolder, "sharedSettings.json"), true, true)
				       .AddJsonFile("appsettings.json", true, true)
				       .AddJsonFile("appsettings.<Environment>.json", true, true)
				       .AddEnvironmentVariables()
				       .Build());
		}
	}
}


================================================================================

File: Backend/Common/Extensions/PrincipalExtensions.cs
================================================================================

using System.Linq;
using System.Security.Claims;

namespace Common.Extensions
{
    public static class PrincipalExtensions
    {
        public static string GetClaimValue(this ClaimsPrincipal principal, string claimType)
        {
            return principal?.Claims.SingleOrDefault(c => c.Type == claimType)?.Value;
        }
    }
}


================================================================================

File: Backend/Common/Extensions/QueryableExtensions.cs
================================================================================

using System.Linq;

namespace Common.Extensions
{
    public static class QueryableExtensions
    {
        public static IQueryable<TEntity> PaginateItems<TEntity>(this IQueryable<TEntity> items, int page, int numberOfItems)
        {
            return items.Skip(numberOfItems * (page - 1)).Take(numberOfItems);
        }
    }
}


================================================================================

File: Backend/Common/Extensions/StringExtensions.cs
================================================================================

using System;

namespace Common.Extensions
{
    public static class StringExtensions
    {
        public static bool HasValue(this string str, string value)
        {
            return string.IsNullOrWhiteSpace(value) || str.ToLowerInvariant().Contains(value.ToLowerInvariant());
        }

        public static bool IsValue(this string str, string value)
        {
            return string.Equals(str, value, StringComparison.InvariantCultureIgnoreCase);
        }
    }
}


================================================================================

File: Backend/Common/Randomizer.cs
================================================================================

ï»¿using System;
using System.Security.Cryptography;

namespace Common
{
    public static class Randomizer
    {
        public static string GetRandomBase64String()
        {
            var randomNumber = new byte[32];
            using (var randomNumberGenerator = RandomNumberGenerator.Create())
            {
                randomNumberGenerator.GetBytes(randomNumber);
                return Convert.ToBase64String(randomNumber);
            }
        }
    }
}


================================================================================

File: Backend/Database/Context/Configurations/GroupConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class GroupConfiguration : IEntityTypeConfiguration<Group>
	{
		public void Configure(EntityTypeBuilder<Group> builder)
		{
			builder.ToTable("Groups");

			builder.HasIndex(g => g.Name)
				.IsUnique();

			builder.HasKey(g => g.Id);

			builder.HasOne(g => g.Owner)
				.WithMany(o => o.OwnedGroups)
				.HasForeignKey(g => g.OwnerId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Restrict);

			builder.Property(g => g.Id)
				.HasColumnName("ID")
				.IsRequired();

			builder.Property(g => g.OwnerId)
				.HasColumnName("OwnerID")
				.IsRequired();

			builder.Property(g => g.Name)
				.HasMaxLength(100)
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/GroupItemConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class GroupItemConfiguration : IEntityTypeConfiguration<GroupItem>
	{
		public void Configure(EntityTypeBuilder<GroupItem> builder)
		{
			builder.ToTable("GroupItems");

			builder.HasKey(gi => new {gi.GroupId, gi.ItemId});

			builder.HasOne(gi => gi.Group)
				.WithMany(g => g.GroupItems)
				.HasForeignKey(gi => gi.GroupId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Cascade);

			builder.HasOne(gi => gi.Item)
				.WithMany(i => i.GroupItems)
				.HasForeignKey(gi => gi.ItemId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Restrict);

			builder.HasOne(gi => gi.ItemStatus)
				.WithMany(i => i.GroupItems)
				.HasForeignKey(gi => gi.ItemStatusId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Restrict);

			builder.Property(gi => gi.GroupId)
				.HasColumnName("GroupID")
				.IsRequired();

			builder.Property(gi => gi.ItemId)
				.HasColumnName("ItemID")
				.IsRequired();

			builder.Property(gi => gi.ItemStatusId)
				.HasColumnName("ItemStatusID")
				.IsRequired();

			builder.Property(gi => gi.LastUpdate)
				.IsRequired();

			builder.Property(gi => gi.Notes)
				.HasMaxLength(255);

			builder.Property(gi => gi.DoNotBuy)
				.HasDefaultValueSql("FALSE")
				.IsRequired();

			builder.Property(gi => gi.OneTimePurchase)
				.HasDefaultValueSql("FALSE")
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/ItemConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class ItemConfiguration : IEntityTypeConfiguration<Item>
	{
		public void Configure(EntityTypeBuilder<Item> builder)
		{
			builder.ToTable("Items");

			builder.HasKey(i => i.Id);

			builder.Property(i => i.Id)
				.HasColumnName("ID")
				.IsRequired();

			builder.Property(i => i.Name)
				.HasMaxLength(100)
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/ItemStatusConfiguration.cs
================================================================================

using System.Collections.Generic;
using Domain.Enums;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class ItemStatusConfiguration : IEntityTypeConfiguration<ItemStatus>
	{
		public void Configure(EntityTypeBuilder<ItemStatus> builder)
		{
			builder.HasData(new List<ItemStatus>
			{
				new ItemStatus
				{
					Id = ItemStatusEnum.Out,
					Name = "Out"
				},
				new ItemStatus
				{
					Id = ItemStatusEnum.Stocked,
					Name = "Stocked"
				},
				new ItemStatus
				{
					Id = ItemStatusEnum.AlmostOut,
					Name = "Almost out"
				},
			});
			
			builder.ToTable("ItemStatuses");

			builder.HasKey(i => i.Id);

			builder.Property(i => i.Id)
				.HasColumnName("ID")
				.IsRequired();

			builder.Property(i => i.Name)
				.HasMaxLength(100)
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/RefreshTokenConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
	{
		public void Configure(EntityTypeBuilder<RefreshToken> builder)
		{
			builder.ToTable("RefreshTokens");

			builder.HasKey(rt => new {rt.UserId, rt.Token});

			builder.HasOne(rt => rt.User)
				.WithMany(u => u.RefreshTokens)
				.HasForeignKey(rt => rt.UserId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Cascade);

			builder.Property(rt => rt.UserId)
				.HasColumnName("UserID")
				.IsRequired();

			builder.Property(rt => rt.Token)
				.HasMaxLength(100)
				.IsRequired();

			builder.Property(rt => rt.ExpirationDate)
				.IsRequired();

			builder.Property(rt => rt.CreationDate)
				.IsRequired();

			builder.Property(rt => rt.IsInvalidated)
				.HasDefaultValueSql("FALSE")
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/UserConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class UserConfiguration : IEntityTypeConfiguration<User>
	{
		public void Configure(EntityTypeBuilder<User> builder)
		{
			builder.ToTable("Users");

			builder.HasIndex(u => u.Username)
				.IsUnique();

			builder.HasKey(u => u.Id);

			builder.Property(u => u.Id)
				.HasColumnName("ID")
				.IsRequired();

			builder.Property(u => u.Username)
				.HasMaxLength(100)
				.IsRequired();

			builder.Property(u => u.Password)
				.HasMaxLength(255)
				.IsRequired();
		}
	}
}


================================================================================

File: Backend/Database/Context/Configurations/UserGroupConfiguration.cs
================================================================================

using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Database.Context.Configurations
{
	public class UserGroupConfiguration : IEntityTypeConfiguration<UserGroup>
	{
		public void Configure(EntityTypeBuilder<UserGroup> builder)
		{
			builder.ToTable("UserGroups");

			builder.HasKey(ug => new {ug.UserId, ug.GroupId});

			builder.HasOne(ug => ug.User)
				.WithMany(u => u.UserGroups)
				.HasForeignKey(ug => ug.UserId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Cascade);

			builder.HasOne(ug => ug.Group)
				.WithMany(g => g.GroupUsers)
				.HasForeignKey(ug => ug.GroupId)
				.IsRequired()
				.OnDelete(DeleteBehavior.Cascade);

			builder.Property(ug => ug.UserId)
				.HasColumnName("UserID")
				.IsRequired();

			builder.Property(ug => ug.GroupId)
				.HasColumnName("GroupID")
				.IsRequired();

			builder.Property(ug => ug.IsManager)
				.HasDefaultValueSql("FALSE")
				.IsRequired();

			builder.Property(ug => ug.IsAcceptedByManager)
				.HasColumnName("ManagerAccepted")
				.HasDefaultValueSql("FALSE")
				.IsRequired();

			builder.Property(ug => ug.IsAcceptedByUser)
				.HasColumnName("UserAccepted")
				.HasDefaultValueSql("FALSE")
				.IsRequired();

			builder.Property(ug => ug.RequestMessage)
				.HasMaxLength(255);
		}
	}
}


================================================================================

File: Backend/Database/Context/PurchaseManagerContext.cs
================================================================================

using Database.Context.Configurations;
using Domain.Models;
using Microsoft.EntityFrameworkCore;

namespace Database.Context
{
	public class PurchaseManagerContext : DbContext
	{
		public PurchaseManagerContext(DbContextOptions options) : base(options){}
		
		public DbSet<User> Users { get; private set; }
		public DbSet<Group> Groups { get; private set; }
		public DbSet<UserGroup> UserGroups { get; private set; }
		public DbSet<Item> Items { get; private set; }
		public DbSet<ItemStatus> ItemStatuses { get; private set; }
		public DbSet<GroupItem> GroupItems { get; private set; }
		public DbSet<RefreshToken> RefreshTokens { get; private set; }

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			modelBuilder.ForNpgsqlUseIdentityByDefaultColumns();

			modelBuilder.ApplyConfiguration(new GroupConfiguration());
			modelBuilder.ApplyConfiguration(new GroupItemConfiguration());
			modelBuilder.ApplyConfiguration(new GroupItemConfiguration());
			modelBuilder.ApplyConfiguration(new ItemConfiguration());
			modelBuilder.ApplyConfiguration(new ItemStatusConfiguration());
			modelBuilder.ApplyConfiguration(new RefreshTokenConfiguration());
			modelBuilder.ApplyConfiguration(new UserConfiguration());
			modelBuilder.ApplyConfiguration(new UserGroupConfiguration());
		}
	}
}


================================================================================

File: Backend/Database/Context/PurchaseManagerContextFactory.cs
================================================================================

using System;
using Common;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace Database.Context
{
	public class PurchaseManagerContextFactory : IDesignTimeDbContextFactory<PurchaseManagerContext>
	{
		public PurchaseManagerContext CreateDbContext(string[] args)
		{
			var configuration = Configuration.GetInstance();
			var optionsBuilder = new DbContextOptionsBuilder<PurchaseManagerContext>();
			var connectionString = configuration.GetValue<string>("ConnectionString");
			if (connectionString == null)
				throw new InvalidOperationException("Connection string is null.");

			optionsBuilder.UseNpgsql(connectionString);

			return new PurchaseManagerContext(optionsBuilder.Options);
		}
	}
}


================================================================================

File: Backend/Database/Database.csproj
================================================================================

ï»¿<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
    </PropertyGroup>
    <ItemGroup>
      <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="2.2.4" />
      <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="2.2.4" />
    </ItemGroup>
    <ItemGroup>
      <ProjectReference Include="..\Common\Common.csproj" />
      <ProjectReference Include="..\Domain\Domain.csproj" />
    </ItemGroup>
</Project>



================================================================================

File: Backend/Database/Docker/docker-compose.sample.yml
================================================================================

# For Guide only. Copy to root folder with .gitignore to use.
version: '3.7'

services:
  db:
    image: postgres
    restart: always
    container_name: inline-postgresql
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: inlinedb
    ports:
      - 10100:5432
    volumes:
      - inline-data:/var/lib/postgresql/data
      
volumes:
  inline-data:


================================================================================

File: Backend/Database/docker-compose.yml
================================================================================

# For Guide only. Copy to root folder with .gitignore to use.
version: '3.7'

services:
  db:
    image: postgres
    restart: always
    container_name: inline-postgresql
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
      POSTGRES_DB: inlinedb
    ports:
      - 10100:5432
    volumes:
      - inline-data:/var/lib/postgresql/data
      
volumes:
  inline-data:


================================================================================

File: Backend/Database/Migrations/20190219072858_InitialMigration.cs
================================================================================

ï»¿using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    public partial class InitialMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Groups",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Groups", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Items",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Items", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ItemStatuses",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false),
                    Name = table.Column<string>(maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemStatuses", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Username = table.Column<string>(maxLength: 100, nullable: false),
                    Password = table.Column<string>(maxLength: 255, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "GroupItems",
                columns: table => new
                {
                    GroupID = table.Column<int>(nullable: false),
                    ItemID = table.Column<int>(nullable: false),
                    ItemStatusID = table.Column<int>(nullable: false),
                    LastUpdate = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GroupItems", x => new { x.GroupID, x.ItemID, x.ItemStatusID });
                    table.ForeignKey(
                        name: "FK_GroupItems_Groups_GroupID",
                        column: x => x.GroupID,
                        principalTable: "Groups",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_GroupItems_Items_ItemID",
                        column: x => x.ItemID,
                        principalTable: "Items",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GroupItems_ItemStatuses_ItemStatusID",
                        column: x => x.ItemStatusID,
                        principalTable: "ItemStatuses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RefreshTokens",
                columns: table => new
                {
                    UserID = table.Column<int>(nullable: false),
                    Token = table.Column<string>(maxLength: 100, nullable: false),
                    ExpirationDate = table.Column<DateTime>(nullable: false),
                    IsInvalidated = table.Column<bool>(nullable: false, defaultValueSql: "FALSE")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RefreshTokens", x => new { x.UserID, x.Token });
                    table.ForeignKey(
                        name: "FK_RefreshTokens_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserGroups",
                columns: table => new
                {
                    UserID = table.Column<int>(nullable: false),
                    GroupID = table.Column<int>(nullable: false),
                    IsManager = table.Column<bool>(nullable: false, defaultValueSql: "FALSE"),
                    IsAccepted = table.Column<bool>(nullable: false, defaultValueSql: "FALSE")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGroups", x => new { x.UserID, x.GroupID });
                    table.ForeignKey(
                        name: "FK_UserGroups_Groups_GroupID",
                        column: x => x.GroupID,
                        principalTable: "Groups",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserGroups_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_GroupItems_ItemID",
                table: "GroupItems",
                column: "ItemID");

            migrationBuilder.CreateIndex(
                name: "IX_GroupItems_ItemStatusID",
                table: "GroupItems",
                column: "ItemStatusID");

            migrationBuilder.CreateIndex(
                name: "IX_UserGroups_GroupID",
                table: "UserGroups",
                column: "GroupID");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "GroupItems");

            migrationBuilder.DropTable(
                name: "RefreshTokens");

            migrationBuilder.DropTable(
                name: "UserGroups");

            migrationBuilder.DropTable(
                name: "Items");

            migrationBuilder.DropTable(
                name: "ItemStatuses");

            migrationBuilder.DropTable(
                name: "Groups");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190219072858_InitialMigration.Designer.cs
================================================================================

ï»¿// <auto-generated />

using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190219072858_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PurchaseManager.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAccepted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PurchaseManager.Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190224211804_AddUserAcceptedColumnAndRenameManagerAcceptedColumn.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddUserAcceptedColumnAndRenameManagerAcceptedColumn : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "IsAccepted",
                table: "UserGroups",
                newName: "UserAccepted");

            migrationBuilder.AddColumn<bool>(
                name: "ManagerAccepted",
                table: "UserGroups",
                nullable: false,
                defaultValueSql: "FALSE");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "ManagerAccepted",
                table: "UserGroups");

            migrationBuilder.RenameColumn(
                name: "UserAccepted",
                table: "UserGroups",
                newName: "IsAccepted");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190224211804_AddUserAcceptedColumnAndRenameManagerAcceptedColumn.Designer.cs
================================================================================

ï»¿// <auto-generated />

using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190224211804_AddUserAcceptedColumnAndRenameManagerAcceptedColumn")]
    partial class AddUserAcceptedColumnAndRenameManagerAcceptedColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PurchaseManager.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PurchaseManager.Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190224215133_AddNotesColumnToGroupItemTable.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddNotesColumnToGroupItemTable : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "Notes",
                table: "GroupItems",
                maxLength: 255,
                nullable: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Notes",
                table: "GroupItems");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190224215133_AddNotesColumnToGroupItemTable.Designer.cs
================================================================================

ï»¿// <auto-generated />

using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190224215133_AddNotesColumnToGroupItemTable")]
    partial class AddNotesColumnToGroupItemTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PurchaseManager.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.GroupItem", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PurchaseManager.Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PurchaseManager.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("PurchaseManager.Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PurchaseManager.Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190309191025_AddRequestMessageColumnToUserGroups.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddRequestMessageColumnToUserGroups : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "RequestMessage",
                table: "UserGroups",
                maxLength: 255,
                nullable: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "RequestMessage",
                table: "UserGroups");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190309191025_AddRequestMessageColumnToUserGroups.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190309191025_AddRequestMessageColumnToUserGroups")]
    partial class AddRequestMessageColumnToUserGroups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190330181010_AddGroupOwner.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddGroupOwner : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "OwnerID",
                table: "Groups",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateIndex(
                name: "IX_Groups_OwnerID",
                table: "Groups",
                column: "OwnerID");

            migrationBuilder.AddForeignKey(
                name: "FK_Groups_Users_OwnerID",
                table: "Groups",
                column: "OwnerID",
                principalTable: "Users",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Groups_Users_OwnerID",
                table: "Groups");

            migrationBuilder.DropIndex(
                name: "IX_Groups_OwnerID",
                table: "Groups");

            migrationBuilder.DropColumn(
                name: "OwnerID",
                table: "Groups");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190330181010_AddGroupOwner.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190330181010_AddGroupOwner")]
    partial class AddGroupOwner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190331231530_AddItemConfiguration.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddItemConfiguration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "Id",
                table: "Items",
                newName: "ID");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Items",
                maxLength: 100,
                nullable: false,
                oldClrType: typeof(string),
                oldNullable: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameColumn(
                name: "ID",
                table: "Items",
                newName: "Id");

            migrationBuilder.AlterColumn<string>(
                name: "Name",
                table: "Items",
                nullable: true,
                oldClrType: typeof(string),
                oldMaxLength: 100);
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190331231530_AddItemConfiguration.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190331231530_AddItemConfiguration")]
    partial class AddItemConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId", "ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsInvalidated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsAcceptedByManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool>("IsAcceptedByUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190401014537_RemoveItemStatusAsKey.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class RemoveItemStatusAsKey : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropPrimaryKey(
                name: "PK_GroupItems",
                table: "GroupItems");

            migrationBuilder.AddPrimaryKey(
                name: "PK_GroupItems",
                table: "GroupItems",
                columns: new[] { "GroupID", "ItemID" });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropPrimaryKey(
                name: "PK_GroupItems",
                table: "GroupItems");

            migrationBuilder.AddPrimaryKey(
                name: "PK_GroupItems",
                table: "GroupItems",
                columns: new[] { "GroupID", "ItemID", "ItemStatusID" });
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190401014537_RemoveItemStatusAsKey.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190401014537_RemoveItemStatusAsKey")]
    partial class RemoveItemStatusAsKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsInvalidated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsAcceptedByManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool>("IsAcceptedByUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool>("IsManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190428224821_SeedItemStatuses.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class SeedItemStatuses : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData(
                table: "ItemStatuses",
                columns: new[] { "ID", "Name" },
                values: new object[,]
                {
                    { 3, "Out" },
                    { 1, "Okay" },
                    { 2, "Almost out" },
                    { 4, "One time purchase" }
                });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DeleteData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 1);

            migrationBuilder.DeleteData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 2);

            migrationBuilder.DeleteData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 3);

            migrationBuilder.DeleteData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 4);
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190428224821_SeedItemStatuses.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190428224821_SeedItemStatuses")]
    partial class SeedItemStatuses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Okay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        },
                        new
                        {
                            Id = 4,
                            Name = "One time purchase"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190501214431_AddIndicesToUsersAndGroups.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddIndicesToUsersAndGroups : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateIndex(
                name: "IX_Users_Username",
                table: "Users",
                column: "Username",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Groups_Name",
                table: "Groups",
                column: "Name",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Users_Username",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Groups_Name",
                table: "Groups");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190501214431_AddIndicesToUsersAndGroups.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190501214431_AddIndicesToUsersAndGroups")]
    partial class AddIndicesToUsersAndGroups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Okay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        },
                        new
                        {
                            Id = 4,
                            Name = "One time purchase"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190509024128_AddRefreshTokenCreationDate.cs
================================================================================

ï»¿using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddRefreshTokenCreationDate : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "CreationDate",
                table: "RefreshTokens",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "CreationDate",
                table: "RefreshTokens");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190509024128_AddRefreshTokenCreationDate.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190509024128_AddRefreshTokenCreationDate")]
    partial class AddRefreshTokenCreationDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Okay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        },
                        new
                        {
                            Id = 4,
                            Name = "One time purchase"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190512222523_AddDoNotBuyFlag.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class AddDoNotBuyFlag : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "DoNotBuy",
                table: "GroupItems",
                nullable: false,
                defaultValueSql: "FALSE");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "DoNotBuy",
                table: "GroupItems");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190512222523_AddDoNotBuyFlag.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190512222523_AddDoNotBuyFlag")]
    partial class AddDoNotBuyFlag
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<bool>("DoNotBuy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Okay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        },
                        new
                        {
                            Id = 4,
                            Name = "One time purchase"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190515035259_PushOneTimePurchaseToNewColumn.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class PushOneTimePurchaseToNewColumn : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DeleteData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 4);

            migrationBuilder.AddColumn<bool>(
                name: "OneTimePurchase",
                table: "GroupItems",
                nullable: false,
                defaultValueSql: "FALSE");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "OneTimePurchase",
                table: "GroupItems");

            migrationBuilder.InsertData(
                table: "ItemStatuses",
                columns: new[] { "ID", "Name" },
                values: new object[] { 4, "One time purchase" });
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190515035259_PushOneTimePurchaseToNewColumn.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190515035259_PushOneTimePurchaseToNewColumn")]
    partial class PushOneTimePurchaseToNewColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<bool>("DoNotBuy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<bool>("OneTimePurchase")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Okay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190531215256_RenameOkayToStocked.cs
================================================================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

namespace Database.Migrations
{
    public partial class RenameOkayToStocked : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 1,
                column: "Name",
                value: "Stocked");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "ItemStatuses",
                keyColumn: "ID",
                keyValue: 1,
                column: "Name",
                value: "Okay");
        }
    }
}



================================================================================

File: Backend/Database/Migrations/20190531215256_RenameOkayToStocked.Designer.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    [Migration("20190531215256_RenameOkayToStocked")]
    partial class RenameOkayToStocked
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<bool?>("DoNotBuy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<bool?>("OneTimePurchase")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Stocked"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Database/Migrations/PurchaseManagerContextModelSnapshot.cs
================================================================================

ï»¿// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Migrations
{
    [DbContext(typeof(PurchaseManagerContext))]
    partial class PurchaseManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId")
                        .HasColumnName("OwnerID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemID");

                    b.Property<bool?>("DoNotBuy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<int>("ItemStatusId")
                        .HasColumnName("ItemStatusID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<bool?>("OneTimePurchase")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("GroupId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemStatusId");

                    b.ToTable("GroupItems");
                });

            modelBuilder.Entity("Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Domain.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Out"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Stocked"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Almost out"
                        });
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool?>("IsInvalidated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.HasKey("UserId", "Token");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID");

                    b.Property<bool?>("IsAcceptedByManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManagerAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsAcceptedByUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserAccepted")
                        .HasDefaultValueSql("FALSE");

                    b.Property<bool?>("IsManager")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("FALSE");

                    b.Property<string>("RequestMessage")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.GroupItem", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupItems")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.Item", "Item")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.ItemStatus", "ItemStatus")
                        .WithMany("GroupItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Models.UserGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}



================================================================================

File: Backend/Dockerfile
================================================================================

FROM mcr.microsoft.com/dotnet/core/sdk:2.2.204-alpine as build
WORKDIR /usr/local/app
COPY . .
RUN dotnet restore
RUN cd API && dotnet publish --no-restore -c Release -o out

FROM mcr.microsoft.com/dotnet/core/aspnet:2.2.5-alpine
WORKDIR /usr/local/app
COPY --from=build /usr/local/app/API/out .
ENV TIMEZONE=America/Detroit
ENV Issuer=${ISSUER}
ENV Audience=${AUDIENCE}
RUN apk add tzdata && \
    cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && \
    echo "${TIMEZONE}" > /etc/timezone && \
    apk del tzdata
ENTRYPOINT ["dotnet", "API.dll"]


================================================================================

File: Backend/Domain/Domain.csproj
================================================================================

ï»¿<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
    </PropertyGroup>
</Project>



================================================================================

File: Backend/Domain/Enums/ItemStatusEnum.cs
================================================================================

namespace Domain.Enums
{
    public enum ItemStatusEnum
    {
        Stocked = 1,
        AlmostOut = 2,
        Out = 3,
    }
}


================================================================================

File: Backend/Domain/Models/Group.cs
================================================================================

using System.Collections.Generic;

namespace Domain.Models
{
    public class Group
    {
        public int Id { get; set; }
        public int OwnerId { get; set; }
        public User Owner { get; set; }
        public string Name { get; set; }
        
        public ICollection<UserGroup> GroupUsers { get; }
        public ICollection<GroupItem> GroupItems { get; }

        public Group()
        {
            GroupUsers = new HashSet<UserGroup>();
            GroupItems = new HashSet<GroupItem>();
        }
    }
}


================================================================================

File: Backend/Domain/Models/GroupItem.cs
================================================================================

using System;
using Domain.Enums;

namespace Domain.Models
{
    public class GroupItem
    {
        public int GroupId { get; set; }
        public Group Group { get; set; }
        public int ItemId { get; set; }
        public Item Item { get; set; }
        public ItemStatusEnum ItemStatusId { get; set; }
        public ItemStatus ItemStatus { get; set; }
        public DateTime LastUpdate { get; set; }
        public string Notes { get; set; }
        public bool? OneTimePurchase { get; set; }
        public bool? DoNotBuy { get; set; }
    }
}


================================================================================

File: Backend/Domain/Models/Item.cs
================================================================================

using System.Collections.Generic;

namespace Domain.Models
{
    public class Item
    {
        public int Id { get; set; }
        public string Name { get; set; }
        
        public ICollection<GroupItem> GroupItems { get; }

        public Item()
        {
            GroupItems = new HashSet<GroupItem>();
        }
    }
}


================================================================================

File: Backend/Domain/Models/ItemStatus.cs
================================================================================

using System.Collections.Generic;
using Domain.Enums;

namespace Domain.Models
{
    public class ItemStatus
    {
        public ItemStatusEnum Id { get; set; }
        public string Name { get; set; }
        
        public ICollection<GroupItem> GroupItems { get; }

        public ItemStatus()
        {
            GroupItems = new HashSet<GroupItem>();
        }
    }
}


================================================================================

File: Backend/Domain/Models/RefreshToken.cs
================================================================================

using System;

namespace Domain.Models
{
    public class RefreshToken
    {
        public int UserId { get; set; }
        public User User { get; set; }
        public string Token { get; set; }
        public DateTime ExpirationDate { get; set; }
        public DateTime CreationDate { get; set; }
        public bool? IsInvalidated { get; set; }
    }
}


================================================================================

File: Backend/Domain/Models/User.cs
================================================================================

using System.Collections.Generic;

namespace Domain.Models
{
    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        
        public ICollection<UserGroup> UserGroups { get; }
        public ICollection<RefreshToken> RefreshTokens { get; }
        public ICollection<Group> OwnedGroups { get; }

        public User()
        {
            UserGroups = new HashSet<UserGroup>();
            RefreshTokens = new HashSet<RefreshToken>();
            OwnedGroups = new HashSet<Group>();
        }
    }
}


================================================================================

File: Backend/Domain/Models/UserGroup.cs
================================================================================

namespace Domain.Models
{
    public class UserGroup
    {
        public int UserId { get; set; }
        public User User { get; set; }
        public int GroupId { get; set; }
        public Group Group { get; set; }
        public bool? IsManager { get; set; }
        public bool? IsAcceptedByManager { get; set; }
        public bool? IsAcceptedByUser { get; set; }
        public string RequestMessage { get; set; }
    }
}


================================================================================

File: Backend/README.md
================================================================================

**Edit a file, create a new file, and clone from Bitbucket in under 2 minutes**

When you're done, you can delete the content in this README and update the file with details for others getting started with your repository.

*We recommend that you open this README in another tab as you perform the tasks below. You can [watch our video](https://youtu.be/0ocf7u76WSo) for a full demo of all the steps in this tutorial. Open the video in a new tab to avoid leaving Bitbucket.*

---

## Edit a file

Youâll start by editing this README file to learn how to edit a file in Bitbucket.

1. Click **Source** on the left side.
2. Click the README.md link from the list of files.
3. Click the **Edit** button.
4. Delete the following text: *Delete this line to make a change to the README from Bitbucket.*
5. After making your change, click **Commit** and then **Commit** again in the dialog. The commit page will open and youâll see the change you just made.
6. Go back to the **Source** page.

---

## Create a file

Next, youâll add a new file to this repository.

1. Click the **New file** button at the top of the **Source** page.
2. Give the file a filename of **contributors.txt**.
3. Enter your name in the empty file space.
4. Click **Commit** and then **Commit** again in the dialog.
5. Go back to the **Source** page.

Before you move on, go ahead and explore the repository. You've already seen the **Source** page, but check out the **Commits**, **Branches**, and **Settings** pages.

---

## Clone a repository

Use these steps to clone from SourceTree, our client for using the repository command-line free. Cloning allows you to work on your files locally. If you don't yet have SourceTree, [download and install first](https://www.sourcetreeapp.com/). If you prefer to clone from the command line, see [Clone a repository](https://confluence.atlassian.com/x/4whODQ).

1. Youâll see the clone button under the **Source** heading. Click that button.
2. Now click **Check out in SourceTree**. You may need to create a SourceTree account or log in.
3. When you see the **Clone New** dialog in SourceTree, update the destination path and name if youâd like to and then click **Clone**.
4. Open the directory you just created to see your repositoryâs files.

Now that you're more familiar with your Bitbucket repository, go ahead and add a new file locally. You can [push your change back to Bitbucket with SourceTree](https://confluence.atlassian.com/x/iqyBMg), or you can [add, commit,](https://confluence.atlassian.com/x/8QhODQ) and [push from the command line](https://confluence.atlassian.com/x/NQ0zDQ).


================================================================================

File: Backend/Shared/sharedSettings.json
================================================================================

{
    
}


================================================================================

File: Frontend/assets/README.md
================================================================================

# ASSETS

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains your un-compiled assets such as LESS, SASS, or JavaScript.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/assets#webpacked).



================================================================================

File: Frontend/assets/style/app.scss
================================================================================

.maintain-white-space {
  white-space: pre;
}

.default-cursor {
  cursor: default;
}



================================================================================

File: Frontend/assets/style/app.styl
================================================================================

// Import Vuetify styling
@require '~vuetify/src/stylus/app.styl'



================================================================================

File: Frontend/assets/style/variables.styl
================================================================================

@require '~vuetify/src/stylus/settings/_variables.styl'



================================================================================

File: Frontend/common/fake-extensions/String.ts
================================================================================

export default class String {
  public static SplitByFirst(value: string, separator: string, returnFirst: boolean = true) : string {
    return returnFirst
      ? value.split(separator)[0]
      : value.split(separator).slice(1).join(separator);
  }
}



================================================================================

File: Frontend/components/group/delete-group-user.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Delete {{ user.Name }} from {{ group.Name }}</v-card-title>
    <v-card-text class="body-2">
      Are you sure you want to delete {{ user.Name }} from the group?<br/>
    </v-card-text>
    <v-card-actions>
      <v-btn color="primary" @click="onCloseClicked">Cancel</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="error" :loading="loading" @click="onDeleteUserClicked">Delete user</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import { Action } from 'vuex-class';
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class DeleteGroupUser extends Vue {
    @Prop(Object) readonly user: GroupUserViewModel;
    @Prop(Object) readonly group: GroupViewModel;
    loading: boolean = false;
    @Action('SnackStore/addSnack') AddSnack: Function;

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('delete')
    onUserDeleted() {}

    async onDeleteUserClicked() {
      this.loading = true;
      await this.$axios.delete(`groups/${this.group.Id}/users/${this.user.Id}`)
        .then(() => {
          this.AddSnack(new SnackMessage(`${this.user.Name} has been removed from ${this.group.Name}.`, 'info'));
          this.onUserDeleted();
        })
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/delete-group.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Delete {{ group.Name }}</v-card-title>
    <v-card-text>
      <p class="body-2 ma-0">
        Are you absolutely sure that you wish to delete your group?<br/>
        This act is irreversible!
      </p>
    </v-card-text>
    <v-card-actions>
      <v-btn color="primary" @click="onCloseClicked">Cancel</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="error" outline type="submit" @click="onDeleteGroupClicked">Delete</v-btn>
    </v-card-actions>
    <v-slide-y-transition>
      <v-card-actions v-show="loading">
        <v-flex>
          <p class="subheading text-xs-center">Deleting group.</p>
          <v-progress-linear v-model="LoadingStatus" :active="loading"></v-progress-linear>
        </v-flex>
      </v-card-actions>
    </v-slide-y-transition>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import { Action } from 'vuex-class';
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class DeleteGroup extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    @Action('SnackStore/addSnack') AddSnack: Function;
    loading: boolean = false;
    loadingProgress: number = 0;

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('delete')
    onGroupDeleted() {
      this.AddSnack(new SnackMessage(`Deleted ${this.group.Name}`, 'info'));
    }

    async onDeleteGroupClicked() {
      this.loading = true;
      for (let user of this.group.Users) {
        await this.$axios.delete(`groups/${ this.group.Id }/users/${ user.Id }`)
          .then(() => this.loadingProgress++)
          .catch(error => console.dir(error));
      }
      await this.$axios.delete(`groups/${ this.group.Id }`)
        .then(() => {
          this.loadingProgress++;
          this.onGroupDeleted();
        })
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }

    get LoadingStatus(): number {
      return this.loadingProgress / (this.group.Users.length + 1) * 100;
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/find-group.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onFormSubmitted">
      <v-card-title class="headline grey lighten-2">Find group</v-card-title>
      <v-card-text>
        <v-autocomplete v-model="newGroup.GroupId"
                        :loading="findGroupAutocomplete.Loading"
                        :search-input.sync="search"
                        clearable
                        :rules="GroupRules"
                        :items="findGroupAutocomplete.Items"
                        :item-value="findGroupAutocomplete.ValueProperty"
                        :item-text="findGroupAutocomplete.TextProperty"
                        hide-no-data
                        label="Group"></v-autocomplete>
        <v-textarea v-model="newGroup.RequestMessage"
                    label="Application Message"
                    clearable
                    no-resize
                    rows="4"></v-textarea>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Cancel</v-btn>
        <v-spacer></v-spacer>
        <v-btn color="success" type="submit" :disabled="!valid" :loading="loading">Submit</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Vue, Watch } from 'vue-property-decorator';
  import CreateGroupUserModel from "../../models/setter/group/CreateGroupUserModel";
  import AutocompleteModel from "../../models/app/AutocompleteModel";
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";
  import { Action, Getter } from 'vuex-class';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class FindGroup extends Vue {
    valid: boolean = false;
    newGroup: CreateGroupUserModel = new CreateGroupUserModel();
    findGroupAutocomplete: AutocompleteModel = new AutocompleteModel('name', 'id');
    loading: boolean = false;
    search: string = '';
    writingTimeout;
    @Getter('UserStore/user') User: UserAccountModel;
    @Action('SnackStore/addSnack') AddSnack: Function;

    mounted() {
      this.setRequestMessage();
    }

    @Emit('close')
    onCloseClicked() {
      this.search = '';
      this.newGroup.GroupId = undefined;
      this.setRequestMessage();
    }

    @Emit('join')
    onGroupJoined(group: GroupListItemModel): GroupListItemModel {
      this.search = '';
      this.newGroup.GroupId = undefined;
      return group;
    }

    setRequestMessage() {
      this.newGroup.RequestMessage = `Hello! I'd like to join your group.\r\n\r\nRegards, ${this.User.Username}`;
    }

    @Watch('search')
    async onGroupChanged() {
      if (!this.search || this.search.length <= 0) return;
      if (this.writingTimeout)
        clearTimeout(this.writingTimeout);
      if (this.findGroupAutocomplete.Loading) return;
      this.writingTimeout = setTimeout(async () => {
        this.findGroupAutocomplete.Loading = true;
        await this.$axios.get(`groups?name=${ this.search }`)
          .then(response => {
            this.findGroupAutocomplete.SetItems(response.data.groups);
          })
          .catch(error => console.dir(error))
          .finally(() => this.findGroupAutocomplete.Loading = false);
      }, 750);
    }

    async onFormSubmitted() {
      this.loading = true;
      this.newGroup.UserId = this.User.Id;
      await this.$axios.post(`groups/${this.newGroup.GroupId}/users`, this.newGroup)
        .then(response => {
          const group = new GroupListItemModel();
          group.Id = response.data.groupId;
          group.Name = this.search;
          group.IsAcceptedByUser = response.data.isAcceptedByUser;
          group.IsAcceptedByManager = response.data.isAcceptedByManager;
          group.IsManager = response.data.isManager;
          group.IsOwner = false;
          group.RequestMessage = response.data.requestMessage;
          this.AddSnack(new SnackMessage(`Sent application to group '${this.search}'`, 'success'));
          this.onGroupJoined(group);
        })
        .catch(error => {
          if (error.response.status === 400) {
            this.AddSnack(new SnackMessage(`You are already part of group '${this.search}'`, 'error'));
          }
          console.dir(error)
        })
        .finally(() => this.loading = false);
    }

    get GroupRules(): Array<any> {
      return [
        v => !!v || 'Group is required.'
      ]
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/group-user-view.vue
================================================================================

<template>
  <v-card>
    <v-dialog v-model="showNewOwnerDialog" max-width="600px">
      <NewOwner :new-owner="user" :group="group" @close="showNewOwnerDialog = false" @update="onOwnerUpdated"></NewOwner>
    </v-dialog>
    <v-dialog v-model="showDeleteUserDialog" max-width="600px">
      <DeleteGroupUser :user="user" :group="group" @close="showDeleteUserDialog = false" @delete="onUserDeleted"></DeleteGroupUser>
    </v-dialog>
    <v-card-title class="headline grey lighten-2">{{ user.Name }}</v-card-title>
    <v-card-text>
      <v-select :items="roles" item-value="Id" item-text="Value" label="Role" v-model="userRole" v-if="groupUser.IsOwner"></v-select>
      <v-btn color="primary" @click="showNewOwnerDialog = true" block v-if="groupUser.IsOwner">Promote to owner</v-btn>
      <v-btn color="error" @click="showDeleteUserDialog = true" block v-if="groupUser.IsOwner || groupUser.IsManager && !user.IsManager">Delete user</v-btn>
    </v-card-text>
    <v-card-actions>
      <v-btn color="error" @click="onCloseClicked">Close</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="success" v-if="groupUser.IsOwner" :loading="loading" @click="onUpdateClicked" :disabled="!ValuesChanged">Update</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import UserGroupRoleModel from "../../models/app/UserGroupRoleModel";
  import NewOwner from './new-owner.vue';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import UpdateGroupUserModel from "../../models/setter/group/UpdateGroupUserModel";
  import DeleteGroupUser from './delete-group-user.vue';

	@Component({
    components: {DeleteGroupUser, NewOwner},
    mounted(): void {
      this.roles.push(new UserGroupRoleModel(1, 'User'));
      this.roles.push(new UserGroupRoleModel(2, 'Manager'));
    }
  })

	export default class GroupUserView extends Vue {
	  @Prop(Object) readonly user: GroupUserViewModel;
	  @Prop(Object) readonly groupUser: GroupUserViewModel;
	  @Prop(Object) readonly group: GroupViewModel;
	  loading: boolean = false;
	  roles: Array<UserGroupRoleModel> = [];
	  userRole: number = -1;
	  showNewOwnerDialog: boolean = false;
	  showDeleteUserDialog: boolean = false;

	  @Watch('user', {deep: true})
    onUserChanged() {
	    this.userRole = this.user.IsManager ? 2 : 1;
    }

	  @Emit('close')
    onCloseClicked() {}

    @Emit('update')
    onUserUpdated(): GroupUserViewModel {
	    return this.user;
    }

    @Emit('delete')
    onUserDeleted(): GroupUserViewModel {
	    return this.user;
    }

    @Emit('owner-update')
    onOwnerUpdated(): GroupUserViewModel {
	    this.showNewOwnerDialog = false;
	    return this.user;
    }

    async onUpdateClicked() {
	    this.loading = true;
      const updateUser: UpdateGroupUserModel = new UpdateGroupUserModel();
      updateUser.GroupId = this.group.Id;
      updateUser.IsManager = this.userRole === 2;
      updateUser.UserId = this.user.Id;
      await this.$axios.put(`groups/${this.group.Id}/users/${this.user.Id}`, updateUser)
        .then(() => {
          this.user.IsManager = updateUser.IsManager;
          this.onUserUpdated();
        })
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }

    get ValuesChanged(): boolean {
	    if (this.user.IsManager) {
	      return this.userRole !== 2;
      } else {
	      return this.userRole !== 1;
      }
    }
	}
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/invitation-view.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Invitation from {{ group.Name }}</v-card-title>
    <v-card-text class="maintain-white-space">{{ group.RequestMessage }}</v-card-text>
    <v-card-actions>
      <v-btn color="error" :loading="deletionLoading" @click="onDeleteInvitationClicked">Delete</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="secondary" @click="onCloseClicked">Ignore</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="success" :loading="acceptanceLoading" @click="onAcceptInvitationClicked">Accept</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import { Action, Getter } from 'vuex-class';
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";
  import UpdateGroupUserModel from '../../models/setter/group/UpdateGroupUserModel';

  @Component({})

  export default class InvitationView extends Vue {
    deletionLoading: boolean = false;
    acceptanceLoading: boolean = false;
    @Prop(Object) readonly group: GroupListItemModel;
    @Getter('UserStore/user') User: UserAccountModel;

    @Watch('group')
    onGroupChanged() {
    }

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('delete')
    onInvitationDeleted() {
      return this.group.Id;
    }

    @Emit('accept')
    onInvitationAccepted() {
      return this.group.Id;
    }

    async onDeleteInvitationClicked() {
      this.deletionLoading = true;
      await this.$axios.delete(`groups/${ this.group.Id }/users/${ this.User.Id }`)
        .then(() => this.onInvitationDeleted())
        .catch(error => console.dir(error))
        .finally(() => this.deletionLoading = false)
    }

    async onAcceptInvitationClicked() {
      this.acceptanceLoading = true;
      const updateGroupUser = new UpdateGroupUserModel();
      updateGroupUser.UserId = this.User.Id;
      updateGroupUser.GroupId = this.group.Id;
      updateGroupUser.UserAccepted = true;
      await this.$axios.put(`groups/${ updateGroupUser.GroupId }/users/${ updateGroupUser.UserId }`, updateGroupUser)
        .then(() => this.onInvitationAccepted())
        .catch(error => console.dir(error))
        .finally(() => this.acceptanceLoading = false);
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/leave-group-view.vue
================================================================================

<template>
  <v-card>
    <v-card-text class="headline grey lighten-2">Leave {{ group.Name }}</v-card-text>
    <v-card-text>
      <p class="body-2 ma-0">Are you sure you that you wish to leave the group?</p>
    </v-card-text>
    <v-card-actions>
      <v-btn color="primary" @click="onCloseClicked">Cancel</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="error" outline @click="onSubmitClicked" :loading="loading">Leave</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import { Action, Getter } from 'vuex-class';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import SnackMessage from "../../models/app/SnackMessage";

	@Component({})

	export default class LeaveGroupView extends Vue {
	  @Prop(Object) readonly group: GroupViewModel;
	  @Getter('UserStore/user') readonly User: UserAccountModel;
	  @Action('SnackStore/addSnack') AddSnack: Function;
	  loading: boolean = false;

    @Emit('close')
    onCloseClicked(){}

    async onSubmitClicked() {
      this.loading = true;
      await this.$axios.delete(`groups/${this.group.Id}/users/${this.User.Id}`)
        .then(() => {
          this.AddSnack(new SnackMessage(`Successfully left ${this.group.Name}`, 'info'));
          this.$router.push('/groups');
        })
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }
	}
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/new-group-user.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onFormSubmitted">
      <v-card-title class="headline grey lighten-2">Add new user</v-card-title>
      <v-card-text>
        <v-autocomplete v-model="newUser.UserId"
                        :loading="newUserAutocomplete.Loading"
                        :search-input.sync="search"
                        clearable
                        :rules="NewUserRules"
                        :items="newUserAutocomplete.Items"
                        :item-value="newUserAutocomplete.ValueProperty"
                        :item-text="newUserAutocomplete.TextProperty"
                        hide-no-data
                        label="User"></v-autocomplete>
        <v-textarea v-model="newUser.RequestMessage"
                    label="Invitation Message"
                    clearable
                    no-resize
                    rows="4"></v-textarea>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Cancel</v-btn>
        <v-spacer></v-spacer>
        <v-btn color="success" type="submit" :disabled="!valid" :loading="loading">Submit</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';
  import AutocompleteModel from "../../models/app/AutocompleteModel";
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import CreateGroupUserModel from "../../models/setter/group/CreateGroupUserModel";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import { Action, Getter } from 'vuex-class';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class NewGroupUser extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    valid: boolean = false;
    newUserAutocomplete: AutocompleteModel = new AutocompleteModel('username', 'id');
    newUser: CreateGroupUserModel = new CreateGroupUserModel();
    search: string = '';
    writingTimeout;
    loading: boolean = false;
    @Getter('UserStore/user') User: UserAccountModel;
    @Action('SnackStore/addSnack') AddSnack: Function;

    @Emit('close')
    onCloseClicked() {}

    @Emit('submit')
    onUserSubmitted(user: GroupUserViewModel): GroupUserViewModel {
      return user;
    }

    mounted() {
      this.setRequestMessage();
    }

    setRequestMessage() {
      this.newUser.RequestMessage = `Hello! Please join our group '${this.group.Name}'.\r\n\r\nRegards, ${this.User.Username}`;
    }

    get NewUserRules(): Array<any>{
      return [
        v => !!v || 'User is required.'
      ]
    }

    async onFormSubmitted() {
      this.newUser.GroupId = this.group.Id;
      this.loading = true;
      await this.$axios.post(`groups/${this.newUser.GroupId}/users`, this.newUser)
        .then(response => {
          const user = new GroupUserViewModel();
          user.Id  = response.data.userId;
          user.Name = this.search;
          user.IsManager = response.data.isManager;
          user.IsOwner = response.data.isOwner;
          user.IsAcceptedByManager = response.data.isAcceptedByManager;
          user.IsAcceptedByUser = response.data.isAcceptedByUser;
          this.search = '';
          this.newUser = new CreateGroupUserModel();
          this.setRequestMessage();
          this.onUserSubmitted(user);
        })
        .catch(error => {
          if (error.response.status === 400)
            this.AddSnack(new SnackMessage(error.response.data, 'error'));
          else
            console.dir(error);
        })
        .finally(() => this.loading = false);
    }

    @Watch('search')
    async onNewUserChanged() {
      if (!this.search || this.search.length <= 0) return;
      if (this.writingTimeout)
        clearTimeout(this.writingTimeout);
      if (this.newUserAutocomplete.Loading) return;
      this.writingTimeout = setTimeout(async () => {
        this.newUserAutocomplete.Loading = true;
        await this.$axios.get(`users?username=${this.search}`)
          .then(response => {
            this.newUserAutocomplete.SetItems(response.data.users);
          })
          .catch(error => console.dir(error))
          .finally(() => this.newUserAutocomplete.Loading = false);
      }, 750);
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/new-group.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onFormSubmitted">
      <v-card-title class="headline grey lighten-2">New group</v-card-title>
      <v-card-text>
        <v-alert v-for="(error, index) of errors" :key="index" :type="error.AlertType" v-model="error.Show" transition="scale-transition">
          {{ error.Message }}
        </v-alert>
        <v-text-field hint="Min. 3 chars" counter :rules="NameRules" v-model="newGroup.Name"
                      label="Name"></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Cancel</v-btn>
        <v-spacer></v-spacer>
        <v-btn :disabled="!valid" color="success" type="submit">Submit</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Vue } from 'vue-property-decorator';
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import { Action, Getter } from 'vuex-class';
  import CreateGroupModel from '../../models/setter/group/CreateGroupModel';
  import SnackMessage from "../../models/app/SnackMessage";
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";

  @Component({})

  export default class NewGroup extends Vue {
    valid: boolean = false;
    newGroup: CreateGroupModel = new CreateGroupModel();
    loading: boolean = false;
    errors: Array<AlertDisplay> = [];
    @Getter('UserStore/user') User: UserAccountModel;
    @Action('SnackStore/addSnack') AddSnack: Function;

    mounted() {
      this.newGroup.GroupCreatorId = this.User.Id;
    }

    @Emit('close')
    onCloseClicked() {
      this.newGroup.Name = '';
    }

    @Emit('create')
    onGroupCreated(id: number, name: string): GroupListItemModel {
      const group = new GroupListItemModel();
      group.IsAcceptedByManager = true;
      group.IsAcceptedByUser = true;
      group.Name = name;
      group.Id = id;
      group.IsManager = true;
      group.IsOwner = true;
      this.newGroup.Name = '';
      return group;
    }

    async onFormSubmitted() {
      this.loading = true;
      await this.$axios.post('groups', this.newGroup)
        .then(response => {
          this.AddSnack(new SnackMessage(`Added group '${ response.data.name }'`, 'success'));
          this.onGroupCreated(response.data.id, response.data.name);
        })
        .catch(error => {
          console.dir(error);
          if (error.response.status === 400)
            this.errors.push(new AlertDisplay(AlertType.Error, error.response.data, 2500));
        })
        .finally(() => this.loading = false);
    }

    get NameRules(): Array<any> {
      return [
        v => !!v || 'Name is required.',
        v => v.length >= 3 || 'Name needs at least 3 characters.'
      ]
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/new-owner.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Make {{ newOwner.Name }} owner of {{ group.Name }}</v-card-title>
    <v-card-text class="body-2">
      Are you sure you want to complete this action?<br/>
      Doing so will replace you as owner of this group!
    </v-card-text>
    <v-card-actions>
      <v-btn color="primary" @click="onCloseClicked">Cancel</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="error" :loading="loading" outline @click="onUpdateOwnerClicked">Update owner</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import UpdateGroupModel from "../../models/setter/group/UpdateGroupModel";

	@Component({})

	export default class NewOwner extends Vue {
	  @Prop(Object) readonly newOwner: GroupUserViewModel;
	  @Prop(Object) readonly group: GroupViewModel;
	  loading: boolean = false;

	  @Emit('close')
    onCloseClicked() {}

    @Emit('update')
    onGroupUpdated() {}

    async onUpdateOwnerClicked() {
	    this.loading = true;
      const updateGroup: UpdateGroupModel = new UpdateGroupModel();
      updateGroup.Id = this.group.Id;
      updateGroup.OwnerId = this.newOwner.Id;
      await this.$axios.put(`groups/${updateGroup.Id}`, updateGroup)
        .then(() => this.onGroupUpdated())
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }
	}
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/request-view.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Request to {{ group.Name }}</v-card-title>
    <v-card-text class="maintain-white-space">{{ group.RequestMessage }}</v-card-text>
    <v-card-actions>
      <v-btn color="error" :loading="deletionLoading" @click="onDeleteRequestClicked">Delete request</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="primary" @click="onCloseClicked">Close</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import { Action, Getter } from 'vuex-class';

	@Component({})

	export default class RequestView extends Vue {
	  deletionLoading: boolean = false;
	  @Prop(Object) readonly group: GroupListItemModel;
	  @Getter('UserStore/user') User: UserAccountModel;
	  @Action('SnackStore/addSnack') AddSnack: Function;

    @Emit('close')
    onCloseClicked() {}

    @Emit('delete')
    onRequestDeleted(): number {
      return this.group.Id;
    }

    async onDeleteRequestClicked() {
      this.deletionLoading = true;
      await this.$axios.delete(`groups/${this.group.Id}/users/${this.User.Id}`)
        .then(() => this.onRequestDeleted())
        .catch(error => console.dir(error))
        .finally(() => this.deletionLoading = false);
    }
	}
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/group/user-confirmation.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Request from {{ user.Name }}</v-card-title>
    <v-card-text class="maintain-white-space">{{ user.RequestMessage }}</v-card-text>
    <v-card-actions>
      <v-btn color="error" :loading="denyLoading" @click="onDenyClicked">Deny</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="secondary" @click="onCloseClicked">Ignore</v-btn>
      <v-spacer></v-spacer>
      <v-btn color="success" :loading="acceptLoading" @click="onAcceptClicked">Accept</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import UpdateGroupUserModel from "../../models/setter/group/UpdateGroupUserModel";

  @Component({})

  export default class UserConfirmation extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    @Prop(Object) readonly user: GroupUserViewModel;
    denyLoading: boolean = false;
    acceptLoading: boolean = false;

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('deny')
    onInvitationDenied() {
    }

    @Emit('accept')
    onInvitationAccepted() {
    }

    async onDenyClicked() {
      this.denyLoading = true;
      await this.$axios.delete(`groups/${ this.group.Id }/users/${ this.user.Id }`)
        .then(() => this.onInvitationDenied())
        .catch(error => console.dir(error))
        .finally(() => this.denyLoading = false);
    }

    async onAcceptClicked() {
      this.acceptLoading = true;
      const updateGroupUser = new UpdateGroupUserModel();
      updateGroupUser.UserId = this.user.Id;
      updateGroupUser.GroupId = this.group.Id;
      updateGroupUser.ManagerAccepted = true;
      await this.$axios.put(`groups/${ updateGroupUser.GroupId }/users/${ updateGroupUser.UserId }`, updateGroupUser)
        .then(() => this.onInvitationAccepted())
        .catch(error => console.dir(error))
        .finally(() => this.acceptLoading = false);
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/item/add-items-view.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onAddItemClicked">
      <v-card-title class="headline grey lighten-2">
        <template v-if="groups">
          Add items
        </template>
        <template v-else>
          Add items for {{ group.Name }}
        </template>
      </v-card-title>
      <v-card-text>
        <v-alert v-for="(error, index) of errors" :key="index" :type="error.AlertType" v-model="error.Show"
                 transition="scale-transition">
          {{ error.Message }}
        </v-alert>
        <v-select :rules="GroupsRules" v-if="groups" label="Group" :items="groups" v-model="group.Id" item-value="Id"
                  item-text="Name"></v-select>
        <v-combobox :loading="itemLoading"
                    :search-input.sync="itemSearch"
                    :items="findItemAutocomplete.Items"
                    :item-value="findItemAutocomplete.ValueProperty"
                    :item-text="findItemAutocomplete.TextProperty"
                    label="Item"></v-combobox>
        <v-select v-model="itemStatusId" :items="itemStatuses" item-text="Status" item-value="Id"
                  label="Item status"></v-select>
        <v-textarea v-model="notes" counter="255" :rules="NotesRules" label="Notes" rows="3"></v-textarea>
        <v-checkbox v-model="oneTimePurchase" label="One time purchase only" color="primary"></v-checkbox>
        <v-btn color="success" type="submit" block :disabled="!this.itemSearch || this.itemSearch.length < 2 || !valid"
               :loading="loading">
          Add Item
        </v-btn>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Close</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue, Watch } from 'vue-property-decorator';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import AutocompleteModel from "../../models/app/AutocompleteModel";
  import CreateGroupItemModel from "../../models/setter/item/CreateGroupItemModel";
  import ItemStatusModel, { ItemStatus } from "../../models/enums/ItemStatus";
  import CreateItemModel from "../../models/setter/item/CreateItemModel";
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";
  import GroupItemViewModel from "../../models/getter/group/GroupItemViewModel";
  import { Action } from 'vuex-class';
  import SnackMessage from '../../models/app/SnackMessage';
  import DashboardGroupModel from "../../models/getter/dashboard/DashboardGroupModel";

  @Component({})

  export default class AddItemsView extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    @Prop(Array) readonly groups: Array<DashboardGroupModel>;
    @Prop(Boolean) readonly provideGroup: boolean;
    @Action('SnackStore/addSnack') AddSnack: Function;
    valid: boolean = false;
    notes: string = '';
    oneTimePurchase: boolean = false;
    findItemAutocomplete: AutocompleteModel = new AutocompleteModel('name', 'id');
    itemStatusId: ItemStatus = ItemStatus.Stocked;
    itemLoading: boolean = false;
    itemSearch: string = '';
    writingTimeout;
    itemStatuses: Array<ItemStatusModel> = ItemStatusModel.GetItemStatuses();
    loading: boolean = false;
    errors: Array<AlertDisplay> = [];

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('add')
    onItemAdded(item: GroupItemViewModel): GroupItemViewModel {
      this.AddSnack(new SnackMessage(`${ item.Name } has been added`, 'success'));
      return item;
    }

    resetState() {
      this.itemSearch = '';
      this.itemStatusId = ItemStatus.Stocked;
      this.notes = '';
      this.oneTimePurchase = false;
    }

    @Watch('itemSearch')
    async onItemSearchChanged() {
      if (!this.itemSearch || this.itemSearch.length <= 0) return;
      if (this.writingTimeout)
        clearTimeout(this.writingTimeout);
      if (this.findItemAutocomplete.Loading) return;
      this.writingTimeout = setTimeout(async () => {
        this.findItemAutocomplete.Loading = true;
        await this.$axios.get(`items?name=${ this.itemSearch }`)
          .then(response => {
            this.findItemAutocomplete.SetItems(response.data.items);
          })
          .catch(error => console.dir(error))
          .finally(() => this.findItemAutocomplete.Loading = false);
      }, 750)
    }

    async onAddItemClicked() {
      this.loading = true;
      const newGroupItem: CreateGroupItemModel = new CreateGroupItemModel();
      newGroupItem.GroupId = this.group.Id;
      newGroupItem.ItemStatusId = this.itemStatusId;
      newGroupItem.Notes = this.notes;
      newGroupItem.OneTimePurchase = this.oneTimePurchase;
      if (!this.SelectedItem) {
        const newItem: CreateItemModel = new CreateItemModel();
        newItem.Name = this.itemSearch;
        await this.$axios.post('items', newItem)
          .then(response => {
            newGroupItem.ItemId = response.data.id;
          })
          .catch(error => console.dir(error));
      } else {
        newGroupItem.ItemId = this.SelectedItem.id;
      }
      await this.$axios.post(`groups/${ this.group.Id }/items`, newGroupItem)
        .then(response => {
          const newItem = new GroupItemViewModel(response.data);
          newItem.Name = this.itemSearch;
          if (!this.group.Name)
            this.group.Name = this.groups.find(g => g.Id === this.group.Id).Name;
          newItem.Group = this.group;
          this.onItemAdded(newItem);
          this.resetState();
        })
        .catch(error => {
          if (error.response.status === 409) {
            this.errors.push(new AlertDisplay(AlertType.Error, `${ this.itemSearch } is already being tracked.`, 2500));
          }
          console.dir(error)
        })
        .finally(() => this.loading = false);
    }

    get SelectedItem(): any {
      return this.findItemAutocomplete.Items.find(i => (i as any).name === this.itemSearch) as CreateItemModel;
    }

    get NotesRules(): Array<any> {
      return [
        v => v.length <= 255 || 'Maximum 255 characters.'
      ]
    }

    get GroupsRules(): Array<any> {
      return [
        v => (this.groups && !!v) || 'Group is required.'
      ]
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/item/manage-item-view.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onUpdateItemClicked">
      <v-card-title class="headline grey lighten-2">Modify {{ item.Name }}</v-card-title>
      <v-card-text>
        <v-select :items="itemStatuses" item-text="Status" item-value="Id" label="Item Status" v-model="item.ItemStatusId"></v-select>
        <v-textarea v-model="item.Notes" counter="255" :rules="NotesRules" label="Notes" rows="3"></v-textarea>
        <v-checkbox v-model="item.OneTimePurchase" label="One time purchase only" color="primary" hint="Sets do not buy flag on purchasing item" persistent-hint></v-checkbox>
        <v-checkbox v-model="item.DoNotBuy" label="Do not buy" color="primary" hint="Hides items from dashboard" persistent-hint></v-checkbox>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Close</v-btn>
        <v-spacer></v-spacer>
        <v-btn color="success" :disabled="!valid" type="submit" :loading="loading">Update</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupItemViewModel from "../../models/getter/group/GroupItemViewModel";
  import ItemStatusModel from "../../models/enums/ItemStatus";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import CreateGroupItemModel from "../../models/setter/item/CreateGroupItemModel";
  import { Action } from 'vuex-class';
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class ManageItemView extends Vue {
    @Prop(Object) readonly item: GroupItemViewModel;
    @Prop(Object) readonly group: GroupViewModel;
    valid: boolean = false;
    itemStatuses: Array<ItemStatusModel> = ItemStatusModel.GetItemStatuses();
    loading: boolean = false;
    @Action('SnackStore/addSnack') AddSnack: Function;

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('update')
    onItemUpdated() {}

    async onUpdateItemClicked() {
      this.loading = true;
      await this.$axios.put(`groups/${this.group.Id}/items/${this.item.Id}`, CreateGroupItemModel.Create(this.item, this.group.Id))
        .then(() => {
          this.AddSnack(new SnackMessage(`Updated ${this.item.Name}`, 'success'));
          this.onItemUpdated()
        })
        .catch(error => console.dir(error))
        .finally(() => this.loading = false);
    }

    get NotesRules(): Array<any> {
      return [
        v => v.length <= 255 || 'Maximum 255 characters.'
      ]
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/item/manage-items-view.vue
================================================================================

<template>
  <v-card>
    <v-dialog v-model="showManageItemDialog" max-width="600px">
      <ManageItemView :item="selectedItem" :group="group" @close="showManageItemDialog = false" @update="showManageItemDialog = false"></ManageItemView>
    </v-dialog>
    <v-card-title class="headline grey lighten-2">Manage items for {{ group.Name }}</v-card-title>
    <v-card-text>
      <v-list subheader v-if="group.Items.length > 0">
        <template v-if="ItemsThatAreOut.length > 0">
          <v-subheader inset>Out</v-subheader>
          <v-list-tile v-for="item of ItemsThatAreOut" :key="item.Id">
            <v-list-tile-avatar color="primary" @click="onModifyItemClicked(item)">
              <v-btn icon>
                <v-icon color="white">edit</v-icon>
              </v-btn>
            </v-list-tile-avatar>
            <v-list-tile-content>
              <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
              <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
            </v-list-tile-content>
            <v-list-tile-action v-if="item.Notes || item.DoNotBuy || item.OneTimePurchase">
              <v-layout row justify-end align-center>
                <v-tooltip bottom v-if="item.DoNotBuy">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="error" v-on="on">pause</v-icon>
                  </template>
                  <span>Do not buy</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.OneTimePurchase">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                  </template>
                  <span>One time purchase</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.Notes">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                  </template>
                  <span>{{ item.Notes }}</span>
                </v-tooltip>
              </v-layout>
            </v-list-tile-action>
          </v-list-tile>
          <v-divider></v-divider>
        </template>
        <template v-if="ItemsThatAreAlmostOut.length > 0">
          <v-subheader inset>Almost out</v-subheader>
          <v-list-tile v-for="item of ItemsThatAreAlmostOut" :key="item.Id">
            <v-list-tile-avatar color="primary" @click="onModifyItemClicked(item)">
              <v-btn icon>
                <v-icon color="white">edit</v-icon>
              </v-btn>
            </v-list-tile-avatar>
            <v-list-tile-content>
              <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
              <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
            </v-list-tile-content>
            <v-list-tile-action v-if="item.Notes || item.DoNotBuy || item.OneTimePurchase">
              <v-layout row justify-end align-center>
                <v-tooltip bottom v-if="item.DoNotBuy">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="error" v-on="on">pause</v-icon>
                  </template>
                  <span>Do not buy</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.OneTimePurchase">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                  </template>
                  <span>One time purchase</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.Notes">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                  </template>
                  <span>{{ item.Notes }}</span>
                </v-tooltip>
              </v-layout>
            </v-list-tile-action>
          </v-list-tile>
          <v-divider></v-divider>
        </template>
        <template v-if="ItemsThatAreOkay.length > 0">
          <v-subheader inset>Stocked</v-subheader>
          <v-list-tile v-for="item of ItemsThatAreOkay" :key="item.Id">
            <v-list-tile-avatar color="primary" @click="onModifyItemClicked(item)">
              <v-btn icon>
                <v-icon color="white">edit</v-icon>
              </v-btn>
            </v-list-tile-avatar>
            <v-list-tile-content>
              <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
              <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
            </v-list-tile-content>
            <v-list-tile-action v-if="item.Notes || item.DoNotBuy || item.OneTimePurchase">
              <v-layout row justify-end align-center>
                <v-tooltip bottom v-if="item.DoNotBuy">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="error" v-on="on">pause</v-icon>
                  </template>
                  <span>Do not buy</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.OneTimePurchase">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                  </template>
                  <span>One time purchase</span>
                </v-tooltip>
                <v-tooltip bottom v-if="item.Notes">
                  <template v-slot:activator="{on}">
                    <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                  </template>
                  <span>{{ item.Notes }}</span>
                </v-tooltip>
              </v-layout>
            </v-list-tile-action>
          </v-list-tile>
          <v-divider></v-divider>
        </template>
      </v-list>
      <h6 v-else class="title">No items exist in this group.</h6>
    </v-card-text>
    <v-card-actions>
      <v-btn color="error" @click="onCloseClicked">Close</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import GroupItemViewModel from "../../models/getter/group/GroupItemViewModel";
  import { ItemStatus } from '../../models/enums/ItemStatus';
  import DayJs from 'dayjs';
  import ManageItemView from './manage-item-view.vue';
  import DayJsService from "../../services/DayJsService";

  @Component({
    components: {ManageItemView}
  })

  export default class ManageItemsView extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    selectedItem: GroupItemViewModel = new GroupItemViewModel();
    showManageItemDialog: boolean = false;

    @Emit('close')
    onCloseClicked() {
    }

    get ItemsThatAreOut(): Array<GroupItemViewModel> {
      return this.group.Items.filter(i => i.ItemStatusId === ItemStatus.Out);
    }

    get ItemsThatAreAlmostOut(): Array<GroupItemViewModel> {
      return this.group.Items.filter(i => i.ItemStatusId === ItemStatus.AlmostOut);
    }

    get ItemsThatAreOkay(): Array<GroupItemViewModel> {
      return this.group.Items.filter(i => i.ItemStatusId === ItemStatus.Stocked);
    }

    getLastUpdate(item: GroupItemViewModel) {
      return DayJsService.ConvertToLocalTime(item.LastUpdate).format('MMM D, YYYY');
    }

    onModifyItemClicked(item: GroupItemViewModel) {
      this.selectedItem = item;
      this.showManageItemDialog = true;
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/item/remove-items-view.vue
================================================================================

<template>
  <v-card>
    <v-card-title class="headline grey lighten-2">Remove items from {{ group.Name }}</v-card-title>
    <v-card-text>
      <v-list v-if="group.Items.length > 0">
        <template v-for="(item, index) of group.Items">
          <v-divider v-if="index === 0"></v-divider>
          <v-list-tile :key="index">
            <v-list-tile-content>
              <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
            </v-list-tile-content>
            <v-list-tile-action>
              <v-btn color="error" flat :loading="item.DeletionLoading" @click="onDeleteItemClicked(item.Id)">Delete</v-btn>
            </v-list-tile-action>
          </v-list-tile>
          <v-divider></v-divider>
        </template>
      </v-list>
      <h6 v-else class="title">No items exist in this group.</h6>
    </v-card-text>
    <v-card-actions>
      <v-btn color="error" @click="onCloseClicked">Close</v-btn>
    </v-card-actions>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import { Action } from 'vuex-class';
  import SnackMessage from "../../models/app/SnackMessage";

  @Component({})

  export default class RemoveItemsView extends Vue {
    @Prop(Object) readonly group: GroupViewModel;
    @Action('SnackStore/addSnack') AddSnack: Function;

    @Emit('close')
    onCloseClicked() {
    }

    async onDeleteItemClicked(id: number) {
      const item = this.group.Items.find(i => i.Id === id);
      item.DeletionLoading = true;
      await this.$axios.delete(`groups/${this.group.Id}/items/${item.Id}`)
        .then(() => {
          this.AddSnack(new SnackMessage(`Removed ${item.Name} from group`, 'info'));
          this.group.Items.splice(this.group.Items.indexOf(item), 1);
        })
        .catch(error => console.dir(error));
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/components/README.md
================================================================================

# COMPONENTS

**This directory is not required, you can delete it if you don't want to use it.**

The components directory contains your Vue.js Components.

_Nuxt.js doesn't supercharge these components._



================================================================================

File: Frontend/components/user/delete-user.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onFormSubmitted">
      <v-card-title class="headline grey lighten-2">Delete your account</v-card-title>
      <v-card-text>
        <v-alert v-for="(error, index) of errors" :key="index" :type="error.AlertType" v-model="error.Show" transition="scale-transition">
          {{ error.Message }}
        </v-alert>
        <p class="body-2 mb-2">
          Are you absolutely sure that you wish to delete your account?<br/>
          This act is irreversible!
        </p>
        <p class="mb-2" v-if="ownedGroups.length > 0">
          Please decide what to do with the groups you own.
        </p>
        <v-list two-line dense>
          <v-list-tile class="owned-group" v-for="(group, index) of groups" :key="group.Id" v-if="group">
            <v-list-tile-content>
              <v-list-tile-title>{{ group.Name }}</v-list-tile-title>
            </v-list-tile-content>
            <v-list-tile-action class="owned-group-action">
              <v-list-tile-action-text>
                <v-select v-if="getOtherUsers(group).length > 0" dense :items="getOtherUsers(group)" item-value="Id"
                          item-text="Name" label="New owner" :rules="OwnerRules" v-model="groupActions[index]"></v-select>
                <template v-else>
                  Group will be deleted
                </template>
              </v-list-tile-action-text>
            </v-list-tile-action>
          </v-list-tile>
        </v-list>
        <v-text-field :rules="PasswordRules" v-model="userDelete.Password" label="Password"
                      type="password"></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-btn color="primary" @click="onCloseClicked">Cancel</v-btn>
        <v-spacer></v-spacer>
        <v-btn color="error" outline type="submit" :disabled="!valid">Submit</v-btn>
      </v-card-actions>
      <v-slide-y-transition>
        <v-card-actions v-show="loading">
          <v-flex>
            <p class="subheading text-xs-center">{{ loadingAction }}</p>
            <v-progress-linear v-model="LoadingStatus"
                               :active="loading"></v-progress-linear>
          </v-flex>
        </v-card-actions>
      </v-slide-y-transition>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Prop, Vue } from 'vue-property-decorator';
  import UserDeleteModel from "../../models/setter/user/UserDeleteModel";
  import { Getter } from 'vuex-class';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";
  import GroupViewModel from '../../models/getter/group/GroupViewModel';
  import GroupUserViewModel from "../../models/getter/group/GroupUserViewModel";
  import UpdateGroupModel from "../../models/setter/group/UpdateGroupModel";
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";

  @Component({
    async mounted() {
      this.userDelete.Id = this.User.Id;
      await this.getGroupDetails();
    }
  })

  export default class DeleteUser extends Vue {
    @Prop(Array) readonly ownedGroups: Array<GroupListItemModel>;
    groups: Array<GroupViewModel> = [];
    groupActions: Array<number> = [];
    valid: boolean = false;
    userDelete: UserDeleteModel = new UserDeleteModel();
    loading: boolean = false;
    loadingProgress: number = 0;
    loadingAction: string = '';
    @Getter('UserStore/user') User: UserAccountModel;
    errors: Array<AlertDisplay> = [];

    @Emit('close')
    onCloseClicked() {
    }

    @Emit('submit')
    onDeleteSubmitted() {
    }

    async getGroupDetails() {
      for (let group of this.ownedGroups)
        await this.$axios.get(`groups/${ group.Id }`)
          .then(response => {
            this.groups.push(new GroupViewModel(response.data));
            this.groupActions.push(null);
          })
          .catch(error => console.dir(error));
    }

    async onFormSubmitted() {
      this.loading = true;
      for (let i = 0; i < this.groupActions.length; i++) {
        const groupAction = this.groupActions[i];
        const group = this.groups[i];
        if (groupAction) {
          const groupUpdate = new UpdateGroupModel();
          groupUpdate.Id = group.Id;
          groupUpdate.OwnerId = groupAction;
          this.loadingAction = `Updating owner for ${group.Name}.`;
          await this.$axios.put(`groups/${group.Id}`, groupUpdate)
            .then(() => {
              this.loadingProgress++;
              this.groups.splice(this.groups.indexOf(group), 1);
            })
            .catch(error => console.dir(error));
        } else {
          this.loadingAction = `Deleting group ${group.Name}.`;
          await this.$axios.delete(`groups/${group.Id}`)
            .then(() => {
              this.loadingProgress++;
              this.groups.splice(this.groups.indexOf(group), 1);
            })
            .catch(error => console.dir(error));
        }
      }
      this.loadingAction = 'Deleting your account.';
      await this.$axios.delete(`users/${ this.User.Id }`, {data: this.userDelete})
        .then(() => {
          this.loadingProgress++;
          this.onDeleteSubmitted()
        })
        .catch(error => {
          if (error.response.status === 403)
            this.errors.push(new AlertDisplay(AlertType.Error, 'You password was invalid.'));
          else
            console.dir(error)
        })
        .finally(() => this.loading = false);
    }

    get PasswordRules(): Array<any> {
      return [
        v => !!v || 'Password is required.'
      ]
    }

    get OwnerRules(): Array<any> {
      return [
        v => !!v || 'New owner is required.',
        v => v >= 0 || 'Invalid owner selected'
      ]
    }

    get LoadingStatus(): number {
      return this.loadingProgress / (this.groups.length + 1) * 100;
    }

    getOtherUsers(group: GroupViewModel): Array<GroupUserViewModel> {
      return group.Users.filter(u => u.Id !== this.User.Id && u.IsAcceptedByManager && u.IsAcceptedByUser);
    }
  }
</script>

<style scoped lang="scss">
  .owned-group {
    background: #f1f1f1;
  }

  .owned-group-action {
    max-width: 25vw;
  }
</style>



================================================================================

File: Frontend/components/user/user-password.vue
================================================================================

<template>
  <v-card>
    <v-form v-model="valid" @submit.prevent="onFormSubmitted">
      <v-card-title class="headline grey lighten-2">Update password</v-card-title>
      <v-card-text>
        <v-alert v-for="(error, index) of errors" :key="index" :type="error.AlertType" v-model="error.Show" transition="scale-transition">
          {{ error.Message }}
        </v-alert>
        <v-text-field :rules="OldPasswordRules" v-model="updatePassword.OldPassword" label="Old password" type="password"></v-text-field>
        <v-text-field hint="Min. 7 chars" counter :rules="NewPasswordRules" v-model="updatePassword.NewPassword" label="New password" type="password"></v-text-field>
        <v-text-field counter :rules="RepeatPasswordRules" v-model="updatePassword.RepeatPassword" label="Repeat new password" type="password"></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-btn color="error" @click="onCloseClicked">Cancel</v-btn>
        <v-spacer></v-spacer>
        <v-btn color="success" type="submit" :disabled="!valid" :loading="loading">Submit</v-btn>
      </v-card-actions>
    </v-form>
  </v-card>
</template>

<script lang="ts">
  import { Component, Emit, Vue } from 'vue-property-decorator';
  import UserPasswordModel from "../../models/setter/user/UserPasswordModel";
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import { Getter } from 'vuex-class';
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";

  @Component({
    mounted() {
      this.updatePassword.Id = this.User.Id;
    }
  })

	export default class UserPassword extends Vue {
	  valid: boolean = false;
	  loading: boolean = false;
	  updatePassword: UserPasswordModel = new UserPasswordModel();
	  errors: Array<AlertDisplay> = [];

	  @Getter('UserStore/user') User: UserAccountModel;

	  @Emit('close')
    onCloseClicked() {
	    this.updatePassword.Reset();
    }

    @Emit('submit')
    onPasswordSubmitted() {}

	  get OldPasswordRules(): Array<any> {
	    return [
	      v => !!v || 'Old password is required.'
      ]
    }

    get NewPasswordRules(): Array<any> {
	    return [
        v => !!v || 'New password is required.',
        v => v.length >= 7 || 'Password needs at least 7 characters.'
      ]
    }

    get RepeatPasswordRules(): Array<any> {
	    return [
	      v => !!v || 'Repeat password is required.',
	      v => v === this.updatePassword.NewPassword || 'Passwords do not match.'
      ]
    }

    async onFormSubmitted() {
	    this.loading = true;
	    await this.$axios.put(`users/${this.updatePassword.Id}/password`, this.updatePassword)
        .then(() => {
          this.updatePassword.Reset();
          this.onPasswordSubmitted()
        })
        .catch(error => {
          console.dir(error);
          if (error.response.status === 403)
            this.errors.push(new AlertDisplay(AlertType.Error, 'Invalid old password.', 2500));
        })
        .finally(() => this.loading = false);
    }
	}
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/Dockerfile
================================================================================

FROM node:alpine
WORKDIR /usr/local/app
ENV TIMEZONE=America/Detroit
RUN apk add tzdata && \
    cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && \
    echo "${TIMEZONE}" > /etc/timezone && \
    apk del tzdata
ARG API_BROWSER_URL
ENV API_BROWSER_URL=${API_BROWSER_URL}
COPY ./package.json ./
RUN npm install --production
RUN npm audit fix
COPY . .
RUN npm run build
ENV HOST=0.0.0.0
ENTRYPOINT ["npm", "start"]


================================================================================

File: Frontend/jest.config.js
================================================================================

module.exports = {
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
    '^~/(.*)$': '<rootDir>/$1',
    '^vue$': 'vue/dist/vue.common.js'
  },
  moduleFileExtensions: ['js', 'vue', 'json'],
  transform: {
    '^.+\\.js$': 'babel-jest',
    '.*\\.(vue)$': 'vue-jest',
  },
  "collectCoverage": true,
  "collectCoverageFrom": [
      "<rootDir>/components/**/*.vue",
      "<rootDir>/pages/**/*.vue"
  ]
}



================================================================================

File: Frontend/layouts/backend.vue
================================================================================

<template>
  <v-app>
    <v-toolbar app>
      <v-toolbar-items class="full-flex-row-around">
        <v-btn block color="primary" class="link" flat active-class="active-link" nuxt to="/groups">Groups</v-btn>
        <v-btn block color="primary" class="link" flat active-class="active-link" nuxt to="/dashboard">Dashboard
        </v-btn>
        <v-btn block color="primary" class="link" flat active-class="active-link" nuxt to="/menu">Menu</v-btn>
      </v-toolbar-items>
    </v-toolbar>
    <v-snackbar :color="Snack.color" bottom v-model="Snack.show" :timeout="0">{{ Snack.message }}</v-snackbar>
    <v-content>
      <nuxt/>
    </v-content>
  </v-app>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import { Getter } from 'vuex-class';
  import { ISnackState } from '../store/SnackStore';

  @Component({})

  export default class Backend extends Vue {
    @Getter('SnackStore/snack') Snack: ISnackState;
  }
</script>

<style scoped lang="scss">
  .full-flex-row-around {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-around;
  }

  .link {
    border-bottom: 2px solid #133133;
  }

  .active-link {
    border-bottom: 4px solid #133133;
  }

  @media only screen and (min-width: 960px) {
    .full-flex-row-around {
      justify-content: flex-end;
    }
  }
</style>



================================================================================

File: Frontend/layouts/default.vue
================================================================================

<template>
  <v-app>
    <v-content>
      <nuxt/>
    </v-content>
  </v-app>
</template>

<script lang="ts">
  import { Vue, Component } from 'vue-property-decorator';

  @Component({})

  export default class DefaultLayout extends Vue {

  }
</script>

<style scoped lang="scss"></style>



================================================================================

File: Frontend/layouts/README.md
================================================================================

# LAYOUTS

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains your Application Layouts.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/views#layouts).



================================================================================

File: Frontend/middleware/auth.ts
================================================================================

export default function({store, redirect}) {
  if (!store.getters['UserStore/jwtToken']) return redirect('/login?denied=true');
}



================================================================================

File: Frontend/middleware/README.md
================================================================================

# MIDDLEWARE

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains your application middleware.
Middleware let you define custom functions that can be run before rendering either a page or a group of pages.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/routing#middleware).



================================================================================

File: Frontend/models/app/AlertDisplay.ts
================================================================================

export enum AlertType {
  Info,
  Warning,
  Error,
  Success
}

export default class AlertDisplay {
  public Message: string;
  public Show: boolean = false;
  private readonly alertType: AlertType;
  private timeout;

  constructor(alertType: AlertType, message: string = '', timeout?: number, animateIn: boolean = true) {
    this.Message = message;
    this.alertType = alertType;
    if (animateIn) setTimeout(() => {
      this.Show = true;
    }, 50);
    else
      this.Show = true;
    if (!timeout) return;
    this.timeout = setTimeout(() => {
      this.Show = false;
    }, timeout);
  }

  get AlertType(): string {
    switch (this.alertType) {
      case AlertType.Info:
        return 'info';
      case AlertType.Warning:
        return 'warning';
      case AlertType.Error:
        return 'error';
      case AlertType.Success:
        return 'success';
      default:
        return 'info';
    }
  }
}



================================================================================

File: Frontend/models/app/AutocompleteModel.ts
================================================================================

export default class AutocompleteModel {
  public ValueProperty: string;
  public TextProperty: string;
  public Loading: boolean = false;
  public Items: Array<object> = [];

  constructor(textProperty: string, valueProperty: string) {
    this.ValueProperty = valueProperty;
    this.TextProperty = textProperty;
  }

  public SetItems(items: Array<object>) {
    this.Items = [];
    for (let item of items) {
      this.Items.push(item);
    }
  }
}



================================================================================

File: Frontend/models/app/SnackMessage.ts
================================================================================

export default class SnackMessage {
  public Message: string;
  public Color: string;
  public Timeout: number;

  constructor(message: string, color: string, timeout: number = 6000) {
    this.Message = message;
    this.Color = color;
    this.Timeout = timeout;
  }
}



================================================================================

File: Frontend/models/app/UserGroupRoleModel.ts
================================================================================

export default class UserGroupRoleModel {
  public Id: number;
  public Value: string;

  constructor(id: number, value: string) {
    this.Id = id;
    this.Value = value;
  }
}



================================================================================

File: Frontend/models/enums/ItemStatus.ts
================================================================================

export enum ItemStatus {
  Stocked = 1,
  AlmostOut = 2,
  Out = 3,
}

export default class ItemStatusModel {
  public Id: number;
  public Status: string;

  constructor(id: ItemStatus, status: string) {
    this.Id = id;
    this.Status = status;
  }

  public static GetItemStatuses(): Array<ItemStatusModel> {
    return [
      new ItemStatusModel(ItemStatus.Stocked, 'Stocked'),
      new ItemStatusModel(ItemStatus.AlmostOut, 'Almost out'),
      new ItemStatusModel(ItemStatus.Out, 'Out'),
    ]
  }
}



================================================================================

File: Frontend/models/getter/dashboard/DashboardGroupModel.ts
================================================================================

import GroupViewModel from '../group/GroupViewModel';

export default class DashboardGroupModel {
  public Id: number;
  public Name: string;

  constructor(data?) {
    if (!data) return;
    this.Id = data.id;
    this.Name = data.name;
  }

  public static Create(group: GroupViewModel): DashboardGroupModel {
    const dashboardGroup: DashboardGroupModel = new DashboardGroupModel();
    dashboardGroup.Id = group.Id;
    dashboardGroup.Name = group.Name;
    return dashboardGroup;
  }
}



================================================================================

File: Frontend/models/getter/dashboard/DashboardItemModel.ts
================================================================================

import { ItemStatus } from '../../enums/ItemStatus';
import DashboardGroupModel from './DashboardGroupModel';
import GroupItemViewModel from '../group/GroupItemViewModel';

export default class DashboardItemModel {
  public Id: number;
  public Name: string;
  public ItemStatusId: ItemStatus;
  public LastUpdate: string;
  public Notes: string;
  public OneTimePurchase: boolean;
  public PendingOutStatus: boolean = false;
  public PendingAlmostOutStatus: boolean = false;
  public PendingOkayStatus: boolean = false;
  public Group: DashboardGroupModel;

  constructor(data?) {
    if (!data) return;
    this.Id = data.id;
    this.Name = data.name;
    this.ItemStatusId = data.itemStatusId;
    this.LastUpdate = data.lastUpdate;
    this.Notes = data.notes;
    this.OneTimePurchase = data.oneTimePurchase;
    this.Group = new DashboardGroupModel(data.group);
  }

  public static Create(item: GroupItemViewModel): DashboardItemModel {
    const dashboardItem = new DashboardItemModel();
    dashboardItem.Id = item.Id;
    dashboardItem.Group = DashboardGroupModel.Create(item.Group);
    dashboardItem.Name = item.Name;
    dashboardItem.ItemStatusId = item.ItemStatusId;
    dashboardItem.LastUpdate = item.LastUpdate;
    dashboardItem.Notes = item.Notes;
    dashboardItem.OneTimePurchase = item.OneTimePurchase;
    return dashboardItem;
  }
}



================================================================================

File: Frontend/models/getter/dashboard/DashboardModel.ts
================================================================================

import DashboardItemModel from './DashboardItemModel';
import DashboardGroupModel from './DashboardGroupModel';

export default class DashboardModel {
  public Items: Array<DashboardItemModel>;
  public Groups: Array<DashboardGroupModel>;
  public AnyGroups: boolean;

  private setupGroups() {
    this.Groups = [];
    for (let item of this.Items) {
      if (this.Groups.find(g => g.Id === item.Group.Id))
        continue;
      this.Groups.push(item.Group);
    }
  }

  constructor(data?) {
    if (!data) return;
    this.AnyGroups = data.anyGroups;
    this.Items = data.items.map(i => new DashboardItemModel(i));
    this.setupGroups();
  }
}



================================================================================

File: Frontend/models/getter/group/GroupItemViewModel.ts
================================================================================

import { ItemStatus } from '../../enums/ItemStatus';
import GroupViewModel from './GroupViewModel';

export default class GroupItemViewModel {
  public Id: number;
  public Name: string;
  public ItemStatusId: ItemStatus;
  public LastUpdate: string;
  public Notes: string = '';
  public DoNotBuy: boolean;
  public OneTimePurchase: boolean;
  public DeletionLoading: boolean = false;
  public Group: GroupViewModel;

  constructor(data?: any, group?: GroupViewModel) {
    if (!data) return;
    this.Id = data.id || data.itemId;
    this.Name = data.name;
    this.ItemStatusId = data.itemStatusId;
    this.LastUpdate = data.lastUpdate;
    this.Notes = data.notes;
    this.DoNotBuy = data.doNotBuy;
    this.OneTimePurchase = data.oneTimePurchase;
    if (group)
      this.Group = group;
  }
}



================================================================================

File: Frontend/models/getter/group/GroupListItemModel.ts
================================================================================

export default class GroupListItemModel {
  public Id: number;
  public Name: string;
  public IsAcceptedByManager: boolean;
  public IsAcceptedByUser: boolean;
  public IsOwner: boolean;
  public IsManager: boolean;
  public RequestMessage: string;

  constructor(data?) {
    if (!data) return;
    this.Id = data.id;
    this.Name = data.name;
    this.IsAcceptedByManager = data.isAcceptedByManager;
    this.IsAcceptedByUser = data.isAcceptedByUser;
    this.IsOwner = data.isOwner;
    this.IsManager = data.isManager;
    this.RequestMessage = data.requestMessage;
  }
}



================================================================================

File: Frontend/models/getter/group/GroupUserViewModel.ts
================================================================================

export default class GroupUserViewModel {
  public Id: number;
  public Name: string;
  public IsManager: boolean;
  public IsOwner: boolean;
  public IsAcceptedByUser: boolean;
  public IsAcceptedByManager: boolean;
  public RequestMessage: string;

  constructor(data?) {
    if (!data) return;
    this.Id = data.id;
    this.Name = data.name;
    this.IsManager = data.isManager;
    this.IsOwner = data.isOwner;
    this.IsAcceptedByUser = data.isAcceptedByUser;
    this.IsAcceptedByManager = data.isAcceptedByManager;
    this.RequestMessage = data.requestMessage;
  }
}



================================================================================

File: Frontend/models/getter/group/GroupViewModel.ts
================================================================================

import GroupUserViewModel from './GroupUserViewModel';
import GroupItemViewModel from './GroupItemViewModel';

export default class GroupViewModel {
  public Id: number;
  public Name: string;
  public Users: Array<GroupUserViewModel> = [];
  public Items: Array<GroupItemViewModel> = [];

  constructor(data?) {
    if (!data) return;
    this.Id = data.id;
    this.Name = data.name;
    this.Users = data.users.map(u => new GroupUserViewModel(u));
    this.Items = data.items.map(i => new GroupItemViewModel(i));
  }
}



================================================================================

File: Frontend/models/getter/item/ListItemModel.ts
================================================================================

export default class ListItemModel {
  public Id: number;
  public Name: string;
}



================================================================================

File: Frontend/models/getter/user/TokenModel.ts
================================================================================

export default class TokenModel {
  public JwtToken: string;
  public JwtExpirationDate: string;
  public RefreshToken: string;
  public RefreshTokenExpirationDate: string;
}



================================================================================

File: Frontend/models/setter/group/CreateGroupModel.ts
================================================================================

export default class CreateGroupModel {
  public Name: string = '';
  public GroupCreatorId: number;
}



================================================================================

File: Frontend/models/setter/group/CreateGroupUserModel.ts
================================================================================

export default class CreateGroupUserModel {
  public UserId: number;
  public GroupId: number;
  public RequestMessage: string = '';
}



================================================================================

File: Frontend/models/setter/group/UpdateGroupModel.ts
================================================================================

export default class UpdateGroupModel {
  public Id: number;
  public OwnerId: number;
}



================================================================================

File: Frontend/models/setter/group/UpdateGroupUserModel.ts
================================================================================

export default class UpdateGroupUserModel {
  UserId: number;
  GroupId: number;
  IsManager?: boolean;
  UserAccepted?: boolean;
  ManagerAccepted?: boolean;
}



================================================================================

File: Frontend/models/setter/item/CreateGroupItemModel.ts
================================================================================

import { ItemStatus } from '../../enums/ItemStatus';
import GroupItemViewModel from '../../getter/group/GroupItemViewModel';

export default class CreateGroupItemModel {
  public GroupId: number;
  public ItemId: number;
  public ItemStatusId: ItemStatus;
  public Notes: string;
  public OneTimePurchase: boolean;
  public DoNotBuy: boolean;

  public static Create(groupItem: GroupItemViewModel, groupId: number): CreateGroupItemModel {
    const item = new CreateGroupItemModel();
    item.GroupId = groupId;
    item.ItemId = groupItem.Id;
    item.ItemStatusId = groupItem.ItemStatusId;
    item.Notes = groupItem.Notes;
    item.OneTimePurchase = groupItem.OneTimePurchase;
    item.DoNotBuy = groupItem.DoNotBuy;
    return item;
  }
}



================================================================================

File: Frontend/models/setter/item/CreateItemModel.ts
================================================================================

export default class CreateItemModel {
  public Name: string;
}



================================================================================

File: Frontend/models/setter/item/UpdateGroupItemModel.ts
================================================================================

import { ItemStatus } from '../../enums/ItemStatus';
import DashboardItemModel from '../../getter/dashboard/DashboardItemModel';

export default class UpdateGroupItemModel {
  public GroupId: number;
  public ItemId: number;
  public ItemStatusId: ItemStatus;
  public Notes: string;
  public OneTimePurchase: boolean;
  public DoNotBuy: boolean;

  public static Create(item: DashboardItemModel, newItemStatus: ItemStatus): UpdateGroupItemModel {
    const updateItem = new UpdateGroupItemModel();
    updateItem.GroupId = item.Group.Id;
    updateItem.ItemId = item.Id;
    updateItem.ItemStatusId = newItemStatus;
    updateItem.Notes = item.Notes;
    updateItem.OneTimePurchase = item.OneTimePurchase;
    updateItem.DoNotBuy = newItemStatus === ItemStatus.Stocked && item.OneTimePurchase;
    return updateItem;
  }

  public static Generate(item: DashboardItemModel): UpdateGroupItemModel {
    const updateItem = new UpdateGroupItemModel();
    updateItem.GroupId = item.Group.Id;
    updateItem.ItemId = item.Id;
    if (item.PendingOkayStatus) {
      updateItem.ItemStatusId = ItemStatus.Stocked;
    } else if (item.PendingAlmostOutStatus) {
      updateItem.ItemStatusId = ItemStatus.AlmostOut;
    } else if (item.PendingOutStatus) {
      updateItem.ItemStatusId = ItemStatus.Out;
    }
    updateItem.Notes = item.Notes;
    updateItem.OneTimePurchase = item.OneTimePurchase;
    updateItem.DoNotBuy = updateItem.ItemStatusId === ItemStatus.Stocked && item.OneTimePurchase;
    return updateItem;
  }
}



================================================================================

File: Frontend/models/setter/user/RefreshModel.ts
================================================================================

export default class RefreshModel {
  public JwtToken: string;
  public RefreshToken: string;
}



================================================================================

File: Frontend/models/setter/user/UserAccountModel.ts
================================================================================

export default class UserAccountModel {
  public Id: number;
  public Username: string;
}



================================================================================

File: Frontend/models/setter/user/UserDeleteModel.ts
================================================================================

export default class UserDeleteModel {
  Id: string;
  Password: string = '';
}



================================================================================

File: Frontend/models/setter/user/UserLoginModel.ts
================================================================================

export default class UserLoginModel {
  public Username: string;
  public Password: string;
}



================================================================================

File: Frontend/models/setter/user/UserPasswordModel.ts
================================================================================

export default class UserPasswordModel {
  public Id: number;
  public OldPassword: string = '';
  public NewPassword: string = '';
  public RepeatPassword: string = '';

  public Reset() {
    this.OldPassword = '';
    this.NewPassword = '';
    this.RepeatPassword = '';
  }
}



================================================================================

File: Frontend/models/setter/user/UserRegisterModel.ts
================================================================================

export default class UserRegisterModel {
  public Username: string = '';
  public Password: string = '';
  public RepeatPassword: string = '';
}



================================================================================

File: Frontend/nuxt.config.js
================================================================================

import VuetifyLoaderPlugin from 'vuetify-loader/lib/plugin'
import pkg from './package'

const host = process.env.HOST || 'localhost';
const port = process.env.PORT || '3000';

export default {
  mode: 'universal',

  env: {
    baseUrl: process.env.BASE_URL || `http://${ host }:${ port }`
  },

  /*
  ** Headers of the page
  */
  head: {
    title: 'Redundo',
    meta: [
      {charset: 'utf-8'},
      {name: 'viewport', content: 'width=device-width, initial-scale=1'},
      {hid: 'description', name: 'description', content: pkg.description}
    ],
    link: [
      {rel: 'icon', type: 'image/x-icon', href: '/favicon.ico'},
      {
        rel: 'stylesheet',
        href:
          'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons'
      }
    ]
  },

  /*
  ** Customize the progress-bar color
  */
  loading: {color: '#fff'},

  /*
  ** Global CSS
  */
  css: [
    '~/assets/style/app.styl',
    '~/assets/style/app.scss'
  ],

  /*
  ** Plugins to load before mounting the App
  */
  plugins: [
    '@/plugins/vuetify',
    {src: '@/plugins/token-setup', ssr: false},
    '@/plugins/dayjs-plugin'
  ],

  /*
  ** Nuxt.js modules
  */
  modules: [
    // Doc: https://axios.nuxtjs.org/usage
    '@nuxtjs/axios',
    '@nuxtjs/pwa',
  ],
  /*
  ** Axios module configuration
  */
  axios: {
    // See https://github.com/nuxt-community/axios-module#options
    withCredentials: true,

    baseURL: process.env.API_URL || 'http://localhost:5000/api/',
    browserBaseURL: process.env.API_BROWSER_URL || 'http://localhost:5000/api/',

    debug: false
  },

  workbox: {
    autoRegister: false
  },

  meta: {
    mobileAppIOS: true,
    name: 'Redundo',
    theme_color: '#abf2db'
  },

  manifest: {
    name: 'Redundo',
    background_color: '#abf2db',
    description: pkg.description,
    display: 'standalone',
    lang: 'en-US',
    theme_color: '#abf2db',
    start_url: '/dashboard',
  },

  /*
  ** Build configuration
  */
  build: {
    transpile: ['vuetify/lib'],
    plugins: [new VuetifyLoaderPlugin()],
    loaders: {
      stylus: {
        import: ['~assets/style/variables.styl']
      }
    },
    /*
    ** You can extend webpack config here
    */
    extend(config, ctx) {
      // Check for development environment
      if (host === 'localhost') {
        config.devtool = ctx.isClient ? 'eval-source-map' : 'inline-source-map'
      }
    }
  }
}



================================================================================

File: Frontend/package.json
================================================================================

{
  "name": "redundo",
  "version": "0.0.4",
  "description": "Purchase manager to help users remember buying specific items",
  "author": "Aaron Passchier",
  "private": true,
  "scripts": {
    "dev": "nuxt",
    "build": "nuxt build",
    "start": "nuxt start",
    "generate": "nuxt generate",
    "test": "jest"
  },
  "dependencies": {
    "@nuxtjs/axios": "^5.5.3",
    "@nuxtjs/pwa": "^2.6.0",
    "cross-env": "^5.2.0",
    "dayjs": "^1.8.14",
    "js-cookie": "^2.2.0",
    "node-sass": "^4.12.0",
    "nuxt": "^2.8.0",
    "sass-loader": "^7.1.0",
    "typescript": "^3.5.1",
    "vue-property-decorator": "^8.1.1",
    "vuetify": "^1.5.14",
    "vuetify-loader": "^1.2.2",
    "vuex-class": "^0.3.2"
  },
  "devDependencies": {
    "@nuxt/typescript": "^2.8.0",
    "@vue/test-utils": "^1.0.0-beta.27",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "^24.8.0",
    "jest": "^24.8.0",
    "stylus": "^0.54.5",
    "stylus-loader": "^3.0.2",
    "ts-node": "^8.2.0",
    "vue-jest": "^3.0.4"
  }
}



================================================================================

File: Frontend/pages/dashboard/index.vue
================================================================================

<template>
  <v-container>
    <v-dialog v-model="showAddItemsDialog" max-width="600px">
      <AddItemsView :group="addItemGroup" :groups="dashboard.Groups" @close="showAddItemsDialog = false"
                    @add="onItemAdded"></AddItemsView>
    </v-dialog>
    <template v-if="!dashboard || !dashboard.AnyGroups">
      <v-flex xs12 md8 offset-md2>
        <v-card>
          <v-card-text>
            <v-flex>
              <h4 class="headline">Get started</h4>
              <h6 class="subheading">Create a group or join an existing one.</h6>
              <v-layout justify-space-between>
                <v-btn nuxt to="/groups?create=1" class="mx-0" color="primary">Create Group</v-btn>
                <v-btn nuxt to="/groups?join=1" class="mx-0" color="primary">Join Group</v-btn>
              </v-layout>
            </v-flex>
          </v-card-text>
        </v-card>
      </v-flex>
    </template>
    <template v-else-if="dashboard.Items.length <= 0">
      <v-flex xs12 md6 offset-md3>
        <v-card>
          <v-card-text class="body-2">
            No items found.
          </v-card-text>
        </v-card>
      </v-flex>
    </template>
    <template v-else>
      <v-flex xs12 md6 offset-md3>
        <v-card>
          <v-fab-transition>
            <v-btn fixed fab top right color="success" v-show="ItemsToUpdate.length > 0"
                   @click="onItemsSubmitted" :loading="loading" style="top: 75px">
              <v-icon>done_outline</v-icon>
            </v-btn>
          </v-fab-transition>
          <template v-if="dashboard.Groups.length > 1">
            <v-select class="px-2 pt-3"
                      chips
                      small-chips
                      multiple
                      label="Filter by group"
                      clearable
                      :items="dashboard.Groups"
                      item-text="Name"
                      item-value="Id"
                      v-model="filterGroupIds"></v-select>
          </template>
          <template v-if="ItemsThatAreOut.length > 0">
            <v-list two-line subheader>
              <v-subheader inset class="error--text">Out</v-subheader>
              <v-list-tile avatar v-for="(item, index) of ItemsThatAreOut" :key="index" class="mb-2"
                           v-if="!item.DoNotBuy">
                <v-list-tile-action>
                  <v-layout justify-center align-center>
                    <v-btn icon v-if="item.PendingOkayStatus" class="mr-2" @click="resetItemStatus(item)"
                           color="success">
                      <v-icon size="12">brightness_1</v-icon>
                    </v-btn>
                    <v-btn v-else icon color="success" outline class="mr-2" @click="item.PendingOkayStatus = true">
                      <v-icon size="12" color="success">brightness_1</v-icon>
                    </v-btn>
                  </v-layout>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
                  <v-list-tile-sub-title class="text--primary">{{ item.Group.Name }}</v-list-tile-sub-title>
                  <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
                </v-list-tile-content>
                <v-list-tile-action v-if="item.Notes || item.OneTimePurchase">
                  <v-layout row justify-end align-center>
                    <v-tooltip bottom v-if="item.OneTimePurchase">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                      </template>
                      <span>One time purchase</span>
                    </v-tooltip>
                    <v-tooltip bottom v-if="item.Notes">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                      </template>
                      <span>{{ item.Notes }}</span>
                    </v-tooltip>
                  </v-layout>
                </v-list-tile-action>
              </v-list-tile>
            </v-list>
            <v-divider></v-divider>
          </template>
          <template v-if="ItemsThatAreAlmostOut.length > 0">
            <v-list two-line subheader>
              <v-subheader inset class="warning--text">Almost out</v-subheader>
              <v-list-tile avatar v-for="(item, index) of ItemsThatAreAlmostOut" :key="index" class="mb-2"
                           v-if="!item.DoNotBuy">
                <v-list-tile-action>
                  <v-layout column justify-space-around align-center fill-height>
                    <v-btn v-if="item.PendingOkayStatus" class="mr-2" icon color="success"
                           @click="resetItemStatus(item)">
                      <v-icon size="12">brightness_1</v-icon>
                    </v-btn>
                    <v-btn v-else-if="item.PendingOutStatus" class="mr-2" icon color="error"
                           @click="resetItemStatus(item)">
                      <v-icon size="12">brightness_1</v-icon>
                    </v-btn>
                    <template v-else>
                      <v-btn icon small color="error" outline class="mr-2" @click="item.PendingOutStatus = true">
                        <v-icon size="12" color="error">brightness_1</v-icon>
                      </v-btn>
                      <v-btn icon small color="success" outline class="mr-2" @click="item.PendingOkayStatus = true">
                        <v-icon size="12" color="success">brightness_1</v-icon>
                      </v-btn>
                    </template>
                  </v-layout>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
                  <v-list-tile-sub-title class="text--primary">{{ item.Group.Name }}</v-list-tile-sub-title>
                  <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
                </v-list-tile-content>
                <v-list-tile-action v-if="item.Notes || item.OneTimePurchase">
                  <v-layout row justify-end align-center>
                    <v-tooltip bottom v-if="item.OneTimePurchase">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                      </template>
                      <span>One time purchase</span>
                    </v-tooltip>
                    <v-tooltip bottom v-if="item.Notes">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                      </template>
                      <span>{{ item.Notes }}</span>
                    </v-tooltip>
                  </v-layout>
                </v-list-tile-action>
              </v-list-tile>
            </v-list>
            <v-divider></v-divider>
          </template>
          <template v-if="ItemsThatAreOkay.length > 0">
            <v-list two-line subheader>
              <v-subheader inset class="success--text text--darken-1">Stocked</v-subheader>
              <v-list-tile v-for="(item, index) of ItemsThatAreOkay" :key="index" class="mb-2" v-if="!item.DoNotBuy">
                <v-list-tile-action>
                  <v-layout column justify-space-around align-center fill-height>
                    <v-btn v-if="item.PendingOutStatus" icon class="mr-2" color="error" @click="resetItemStatus(item)">
                      <v-icon size="12">brightness_1</v-icon>
                    </v-btn>
                    <v-btn v-else-if="item.PendingAlmostOutStatus" icon class="mr-2" color="warning"
                           @click="resetItemStatus(item)">
                      <v-icon size="12">brightness_1</v-icon>
                    </v-btn>
                    <template v-else>
                      <v-btn icon small color="error" outline class="mr-2" @click="item.PendingOutStatus = true">
                        <v-icon size="12" color="error">brightness_1</v-icon>
                      </v-btn>
                      <v-btn icon small color="warning" outline class="mr-2"
                             @click="item.PendingAlmostOutStatus = true">
                        <v-icon size="12" color="warning">brightness_1</v-icon>
                      </v-btn>
                    </template>
                  </v-layout>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>{{ item.Name }}</v-list-tile-title>
                  <v-list-tile-sub-title class="text--primary">{{ item.Group.Name }}</v-list-tile-sub-title>
                  <v-list-tile-sub-title>Updated {{ getLastUpdate(item) }}</v-list-tile-sub-title>
                </v-list-tile-content>
                <v-list-tile-action v-if="item.Notes || item.OneTimePurchase">
                  <v-layout row justify-end align-center>
                    <v-tooltip bottom v-if="item.OneTimePurchase">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="warning" v-on="on">repeat_one</v-icon>
                      </template>
                      <span>One time purchase</span>
                    </v-tooltip>
                    <v-tooltip bottom v-if="item.Notes">
                      <template v-slot:activator="{on}">
                        <v-icon class="default-cursor" color="primary" v-on="on">info</v-icon>
                      </template>
                      <span>{{ item.Notes }}</span>
                    </v-tooltip>
                  </v-layout>
                </v-list-tile-action>
              </v-list-tile>
            </v-list>
          </template>
          <v-btn fixed fab bottom right color="success" @click="showAddItemsDialog = true">
            <v-icon>add</v-icon>
          </v-btn>
        </v-card>
      </v-flex>
    </template>
  </v-container>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import DashboardModel from "../../models/getter/dashboard/DashboardModel";
  import DashboardItemModel from "../../models/getter/dashboard/DashboardItemModel";
  import { ItemStatus } from '../../models/enums/ItemStatus';
  import DayJsService from "../../services/DayJsService";
  import UpdateGroupItemModel from "../../models/setter/item/UpdateGroupItemModel";
  import ArrayService from "../../services/ArrayService";
  import GroupViewModel from "../../models/getter/group/GroupViewModel";
  import AddItemsView from '../../components/item/add-items-view.vue';
  import GroupItemViewModel from "../../models/getter/group/GroupItemViewModel";

  @Component({
    components: {AddItemsView},
    layout: 'backend',
    middleware: 'auth',
    mounted() {
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js');
      }
    },
    async asyncData(context) {
      let dashboard: DashboardModel;
      await context.$axios.get('dashboard')
        .then(response => {
          dashboard = new DashboardModel(response.data);
        })
        .catch(error => console.dir(error));
      return {
        dashboard
      }
    }
  })

  export default class DashboardPage extends Vue {
    dashboard: DashboardModel;
    filterGroupIds: Array<number> = [];
    addItemGroup: GroupViewModel = new GroupViewModel();
    showAddItemsDialog: boolean = false;
    loading: boolean = false;

    get ItemsThatAreOut(): Array<DashboardItemModel> {
      return this.filterGroupIds.length > 0
        ? this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.Out && this.filterGroupIds.find(g => g === i.Group.Id))
        : this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.Out);
    }

    get ItemsThatAreAlmostOut(): Array<DashboardItemModel> {
      return this.filterGroupIds.length > 0
        ? this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.AlmostOut && this.filterGroupIds.find(g => g === i.Group.Id))
        : this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.AlmostOut);
    }

    get ItemsThatAreOkay(): Array<DashboardItemModel> {
      return this.filterGroupIds.length > 0
        ? this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.Stocked && this.filterGroupIds.find(g => g === i.Group.Id))
        : this.dashboard.Items.filter(i => i.ItemStatusId === ItemStatus.Stocked);
    }

    get ItemsToUpdate(): Array<DashboardItemModel> {
      return this.dashboard.Items.filter(i => i.PendingOkayStatus || i.PendingAlmostOutStatus || i.PendingOutStatus);
    }

    getLastUpdate(item: DashboardItemModel): string {
      return DayJsService.ConvertToLocalTime(item.LastUpdate).format('MMM D, YYYY');
    }

    onItemAdded(item: GroupItemViewModel) {
      if (!item.DoNotBuy)
        this.dashboard.Items.push(DashboardItemModel.Create(item));
    }

    resetItemStatus(item: DashboardItemModel) {
      item.PendingOutStatus = false;
      item.PendingAlmostOutStatus = false;
      item.PendingOkayStatus = false;
    }

    async onItemsSubmitted() {
      this.loading = true;
      for (let item of this.ItemsToUpdate) {
        const updateItem = UpdateGroupItemModel.Generate(item);
        await this.$axios.put(`groups/${ updateItem.GroupId }/items/${ updateItem.ItemId }`, updateItem)
          .then(response => {
            this.resetItemStatus(item);
            item.ItemStatusId = response.data.itemStatusId;
            item.LastUpdate = response.data.lastUpdate;
          })
          .catch(error => console.dir(error));
      }
      this.loading = false;
    }
  }
</script>

<style scoped lang="scss">
</style>



================================================================================

File: Frontend/pages/groups/index.vue
================================================================================

<template>
  <v-layout row>
    <v-dialog v-model="showNewGroupDialog" persistent max-width="600px">
      <NewGroup @close="showNewGroupDialog = false" @create="onNewGroupCreated"></NewGroup>
    </v-dialog>
    <v-dialog v-model="showFindGroupDialog" persistent max-width="600px">
      <FindGroup @close="showFindGroupDialog = false" @join="onNewGroupJoined"></FindGroup>
    </v-dialog>
    <v-dialog v-model="showInvitationDialog" max-width="600px">
      <InvitationView @close="showInvitationDialog = false" @delete="onInvitationDeleted" @accept="onInvitationAccepted"
                      :group="invitationGroup"></InvitationView>
    </v-dialog>
    <v-dialog v-model="showRequestDialog" max-width="600px">
      <RequestView @close="showRequestDialog = false" @delete="onRequestDeleted" :group="requestGroup"></RequestView>
    </v-dialog>
    <v-flex xs12 md6 offset-md3>
      <v-card>
        <v-layout row justify-space-between class="pa-2">
          <v-btn color="success" @click="showNewGroupDialog = true">New group</v-btn>
          <v-btn color="primary" @click="showFindGroupDialog = true">Find group</v-btn>
        </v-layout>
        <v-divider v-if="groups.length > 0"></v-divider>
        <v-list>
          <template v-for="(group, index) of groups">
            <v-list-tile nuxt :to="getGroupLink(group)" :key="index">
              <v-list-tile-content>
                <v-list-tile-title>{{ group.Name }}</v-list-tile-title>
                <v-list-tile-sub-title v-if="!group.IsAcceptedByManager">Activation pending</v-list-tile-sub-title>
                <v-list-tile-sub-title v-else-if="!group.IsAcceptedByUser">Invitation received</v-list-tile-sub-title>
                <v-list-tile-sub-title v-else-if="group.IsOwner">You own this group</v-list-tile-sub-title>
                <v-list-tile-sub-title v-else-if="group.IsManager">You manage this group</v-list-tile-sub-title>
              </v-list-tile-content>
              <v-list-tile-action v-if="!group.IsAcceptedByUser">
                <v-btn icon @click="onInvitationInfoClicked(group)">
                  <v-icon color="primary">info</v-icon>
                </v-btn>
              </v-list-tile-action>
              <v-list-tile-action v-else-if="!group.IsAcceptedByManager">
                <v-btn small flat color="primary" @click="onRequestInfoClicked(group)">
                  View request
                </v-btn>
              </v-list-tile-action>
            </v-list-tile>
            <v-divider></v-divider>
          </template>
        </v-list>
      </v-card>
    </v-flex>
  </v-layout>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import GroupListItemModel from "../../models/getter/group/GroupListItemModel";
  import UserAccountModel from "../../models/setter/user/UserAccountModel";
  import { Action, Getter } from 'vuex-class';
  import SnackMessage from "../../models/app/SnackMessage";
  import InvitationView from '../../components/group/invitation-view.vue';
  import NewGroup from '../../components/group/new-group.vue';
  import FindGroup from '../../components/group/find-group.vue';
  import RequestView from '../../components/group/request-view.vue';

  @Component({
    components: {RequestView, FindGroup, InvitationView, NewGroup},
    layout: 'backend',
    middleware: 'auth',
    async asyncData(context) {
      let groups: Array<GroupListItemModel> = [];
      let showNewGroupDialog: boolean = context.query.create;
      let showFindGroupDialog: boolean = context.query.join;
      await context.$axios.get(`groups?userId=${ context.store.getters['UserStore/user'].Id }`)
        .then(response => {
          for (let group of response.data.groups) {
            groups.push(new GroupListItemModel(group));
          }
        })
        .catch(error => console.dir(error));
      return {
        groups,
        showNewGroupDialog,
        showFindGroupDialog
      }
    }
  })

  export default class GroupsPage extends Vue {
    groups: Array<GroupListItemModel>;
    invitationGroup: GroupListItemModel = new GroupListItemModel();
    requestGroup: GroupListItemModel = new GroupListItemModel();
    @Getter('UserStore/user') User: UserAccountModel;
    @Action('SnackStore/addSnack') AddSnack;
    showInvitationDialog: boolean = false;
    showNewGroupDialog: boolean = false;
    showFindGroupDialog: boolean = false;
    showRequestDialog: boolean = false;

    getGroupLink(group: GroupListItemModel) {
      if (!group.IsAcceptedByUser || !group.IsAcceptedByManager) return;
      return `/groups/${ group.Id }`;
    }

    onInvitationInfoClicked(group: GroupListItemModel) {
      this.invitationGroup = group;
      this.showInvitationDialog = true;
    }

    onRequestInfoClicked(group: GroupListItemModel) {
      this.requestGroup = group;
      this.showRequestDialog = true;
    }

    onInvitationDeleted(groupId: number) {
      this.AddSnack(new SnackMessage(`Deleted invitation from '${ this.invitationGroup.Name }'`, 'info', 6000));
      this.closeInvitationDialog();
      this.groups.splice(this.groups.indexOf(this.getGroup(groupId)), 1);
    }

    onInvitationAccepted(groupId: number) {
      this.AddSnack(new SnackMessage(`Accepted invitation from ${ this.invitationGroup.Name }`, 'success', 6000));
      this.closeInvitationDialog();
      this.getGroup(groupId).IsAcceptedByUser = true;
    }

    onRequestDeleted(groupId: number) {
      this.AddSnack(new SnackMessage(`Deleted request to '${ this.requestGroup.Name }'`, 'info', 6000));
      this.closeRequestDialog();
      this.groups.splice(this.groups.indexOf(this.getGroup(groupId)), 1);
    }

    getGroup(id: number): GroupListItemModel {
      return this.groups.find(g => g.Id === id);
    }

    onNewGroupCreated(group: GroupListItemModel) {
      this.groups.push(group);
      this.showNewGroupDialog = false;
    }

    onNewGroupJoined(group: GroupListItemModel) {
      this.groups.push(group);
      this.showFindGroupDialog = false;
    }

    closeInvitationDialog() {
      this.invitationGroup = new GroupListItemModel();
      this.showInvitationDialog = false;
    }

    closeRequestDialog() {
      this.requestGroup = new GroupListItemModel();
      this.showRequestDialog = false;
    }
  }
</script>

<style scoped lang="scss">
</style>



================================================================================

File: Frontend/pages/groups/_id/index.vue
================================================================================

<template>
  <v-layout row>
    <v-dialog v-model="showNewUserForm" persistent max-width="600px">
      <new-group-user :group="group" @close="showNewUserForm = false" @submit="onUserSubmitted"></new-group-user>
    </v-dialog>
    <v-dialog v-model="showUserInvitation" max-width="600px">
      <user-confirmation :user="selectedUser" :group="group" @accept="onInvitationAccepted" @deny="onInvitationDenied"
                         @close="showUserInvitation = false"></user-confirmation>
    </v-dialog>
    <v-dialog v-model="showDeleteGroupForm" max-width="600px">
      <delete-group :group="group" @close="showDeleteGroupForm = false" @delete="onGroupDeleted"></delete-group>
    </v-dialog>
    <v-dialog v-model="showGroupUserDialog" max-width="600px">
      <GroupUserView :user="selectedUser"
                     :group-user="groupUser"
                     :group="group"
                     @close="showGroupUserDialog = false"
                     @update="onUserUpdated"
                     @delete="onUserDeleted"
                     @owner-update="onOwnerUpdated"></GroupUserView>
    </v-dialog>
    <v-dialog v-model="showAddItemsDialog" max-width="600px">
      <AddItemsView :group="group" @close="showAddItemsDialog = false"
                    @add="onItemAdded"></AddItemsView>
    </v-dialog>
    <v-dialog v-model="showRemoveItemsDialog" scrollable max-width="600px">
      <RemoveItemsView :group="group" @close="showRemoveItemsDialog = false"></RemoveItemsView>
    </v-dialog>
    <v-dialog v-model="showManageItemsDialog" scrollable max-width="600px">
      <ManageItemsView :group="group" @close="showManageItemsDialog = false"></ManageItemsView>
    </v-dialog>
    <v-dialog v-model="showLeaveGroupDialog" max-width="600px">
      <LeaveGroupView :group="group" @close="showLeaveGroupDialog = false"></LeaveGroupView>
    </v-dialog>
    <v-flex xs12 md6 offset-md3>
      <v-card>
        <v-layout class="pa-3">
          <template v-if="group">
            <v-layout row justify-space-between align-center>
              <h6 class="title">
                {{ group.Name }}
              </h6>
              <v-btn v-if="IsGroupManager" color="success" @click="showNewUserForm = true">Add user</v-btn>
            </v-layout>
          </template>
          <template v-else>
            <h6 class="title">
              No group found
            </h6>
          </template>
        </v-layout>
        <template v-if="group">
          <v-list>
            <v-list-tile @click="showManageItemsDialog = true">
              <v-list-tile-action>
                <v-icon>create</v-icon>
              </v-list-tile-action>
              <v-list-tile-content>
                <v-list-tile-title>Manage items</v-list-tile-title>
              </v-list-tile-content>
            </v-list-tile>
            <v-divider></v-divider>
            <v-list-tile @click="showAddItemsDialog = true">
              <v-list-tile-action>
                <v-icon>add</v-icon>
              </v-list-tile-action>
              <v-list-tile-content>
                <v-list-tile-title>Add items</v-list-tile-title>
              </v-list-tile-content>
            </v-list-tile>
            <template v-if="IsGroupManager">
              <v-divider></v-divider>
              <v-list-tile @click="showRemoveItemsDialog = true">
                <v-list-tile-action>
                  <v-icon>remove</v-icon>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>Remove items</v-list-tile-title>
                </v-list-tile-content>
              </v-list-tile>
            </template>
            <v-divider></v-divider>
            <v-list-group prepend-icon="group">
              <template v-slot:activator>
                <v-list-tile>
                  <v-list-tile-content>
                    <v-list-tile-title>View users</v-list-tile-title>
                  </v-list-tile-content>
                </v-list-tile>
              </template>
              <v-list-tile v-on=" isClickable(user) ? { click: () => onUserClicked(user) } : {}"
                           v-for="user of group.Users" :key="user.Id">
                <v-list-tile-action>
                  <v-icon>person</v-icon>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>{{ user.Name }}</v-list-tile-title>
                  <v-list-tile-sub-title v-if="user.IsOwner">Owner</v-list-tile-sub-title>
                  <v-list-tile-sub-title v-else-if="user.IsManager">Manager</v-list-tile-sub-title>
                </v-list-tile-content>
                <v-list-tile-action v-if="!user.IsAcceptedByManager || !user.IsAcceptedByUser">
                  <v-tooltip bottom>
                    <template v-slot:activator="{ on }">
                      <v-icon :color="!user.IsAcceptedByManager ? 'error' : 'warning'" v-on="on">warning</v-icon>
                    </template>
                    <span>{{ getAcceptanceWarnings(user) }}</span>
                  </v-tooltip>
                </v-list-tile-action>
              </v-list-tile>
            </v-list-group>
            <v-divider></v-divider>
            <template v-if="!IsGroupOwner">
              <v-list-tile @click="showLeaveGroupDialog = true">
                <v-list-tile-action>
                  <v-icon>block</v-icon>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>Leave group</v-list-tile-title>
                </v-list-tile-content>
              </v-list-tile>
            </template>
            <template v-if="IsGroupOwner">
              <v-divider></v-divider>
              <v-list-tile @click="showDeleteGroupForm = true">
                <v-list-tile-action>
                  <v-icon>delete_forever</v-icon>
                </v-list-tile-action>
                <v-list-tile-content>
                  <v-list-tile-title>Delete group</v-list-tile-title>
                </v-list-tile-content>
              </v-list-tile>
            </template>
          </v-list>
        </template>
      </v-card>
    </v-flex>
  </v-layout>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import GroupViewModel from "../../../models/getter/group/GroupViewModel";
  import GroupUserViewModel from "../../../models/getter/group/GroupUserViewModel";
  import { Action, Getter } from 'vuex-class';
  import UserAccountModel from "../../../models/setter/user/UserAccountModel";
  import NewGroupUser from '../../../components/group/new-group-user.vue';
  import UserConfirmation from '../../../components/group/user-confirmation.vue';
  import DeleteGroup from '../../../components/group/delete-group.vue'
  import GroupUserView from '../../../components/group/group-user-view.vue';
  import AddItemsView from '../../../components/item/add-items-view.vue';
  import GroupItemViewModel from "../../../models/getter/group/GroupItemViewModel";
  import RemoveItemsView from '../../../components/item/remove-items-view.vue';
  import ManageItemsView from '../../../components/item/manage-items-view.vue';
  import LeaveGroupView from '../../../components/group/leave-group-view.vue';

  @Component({
    components: {
      LeaveGroupView,
      ManageItemsView,
      RemoveItemsView, AddItemsView, GroupUserView, UserConfirmation, NewGroupUser, DeleteGroup
    },
    layout: 'backend',
    middleware: 'auth',
    async asyncData(context) {
      let group: GroupViewModel;
      await context.$axios.get(`groups/${ context.params.id }`)
        .then(response => {
          group = new GroupViewModel(response.data);
        })
        .catch(error => console.dir(error));
      return {
        group
      }
    }
  })

  export default class GroupPage extends Vue {
    group: GroupViewModel;
    groupUser: GroupUserViewModel = new GroupUserViewModel();
    selectedUser: GroupUserViewModel = new GroupUserViewModel();
    @Getter('UserStore/user') User: UserAccountModel;
    @Action('SnackStore/addSnack') AddSnack;
    showNewUserForm: boolean = false;
    showUserInvitation: boolean = false;
    showDeleteGroupForm: boolean = false;
    showGroupUserDialog: boolean = false;
    showAddItemsDialog: boolean = false;
    showRemoveItemsDialog: boolean = false;
    showManageItemsDialog: boolean = false;
    showLeaveGroupDialog: boolean = false;

    mounted() {
      this.groupUser = this.group.Users.find(u => u.Id === this.User.Id);
    }

    get IsGroupManager(): boolean {
      return this.groupUser.IsManager;
    }

    get IsGroupOwner(): boolean {
      return this.group.Users.find(u => u.Id === this.User.Id).IsOwner;
    }

    isClickable(user: GroupUserViewModel): boolean {
      if (!this.IsGroupManager) return false; // Only managers can click on user
      const groupUser = this.group.Users.find(u => u.Id === user.Id);
      if (groupUser.Id === this.User.Id) return false; // Manager should not need/be allowed to modify self
      if (groupUser.IsOwner) return false; // Nobody should be allowed to modify owner
      if (groupUser.IsManager && !this.IsGroupOwner) return false; // Only owner can modify managers
      if (!groupUser.IsAcceptedByUser) return false; // Should not be able to modify user who has not accepted invitation
      return true;
    }

    getAcceptanceWarnings(user: GroupUserViewModel) {
      if (!user.IsAcceptedByUser && !user.IsAcceptedByManager) return 'This user should not be here';
      if (!user.IsAcceptedByUser) return 'User confirmation is pending';
      if (!user.IsAcceptedByManager) return 'Manager confirmation is pending'
    }

    get NewUserRules(): Array<any> {
      return [
        v => !!v || 'User is required.'
      ]
    }

    onUserSubmitted(user: GroupUserViewModel) {
      this.group.Users.push(user);
      this.showNewUserForm = false;
    }

    onUserClicked(user: GroupUserViewModel) {
      this.selectedUser = this.group.Users.find(u => u.Id === user.Id);
      if (!this.selectedUser.IsAcceptedByManager)
        this.showUserInvitation = true;
      else
        this.showGroupUserDialog = true;
    }

    onInvitationDenied() {
      this.group.Users.splice(this.group.Users.indexOf(this.selectedUser), 1);
      this.showUserInvitation = false;
    }

    onInvitationAccepted() {
      this.selectedUser.IsAcceptedByManager = true;
      this.showUserInvitation = false;
    }

    onGroupDeleted() {
      this.$router.push('/groups');
    }

    onUserUpdated(user: GroupUserViewModel) {
      this.selectedUser = user;
      this.group.Users[this.group.Users.indexOf(this.selectedUser)] = this.selectedUser;
      this.showGroupUserDialog = false;
    }

    onUserDeleted(user: GroupUserViewModel) {
      this.selectedUser = user;
      this.group.Users.splice(this.group.Users.indexOf(this.selectedUser), 1);
      this.showGroupUserDialog = false;
    }

    onOwnerUpdated(newOwner: GroupUserViewModel) {
      this.showGroupUserDialog = false;
      this.selectedUser = newOwner;
      this.group.Users.find(u => u.IsOwner).IsOwner = false;
      this.group.Users[this.group.Users.indexOf(this.selectedUser)].IsOwner = true;
      this.group.Users[this.group.Users.indexOf(this.selectedUser)].IsManager = true;
    }

    onItemAdded(item: GroupItemViewModel) {
      this.group.Items.push(item);
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/pages/index.vue
================================================================================

<template>
  <v-container>
    <v-card>
      <v-layout row wrap>
        <template v-if="Token">
          <v-flex xs12>
            <v-btn block to="/dashboard" color="success">Dashboard</v-btn>
          </v-flex>
        </template>
        <template v-else>
          <v-flex px-2 xs12 md6>
            <v-btn block to="/login" color="primary">Login</v-btn>
          </v-flex>
          <v-flex px-2 xs12 md6>
            <v-btn block to="/register" color="primary">Register</v-btn>
          </v-flex>
        </template>
      </v-layout>
    </v-card>
  </v-container>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import UserAccountModel from "../models/setter/user/UserAccountModel";
  import { Getter } from 'vuex-class';

  @Component({})

  export default class Index extends Vue {
    @Getter('UserStore/jwtToken') Token: string;
  }
</script>

<style scoped lang="scss">
</style>



================================================================================

File: Frontend/pages/login/index.vue
================================================================================

<template>
  <v-container d-flex justify-center>
    <v-flex xs12 md4>
      <v-alert v-if="registeredAlert" :type="registeredAlert.AlertType" v-model="registeredAlert.Show">
        Thank you for registering!<br/>Please login to get started!
      </v-alert>
      <v-alert v-if="loggedOutAlert" :type="loggedOutAlert.AlertType" v-model="loggedOutAlert.Show">
        You were successfully logged out.
      </v-alert>
      <v-alert v-if="deletedAlert" :type="deletedAlert.AlertType" v-model="deletedAlert.Show">
        You account has been deleted.
      </v-alert>
      <v-alert v-for="(error, index) of errors" :key="index" :type="error.AlertType" v-model="error.Show" transition="scale-transition">
        {{ error.Message }}
      </v-alert>
      <v-card>
        <v-form v-model="valid" @submit.prevent="onFormSubmit">
          <v-layout row wrap>
            <v-flex px-2 xs12>
              <v-text-field :rules="NameRules" v-model="user.Username" label="Username"></v-text-field>
            </v-flex>
            <v-flex px-2 xs12>
              <v-text-field :rules="PasswordRules" v-model="user.Password" label="Password"
                            type="password"></v-text-field>
            </v-flex>
            <v-flex px-2 xs12>
              <v-btn block :disabled="!valid" :loading="loading" color="success" type="submit">Login</v-btn>
            </v-flex>
            <v-flex px-2 xs12>
              <v-btn block color="error" to="/">Cancel</v-btn>
            </v-flex>
          </v-layout>
        </v-form>
      </v-card>
    </v-flex>
  </v-container>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import UserLoginModel from "../../models/setter/user/UserLoginModel";
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";
  import { Action, Getter } from 'vuex-class';
  import UserAccountModel from "../../models/setter/user/UserAccountModel";

  @Component({})

  export default class LoginPage extends Vue {
    valid: boolean = false;
    loading: boolean = false;
    user: UserLoginModel = new UserLoginModel();
    registeredAlert: AlertDisplay = null;
    loggedOutAlert: AlertDisplay = null;
    deletedAlert: AlertDisplay = null;
    errors: Array<AlertDisplay> = [];
    @Action('UserStore/login') Login;
    @Getter('UserStore/user') User: UserAccountModel;

    mounted() {
      if (this.User)
        this.$router.push('/dashboard');
      this.setupLoginForm();
    }

    setupLoginForm() {
      if (this.$route.query.username) {
        this.registeredAlert = new AlertDisplay(AlertType.Success);
        this.user.Username = this.$route.query.username as string;
      }
      if (this.$route.query.exit) {
        this.loggedOutAlert = new AlertDisplay(AlertType.Success);
      }
      if (this.$route.query.delete) {
        this.deletedAlert = new AlertDisplay(AlertType.Info);
      }
    }

    async onFormSubmit() {
      this.loading = true;
      const result = await this.Login(this.user);
      if (result.status === 200)
        this.$router.push('/dashboard');
      else if (result.response.status === 401)
        this.errors.push(new AlertDisplay(AlertType.Error, 'Invalid username or password.', 2500));
      else
        this.errors.push(new AlertDisplay(AlertType.Error, result.message, 2500));
      this.loading = false;
    }

    get NameRules(): Array<any> {
      return [
        v => !!v || 'Username is required.'
      ];
    }

    get PasswordRules(): Array<any> {
      return [
        v => !!v || 'Password is required.'
      ];
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/pages/menu/index.vue
================================================================================

<template>
  <v-layout row>
    <v-dialog v-model="showDeleteUserForm" max-width="600px">
      <delete-user @close="showDeleteUserForm = false" @submit="onDeleteSubmitted" :owned-groups="OwnedGroups"></delete-user>
    </v-dialog>
    <v-dialog v-model="showUpdatePasswordForm" max-width="600px">
      <user-password @close="showUpdatePasswordForm = false" @submit="showUpdatePasswordForm = false"></user-password>
    </v-dialog>
    <v-flex xs12 md6 offset-md3>
      <v-list>
        <v-list-tile @click="showUpdatePasswordForm = true">
          <v-list-tile-content>
            <v-list-tile-title>Update password</v-list-tile-title>
          </v-list-tile-content>
        </v-list-tile>
        <v-divider></v-divider>
        <v-list-tile @click="showDeleteUserForm = true">
          <v-list-tile-content>
            <v-list-tile-title>Delete Account</v-list-tile-title>
          </v-list-tile-content>
        </v-list-tile>
        <v-divider></v-divider>
        <v-list-tile @click="onLogoutClicked">
          <v-list-tile-content>
            <v-list-tile-title>Logout</v-list-tile-title>
          </v-list-tile-content>
        </v-list-tile>
      </v-list>
    </v-flex>
  </v-layout>
</template>

<script lang="ts">
  import {Component, Vue} from 'vue-property-decorator';
  import { Action } from 'vuex-class';
  import Router from 'vue-router';
  import DeleteUser from '../../components/user/delete-user.vue';
  import UserPassword from '../../components/user/user-password.vue';
  import GroupListItemModel from '../../models/getter/group/GroupListItemModel';

  @Component({
    components: {DeleteUser, UserPassword},
    layout: 'backend',
    middleware: 'auth',
    async asyncData(context) {
      const userGroups: Array<GroupListItemModel> = [];
      await context.$axios.get(`groups?userId=${context.store.getters['UserStore/user'].Id}`)
        .then(response => response.data.groups.map(g => userGroups.push(new GroupListItemModel(g))))
        .catch(error => console.dir(error));
      return {
        userGroups
      }
    }
  })

  export default class UserPage extends Vue {
    @Action('UserStore/logout') Logout: Function;
    $router: Router;
    showDeleteUserForm: boolean = false;
    showUpdatePasswordForm: boolean = false;
    userGroups: Array<GroupListItemModel>;

    get OwnedGroups(): Array<GroupListItemModel> {
      return this.userGroups.filter(ug => ug.IsOwner);
    }

    onLogoutClicked() {
      this.Logout();
      this.$router.push('/login?exit=1')
    }

    onDeleteSubmitted() {
      this.Logout();
      this.$router.push('/login?delete=1');
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/pages/README.md
================================================================================

# PAGES

This directory contains your Application Views and Routes.
The framework reads all the `*.vue` files inside this directory and creates the router of your application.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/routing).



================================================================================

File: Frontend/pages/register/index.vue
================================================================================

<template>
  <v-container d-flex justify-center>
    <v-flex xs12 md4>
      <v-alert v-for="(error, index) of errors" :key="index" v-model="error.Show" :type="error.AlertType"
               transition="scale-transition">{{ error.Message }}
      </v-alert>
      <v-card>
        <v-form v-model="valid" @submit.prevent="onFormSubmit">
          <v-layout row wrap>
            <v-flex px-2 xs12>
              <v-text-field hint="Min. 6 chars" counter :rules="NameRules" v-model="user.Username"
                            label="Username"></v-text-field>
            </v-flex>
            <v-flex px-2 xs12>
              <v-text-field hint="Min. 7 chars" counter :rules="PasswordRules" v-model="user.Password" label="Password"
                            type="password"></v-text-field>
            </v-flex>
            <v-flex px-2 xs12>
              <v-text-field counter :rules="RepeatPasswordRules" v-model="user.RepeatPassword" label="Repeat Password"
                            type="password"></v-text-field>
            </v-flex>
            <v-flex px-2 xs12>
              <v-btn block :disabled="!valid" :loading="loading" color="success" type="submit">Register</v-btn>
            </v-flex>
            <v-flex px-2 xs12>
              <v-btn block color="error" to="/">Cancel</v-btn>
            </v-flex>
          </v-layout>
        </v-form>
      </v-card>
    </v-flex>
  </v-container>
</template>

<script lang="ts">
  import { Component, Vue } from 'vue-property-decorator';
  import UserRegisterModel from "../../models/setter/user/UserRegisterModel";
  import AlertDisplay, { AlertType } from "../../models/app/AlertDisplay";

  @Component({})

  export default class RegisterPage extends Vue {
    valid: boolean = false;
    user: UserRegisterModel = new UserRegisterModel();
    loading: boolean = false;
    errors: Array<AlertDisplay> = [];

    async onFormSubmit() {
      this.loading = true;
      await this.$axios.post('users', this.user)
        .then(() => {
          this.$router.push(`/login?username=${ this.user.Username }`);
        })
        .catch(error => {
          console.dir(error);
          if (!error.response)
            this.errors.push(new AlertDisplay(AlertType.Error, error.message, 2500));
          else if (error.response.data.includes('already exists'))
            this.errors.push(new AlertDisplay(AlertType.Error, 'Username is already taken.', 2500));
        })
        .finally(() => this.loading = false);
    }

    get NameRules(): Array<any> {
      return [
        v => !!v || 'Name is required.',
        v => v.length >= 6 || 'Username needs at least 6 characters.'
      ]
    }

    get PasswordRules(): Array<any> {
      return [
        v => !!v || 'Password is required.',
        v => v.length >= 7 || 'Password needs at least 7 characters.'
      ]
    }

    get RepeatPasswordRules(): Array<any> {
      return [
        v => !!v || 'Repeat password is required.',
        v => v === this.user.Password || 'Passwords must match.'
      ]
    }
  }
</script>

<style scoped lang="scss">

</style>



================================================================================

File: Frontend/plugins/dayjs-plugin.ts
================================================================================

import DayJs from 'dayjs';
// EXAMPLE START
// import utc from 'dayjs/plugin/utc';

// DayJs.extend(utc);
// EXAMPLE END



================================================================================

File: Frontend/plugins/README.md
================================================================================

# PLUGINS

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains Javascript plugins that you want to run before mounting the root Vue.js application.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/plugins).



================================================================================

File: Frontend/plugins/token-setup.ts
================================================================================

import TokenModel from '../models/getter/user/TokenModel';
import CookieService from '../services/CookieService';

export default({store, $axios}) => {
  const token = store.getters['UserStore/tokenModel'] as TokenModel;
  if (token.JwtToken && token.RefreshToken) {
    CookieService.SetPersistentCookie('jwt', token.JwtToken, token.RefreshTokenExpirationDate);
    CookieService.SetPersistentCookie('refresh-token', token.RefreshToken, token.RefreshTokenExpirationDate);
    $axios.setToken(token.JwtToken, 'Bearer');
  }
}



================================================================================

File: Frontend/plugins/vuetify.js
================================================================================

import Vue from 'vue'
import Vuetify from 'vuetify/lib'
import colors from 'vuetify/es5/util/colors'

Vue.use(Vuetify, {
  theme: {
    primary: colors.blue.darken2,
    accent: colors.grey.darken3,
    secondary: colors.lightBlue.lighten1,
    info: colors.teal.lighten1,
    warning: colors.amber.base,
    error: colors.deepOrange.accent4,
    success: colors.green.accent3,
  }
});



================================================================================

File: Frontend/README.md
================================================================================

# purchase-manager

> My fine Nuxt.js project

## Build Setup

``` bash
# install dependencies
$ npm install

# serve with hot reload at localhost:3000
$ npm run dev

# build for production and launch server
$ npm run build
$ npm start

# generate static project
$ npm run generate
```

For detailed explanation on how things work, checkout [Nuxt.js docs](https://nuxtjs.org).



================================================================================

File: Frontend/services/ArrayService.ts
================================================================================

export default class ArrayService {
  public static RemoveFromArray<T>(array: Array<T>, item: T): Array<T> {
    return array.splice(array.indexOf(item), 1);
  }
}



================================================================================

File: Frontend/services/CookieService.ts
================================================================================

import DayJs from 'dayjs';
import Cookies from 'js-cookie';
import String from '../common/fake-extensions/String';

export default class CookieService {
  public static SetPersistentCookie(name: string, value: string, expirationDate: string) {
    const expirationDays = Math.abs(Math.round(DayJs().diff(DayJs(expirationDate), 'hour') / 24));
    Cookies.set(name, value, {expires: expirationDays});
  }

  public static SetSessionCookie(name: string, value: string) {
    Cookies.set(name, value);
  }

  public static RemoveCookie(name: string) {
    Cookies.remove(name);
  }

  public static GetCookie(name: string): string {
    const cookie = Cookies.get(name);
    if (cookie) return cookie;
    throw new Error('Cookie is null');
  }

  public static GetServerCookie(name: string, serverContext: any): string | undefined {
    if (!serverContext.req.headers.cookie)
      return '';
    const cookie = serverContext.req.headers.cookie
      .split('; ')
      .filter(ca => {
        return String.SplitByFirst(ca, '=') === name;
      })[0] as string;
    if (!cookie) return undefined;
    return String.SplitByFirst(cookie, '=', false);
  }
}



================================================================================

File: Frontend/services/DayJsService.ts
================================================================================

import DayJs from 'dayjs';

export default class DayJsService {
  public static ConvertToLocalTime(dateTime: string): DayJs.Dayjs {
    return DayJs(dateTime).add(DayJs().utcOffset(), 'minute');
  }
}



================================================================================

File: Frontend/static/README.md
================================================================================

# STATIC

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains your static files.
Each file inside this directory is mapped to `/`.
Thus you'd want to delete this README.md before deploying to production.

Example: `/static/robots.txt` is mapped as `/robots.txt`.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/assets#static).



================================================================================

File: Frontend/store/index.ts
================================================================================

import CookieService from '../services/CookieService';

export const actions = {
  async nuxtServerInit(store, context) {
    await refreshToken(store, context);
  }
};

async function refreshToken(store, context) {
  const jwt = CookieService.GetServerCookie('jwt', context);
  const refreshToken = CookieService.GetServerCookie('refresh-token', context);
  if (!jwt || !refreshToken) return;
  context.$axios.setToken(jwt, 'Bearer');
  await store.dispatch('UserStore/refresh', {
    jwtToken: jwt,
    refreshToken: refreshToken
  });
}



================================================================================

File: Frontend/store/README.md
================================================================================

# STORE

**This directory is not required, you can delete it if you don't want to use it.**

This directory contains your Vuex Store files.
Vuex Store option is implemented in the Nuxt.js framework.

Creating a file in this directory automatically activates the option in the framework.

More information about the usage of this directory in [the documentation](https://nuxtjs.org/guide/vuex-store).



================================================================================

File: Frontend/store/SnackStore.ts
================================================================================

// Store to hold snackbars, which will be displayed in the Backend layout.

import SnackMessage from '../models/app/SnackMessage';

export interface ISnackState {
  message: string;
  color: string;
  show: boolean;
}

export const state = (): ISnackState => {
  let message = '';
  let color = '';
  let show = false;
  return {
    message,
    color,
    show
  }
};

export const mutations = {
  setMessage(state: ISnackState, message: string) {
    state.message = message;
  },
  setColor(state: ISnackState, color: string) {
    state.color = color;
  },
  setActive(state: ISnackState) {
    state.show = true;
  },
  setInactive(state: ISnackState) {
    state.show = false;
  }
};

export const actions = {
  addSnack(context, snack: SnackMessage) {
    context.commit('setMessage', snack.Message);
    context.commit('setColor', snack.Color);
    context.commit('setActive');
    setTimeout(() => {
      context.commit('setInactive');
    }, snack.Timeout);
  }
};

export const getters = {
  snack(state: ISnackState): ISnackState {
    return state
  }
};



================================================================================

File: Frontend/store/UserStore.ts
================================================================================

import UserAccountModel from '../models/setter/user/UserAccountModel';
import TokenModel from '../models/getter/user/TokenModel';
import UserLoginModel from '../models/setter/user/UserLoginModel';
import CookieService from '../services/CookieService';
import RefreshModel from '../models/setter/user/RefreshModel';
import DayJs from 'dayjs';

interface IRefreshIntervalModel {
  context;
}

interface IUserState {
  user: UserAccountModel;
  tokenModel: TokenModel;
  refreshInterval;
}

export const state = (): IUserState => {
  let user = new UserAccountModel();
  let tokenModel = new TokenModel();
  let refreshInterval = null;
  return {
    user,
    tokenModel,
    refreshInterval
  }
};

export const mutations = {
  storeUser(state: IUserState, user) {
    state.user.Id = user.id;
    state.user.Username = user.username;
  },
  storeToken(state: IUserState, tokenModel: TokenModel) {
    state.tokenModel = tokenModel;
  },
  setTimeout(state: IUserState, payload: IRefreshIntervalModel) {
    const timeoutInMs = Math.abs(DayJs().diff(DayJs(state.tokenModel.JwtExpirationDate), 'millisecond'));
    state.refreshInterval = setTimeout(() => {
      payload.context.dispatch('refresh', {
        jwtToken: state.tokenModel.JwtToken,
        refreshToken: state.tokenModel.RefreshToken
      }).then(() => {
        payload.context.commit('setTimeout', {
          context: payload.context
        });
      });
    }, timeoutInMs);
  },
  clearUser(state: IUserState) {
    state.user = new UserAccountModel();
  },
  clearToken(state: IUserState) {
    state.tokenModel = new TokenModel();
  },
  clearRefreshInterval(state: IUserState) {
    clearTimeout(state.refreshInterval);
  }
};

export const actions = {
  async login(context, loginModel: UserLoginModel) {
    return await this.$axios.post('users/login', loginModel)
      .then(response => {
        context.commit('storeUser', response.data.user);
        context.commit('storeToken', {
          JwtToken: response.data.jwtToken,
          RefreshToken: response.data.refreshToken,
          JwtExpirationDate: response.data.jwtExpirationDate,
          RefreshTokenExpirationDate: response.data.refreshTokenExpirationDate
        });
        context.commit('setTimeout', {
          context: context
        });
        CookieService.SetPersistentCookie('jwt', response.data.jwtToken, response.data.refreshTokenExpirationDate);
        CookieService.SetPersistentCookie('refresh-token', response.data.refreshToken, response.data.refreshTokenExpirationDate);
        this.$axios.setToken(response.data.jwtToken, 'Bearer');
        return response;
      })
      .catch(error => {
        return error;
      })
  },
  async refresh(context, refreshModel: RefreshModel) {
    await this.$axios.post('users/refresh', refreshModel)
      .then(response => {
        context.commit('storeUser', response.data.user);
        context.commit('storeToken', {
          JwtToken: response.data.jwtToken,
          RefreshToken: response.data.refreshToken,
          JwtExpirationDate: response.data.jwtExpirationDate,
          RefreshTokenExpirationDate: response.data.refreshTokenExpirationDate
        });
        CookieService.SetPersistentCookie('jwt', response.data.jwtToken, response.refreshTokenExpirationDate);
        CookieService.SetPersistentCookie('refresh-token', response.data.refreshToken, response.refreshTokenExpirationDate);
        this.$axios.setToken(response.data.jwtToken, 'Bearer');
        return response;
      })
      .catch(error => {
        return error;
      })
  },
  setupTimeout(context) {
    context.commit('setTimeout', {
      context: context,
      tokenModel: context.getters['tokenModel']
    });
  },
  logout(context) {
    context.commit('clearUser');
    context.commit('clearToken');
    context.commit('clearRefreshInterval');
    CookieService.RemoveCookie('jwt');
    CookieService.RemoveCookie('refresh-token');
    this.$axios.setToken(false, 'Bearer');
  }
};

export const getters = {
  user(state: IUserState): UserAccountModel {
    return state.user;
  },
  tokenModel(state: IUserState): TokenModel {
    return state.tokenModel;
  },
  jwtToken(state: IUserState): string {
    return state.tokenModel.JwtToken;
  }
};



================================================================================

File: Frontend/tsconfig.json
================================================================================

{
  "compilerOptions": {
    "module": "es2015",
    "target": "es6",
    "sourceMap": true,
    "lib": [
      "dom",
      "es2018"
    ],
    "moduleResolution": "node",
    "noImplicitAny": false,
    "noImplicitThis": false,
    "strictNullChecks": false,
    "removeComments": true,
    "suppressImplicitAnyIndexErrors": true,
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "allowJs": true,
    "baseUrl": ".",
    "types": [
      "@types/node"
    ],
    "esModuleInterop": true,
    "strict": true,
    "noEmit": false
  },
  "exclude": [
    "node_modules"
  ]
}



================================================================================

File: Frontend/vue-shim.d.ts
================================================================================

import {AxiosInstance} from 'axios';
import Router from 'vue-router';
import Vue, {ComponentOptions} from 'vue';

declare module 'vue/types/vue' {
  interface Vue {
    $axios: AxiosInstance;
    $router: Router;
  }
}

declare module 'vue/types/options' {
  interface ComponentOptions<V extends Vue> {
    middleware?: string | string[];
    layout?: string;
    asyncData?: Function;
    fetch?: Function;
  }
}



================================================================================

File: Apache/conf/apache2.conf
================================================================================

# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See http://httpd.apache.org/docs/2.4/ for detailed information about
# the directives and /usr/share/doc/apache2/README.Debian about Debian specific
# hints.
#
#
# Summary of how the Apache 2 configuration works in Debian:
# The Apache 2 web server configuration in Debian is quite different to
# upstream's suggested way to configure the web server. This is because Debian's
# default Apache2 installation attempts to make adding and removing modules,
# virtual hosts, and extra configuration directives as flexible as possible, in
# order to make automating the changes and administering the server as easy as
# possible.

# It is split into several files forming the configuration hierarchy outlined
# below, all located in the /etc/apache2/ directory:
#
#	/etc/apache2/
#	|-- apache2.conf
#	|	`--  ports.conf
#	|-- mods-enabled
#	|	|-- *.load
#	|	`-- *.conf
#	|-- conf-enabled
#	|	`-- *.conf
# 	`-- sites-enabled
#	 	`-- *.conf
#
#
# * apache2.conf is the main configuration file (this file). It puts the pieces
#   together by including all remaining configuration files when starting up the
#   web server.
#
# * ports.conf is always included from the main configuration file. It is
#   supposed to determine listening ports for incoming connections which can be
#   customized anytime.
#
# * Configuration files in the mods-enabled/, conf-enabled/ and sites-enabled/
#   directories contain particular configuration snippets which manage modules,
#   global configuration fragments, or virtual host configurations,
#   respectively.
#
#   They are activated by symlinking available configuration files from their
#   respective *-available/ counterparts. These should be managed by using our
#   helpers a2enmod/a2dismod, a2ensite/a2dissite and a2enconf/a2disconf. See
#   their respective man pages for detailed information.
#
# * The binary is called apache2. Due to the use of environment variables, in
#   the default configuration, apache2 needs to be started/stopped with
#   /etc/init.d/apache2 or apache2ctl. Calling /usr/bin/apache2 directly will not
#   work with the default configuration.


# Global configuration
#

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the Mutex documentation (available
# at <URL:http://httpd.apache.org/docs/2.4/mod/core.html#mutex>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
#ServerRoot "/etc/apache2"

#
# The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
#
Mutex file:${APACHE_LOCK_DIR} default

#
# PidFile: The file in which the server should record its process
# identification number when it starts.
# This needs to be set in /etc/apache2/envvars
#
PidFile ${APACHE_PID_FILE}

#
# Timeout: The number of seconds before receives and sends time out.
#
Timeout 300

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
KeepAlive On

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
MaxKeepAliveRequests 100

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
KeepAliveTimeout 5


# These need to be set in /etc/apache2/envvars
User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it'd be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
HostnameLookups Off

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
ErrorLog ${APACHE_LOG_DIR}/error.log

#
# LogLevel: Control the severity of messages logged to the error_log.
# Available values: trace8, ..., trace1, debug, info, notice, warn,
# error, crit, alert, emerg.
# It is also possible to configure the log level for particular modules, e.g.
# "LogLevel info ssl:warn"
#
LogLevel warn

# Include module configuration:
IncludeOptional mods-enabled/*.load
IncludeOptional mods-enabled/*.conf

# Include list of ports to listen on
Include ports.conf


# Sets the default security model of the Apache2 HTTPD server. It does
# not allow access to the root filesystem outside of /usr/share and /var/www.
# The former is used by web applications packaged in Debian,
# the latter may be used for local directories served by the web server. If
# your system is serving content from a sub-directory in /srv you must allow
# access here, or in any related virtual host.
<Directory />
	Options FollowSymLinks
	AllowOverride None
	Require all denied
</Directory>

<Directory /usr/share>
	AllowOverride None
	Require all granted
</Directory>

<Directory /var/www/>
	Options Indexes FollowSymLinks
	AllowOverride None
	Require all granted
</Directory>

#<Directory /srv/>
#	Options Indexes FollowSymLinks
#	AllowOverride None
#	Require all granted
#</Directory>




# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#
AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being
# viewed by Web clients.
#
<FilesMatch "^\.ht">
	Require all denied
</FilesMatch>


#
# The following directives define some format nicknames for use with
# a CustomLog directive.
#
# These deviate from the Common Log Format definitions in that they use %O
# (the actual bytes sent including headers) instead of %b (the size of the
# requested file), because the latter makes it impossible to detect partial
# requests.
#
# Note that the use of %{X-Forwarded-For}i instead of %h is not recommended.
# Use mod_remoteip instead.
#
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# Include of directories ignores editors' and dpkg's backup files,
# see README.Debian for details.

# Include generic snippets of statements
IncludeOptional conf-enabled/*.conf

# Include the virtual host configurations:
IncludeOptional sites-enabled/*.conf

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet
ServerName redundo.net


================================================================================

File: Apache/conf/conf-available/charset.conf
================================================================================

# Read the documentation before enabling AddDefaultCharset.
# In general, it is only a good idea if you know that all your files
# have this encoding. It will override any encoding given in the files
# in meta http-equiv or xml encoding tags.

#AddDefaultCharset UTF-8

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/conf-available/localized-error-pages.conf
================================================================================

# Customizable error responses come in three flavors:
# 1) plain text
# 2) local redirects
# 3) external redirects
#
# Some examples:
#ErrorDocument 500 "The server made a boo boo."
#ErrorDocument 404 /missing.html
#ErrorDocument 404 "/cgi-bin/missing_handler.pl"
#ErrorDocument 402 http://www.example.com/subscription_info.html
#

#
# Putting this all together, we can internationalize error responses.
#
# We use Alias to redirect any /error/HTTP_<error>.html.var response to
# our collection of by-error message multi-language collections.  We use
# includes to substitute the appropriate text.
#
# You can modify the messages' appearance without changing any of the
# default HTTP_<error>.html.var files by adding the line:
#
#Alias /error/include/ "/your/include/path/"
#
# which allows you to create your own set of files by starting with the
# /usr/share/apache2/error/include/ files and copying them to /your/include/path/,
# even on a per-VirtualHost basis.  If you include the Alias in the global server
# context, is has to come _before_ the 'Alias /error/ ...' line.
#
# The default include files will display your Apache version number and your
# ServerAdmin email address regardless of the setting of ServerSignature.
#
# WARNING: The configuration below will NOT work out of the box if you have a
#		  SetHandler directive in a <Location /> context somewhere. Adding
#		  the following three lines AFTER the <Location /> context should
#		  make it work in most cases:
#		  <Location /error/>
#			 SetHandler none
#		  </Location>
#
# The internationalized error documents require mod_alias, mod_include
# and mod_negotiation.  To activate them, uncomment the following 37 lines.

#<IfModule mod_negotiation.c>
#	<IfModule mod_include.c>
#		<IfModule mod_alias.c>
#
#			Alias /error/ "/usr/share/apache2/error/"
#
#			<Directory "/usr/share/apache2/error">
#				Options IncludesNoExec
#				AddOutputFilter Includes html
#				AddHandler type-map var
#				Order allow,deny
#				Allow from all
#				LanguagePriority en cs de es fr it nl sv pt-br ro
#				ForceLanguagePriority Prefer Fallback
#			</Directory>
#
#			ErrorDocument 400 /error/HTTP_BAD_REQUEST.html.var
#			ErrorDocument 401 /error/HTTP_UNAUTHORIZED.html.var
#			ErrorDocument 403 /error/HTTP_FORBIDDEN.html.var
#			ErrorDocument 404 /error/HTTP_NOT_FOUND.html.var
#			ErrorDocument 405 /error/HTTP_METHOD_NOT_ALLOWED.html.var
#			ErrorDocument 408 /error/HTTP_REQUEST_TIME_OUT.html.var
#			ErrorDocument 410 /error/HTTP_GONE.html.var
#			ErrorDocument 411 /error/HTTP_LENGTH_REQUIRED.html.var
#			ErrorDocument 412 /error/HTTP_PRECONDITION_FAILED.html.var
#			ErrorDocument 413 /error/HTTP_REQUEST_ENTITY_TOO_LARGE.html.var
#			ErrorDocument 414 /error/HTTP_REQUEST_URI_TOO_LARGE.html.var
#			ErrorDocument 415 /error/HTTP_UNSUPPORTED_MEDIA_TYPE.html.var
#			ErrorDocument 500 /error/HTTP_INTERNAL_SERVER_ERROR.html.var
#			ErrorDocument 501 /error/HTTP_NOT_IMPLEMENTED.html.var
#			ErrorDocument 502 /error/HTTP_BAD_GATEWAY.html.var
#			ErrorDocument 503 /error/HTTP_SERVICE_UNAVAILABLE.html.var
#			ErrorDocument 506 /error/HTTP_VARIANT_ALSO_VARIES.html.var
#		</IfModule>
#	</IfModule>
#</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/conf-available/other-vhosts-access-log.conf
================================================================================

# Define an access log for VirtualHosts that don't define their own logfile
CustomLog ${APACHE_LOG_DIR}/other_vhosts_access.log vhost_combined

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/conf-available/security.conf
================================================================================

#
# Disable access to the entire file system except for the directories that
# are explicitly allowed later.
#
# This currently breaks the configurations that come with some web application
# Debian packages.
#
#<Directory />
#   AllowOverride None
#   Order Deny,Allow
#   Deny from all
#</Directory>


# Changing the following options will not really affect the security of the
# server, but might make attacks slightly more difficult in some cases.

#
# ServerTokens
# This directive configures what you return as the Server HTTP response
# Header. The default is 'Full' which sends information about the OS-Type
# and compiled in modules.
# Set to one of:  Full | OS | Minimal | Minor | Major | Prod
# where Full conveys the most information, and Prod the least.
#ServerTokens Minimal
ServerTokens Prod
#ServerTokens Full

#
# Optionally add a line containing the server version and virtual host
# name to server-generated pages (internal error documents, FTP directory
# listings, mod_status and mod_info output etc., but not CGI generated
# documents or custom error documents).
# Set to "EMail" to also include a mailto: link to the ServerAdmin.
# Set to one of:  On | Off | EMail
ServerSignature Off


#
# Allow TRACE method
#
# Set to "extended" to also reflect the request body (only for testing and
# diagnostic purposes).
#
# Set to one of:  On | Off | extended
TraceEnable Off
#TraceEnable On

#
# Forbid access to version control directories
#
# If you use version control systems in your document root, you should
# probably deny access to their directories. For example, for subversion:
#
#<DirectoryMatch "/\.svn">
#   Require all denied
#</DirectoryMatch>

#
# Setting this header will prevent MSIE from interpreting files as something
# else than declared by the content type in the HTTP headers.
# Requires mod_headers to be enabled.
#
#Header set X-Content-Type-Options: "nosniff"

#
# Setting this header will prevent other sites from embedding pages from this
# site as frames. This defends against clickjacking attacks.
# Requires mod_headers to be enabled.
#
#Header set X-Frame-Options: "sameorigin"


# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/conf-available/serve-cgi-bin.conf
================================================================================

<IfModule mod_alias.c>
	<IfModule mod_cgi.c>
		Define ENABLE_USR_LIB_CGI_BIN
	</IfModule>

	<IfModule mod_cgid.c>
		Define ENABLE_USR_LIB_CGI_BIN
	</IfModule>

	<IfDefine ENABLE_USR_LIB_CGI_BIN>
		ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
		<Directory "/usr/lib/cgi-bin">
			AllowOverride None
			Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
			Require all granted
		</Directory>
	</IfDefine>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/init_apache.sh
================================================================================

#!/bin/bash
# Check if letsencrypt certificates already exist
if [ ! -d /etc/letsencrypt/live ] || [ ! "$(ls -A /etc/letsencrypt)" ]; then
    certbot --apache --agree-tos -m ${WEBMASTER_MAIL} -d ${DOMAINS} --no-redirect --non-interactive
fi

# Check if letsencrypt certificates still don't exist (TODO: implement functions)
if [ -d /etc/letsencrypt/live ] && [ "$(ls -A /etc/letsencrypt)" ]; then
    rm /etc/apache2/sites-enabled/proxy-no-ssl*.conf
    a2ensite proxy-rewrite proxy-ssl
fi

service apache2 stop

echo "Starting apache server."
apachectl -D FOREGROUND


================================================================================

File: Apache/conf/mods-available/access_compat.load
================================================================================

# Depends: authn_core
LoadModule access_compat_module /usr/lib/apache2/modules/mod_access_compat.so



================================================================================

File: Apache/conf/mods-available/actions.conf
================================================================================

# a2enmod-note: needs-configuration

#
# Action lets you define media types that will execute a script whenever
# a matching file is called. This eliminates the need for repeated URL
# pathnames for oft-used CGI file processors.
# Format: Action media/type /cgi-script/location
# Format: Action handler-name /cgi-script/location
#

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/actions.load
================================================================================

LoadModule actions_module /usr/lib/apache2/modules/mod_actions.so



================================================================================

File: Apache/conf/mods-available/alias.conf
================================================================================

<IfModule alias_module>
	# Aliases: Add here as many aliases as you need (with no limit). The format is
	# Alias fakename realname
	#
	# Note that if you include a trailing / on fakename then the server will
	# require it to be present in the URL.  So "/icons" isn't aliased in this
	# example, only "/icons/".  If the fakename is slash-terminated, then the
	# realname must also be slash terminated, and if the fakename omits the
	# trailing slash, the realname must also omit it.
	#
	# We include the /icons/ alias for FancyIndexed directory listings.  If
	# you do not use FancyIndexing, you may comment this out.

	Alias /icons/ "/usr/share/apache2/icons/"

	<Directory "/usr/share/apache2/icons">
		Options FollowSymlinks
		AllowOverride None
		Require all granted
	</Directory>

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/alias.load
================================================================================

LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so



================================================================================

File: Apache/conf/mods-available/allowmethods.load
================================================================================

LoadModule allowmethods_module /usr/lib/apache2/modules/mod_allowmethods.so



================================================================================

File: Apache/conf/mods-available/asis.load
================================================================================

# Depends: mime
LoadModule asis_module /usr/lib/apache2/modules/mod_asis.so



================================================================================

File: Apache/conf/mods-available/authnz_fcgi.load
================================================================================

LoadModule authnz_fcgi_module /usr/lib/apache2/modules/mod_authnz_fcgi.so



================================================================================

File: Apache/conf/mods-available/authnz_ldap.load
================================================================================

# Depends: ldap
LoadModule authnz_ldap_module /usr/lib/apache2/modules/mod_authnz_ldap.so



================================================================================

File: Apache/conf/mods-available/authn_anon.load
================================================================================

LoadModule authn_anon_module /usr/lib/apache2/modules/mod_authn_anon.so



================================================================================

File: Apache/conf/mods-available/authn_core.load
================================================================================

LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so



================================================================================

File: Apache/conf/mods-available/authn_dbd.load
================================================================================

# Depends: dbd
LoadModule authn_dbd_module /usr/lib/apache2/modules/mod_authn_dbd.so



================================================================================

File: Apache/conf/mods-available/authn_dbm.load
================================================================================

LoadModule authn_dbm_module /usr/lib/apache2/modules/mod_authn_dbm.so



================================================================================

File: Apache/conf/mods-available/authn_file.load
================================================================================

LoadModule authn_file_module /usr/lib/apache2/modules/mod_authn_file.so



================================================================================

File: Apache/conf/mods-available/authn_socache.load
================================================================================

LoadModule authn_socache_module /usr/lib/apache2/modules/mod_authn_socache.so



================================================================================

File: Apache/conf/mods-available/authz_core.load
================================================================================

LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so



================================================================================

File: Apache/conf/mods-available/authz_dbd.load
================================================================================

# Depends: dbd authz_core
LoadModule authz_dbd_module /usr/lib/apache2/modules/mod_authz_dbd.so



================================================================================

File: Apache/conf/mods-available/authz_dbm.load
================================================================================

# Depends: authz_core
LoadModule authz_dbm_module /usr/lib/apache2/modules/mod_authz_dbm.so



================================================================================

File: Apache/conf/mods-available/authz_groupfile.load
================================================================================

# Depends: authz_core
LoadModule authz_groupfile_module /usr/lib/apache2/modules/mod_authz_groupfile.so



================================================================================

File: Apache/conf/mods-available/authz_host.load
================================================================================

# Depends: authz_core
LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so



================================================================================

File: Apache/conf/mods-available/authz_owner.load
================================================================================

LoadModule authz_owner_module /usr/lib/apache2/modules/mod_authz_owner.so



================================================================================

File: Apache/conf/mods-available/authz_user.load
================================================================================

# Depends: authz_core
LoadModule authz_user_module /usr/lib/apache2/modules/mod_authz_user.so



================================================================================

File: Apache/conf/mods-available/auth_basic.load
================================================================================

# Depends: authn_core
LoadModule auth_basic_module /usr/lib/apache2/modules/mod_auth_basic.so



================================================================================

File: Apache/conf/mods-available/auth_digest.load
================================================================================

# Depends: authn_core
LoadModule auth_digest_module /usr/lib/apache2/modules/mod_auth_digest.so



================================================================================

File: Apache/conf/mods-available/auth_form.load
================================================================================

# Depends: session authn_core
LoadModule auth_form_module /usr/lib/apache2/modules/mod_auth_form.so



================================================================================

File: Apache/conf/mods-available/autoindex.conf
================================================================================

<IfModule mod_autoindex.c>
	# Directives controlling the display of server-generated directory listings.

	#
	# IndexOptions: Controls the appearance of server-generated directory
	# listings.
	# Remove/replace the "Charset=UTF-8" if you don't use UTF-8 for your filenames.
	IndexOptions FancyIndexing VersionSort HTMLTable NameWidth=* DescriptionWidth=* Charset=UTF-8

	#
	# AddIcon* directives tell the server which icon to show for different
	# files or filename extensions.  These are only displayed for
	# FancyIndexed directories.
	AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip x-bzip2

	AddIconByType (TXT,/icons/text.gif) text/*
	AddIconByType (IMG,/icons/image2.gif) image/*
	AddIconByType (SND,/icons/sound2.gif) audio/*
	AddIconByType (VID,/icons/movie.gif) video/*

	AddIcon /icons/binary.gif .bin .exe
	AddIcon /icons/binhex.gif .hqx
	AddIcon /icons/tar.gif .tar
	AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
	AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
	AddIcon /icons/a.gif .ps .ai .eps
	AddIcon /icons/layout.gif .html .shtml .htm .pdf
	AddIcon /icons/text.gif .txt
	AddIcon /icons/c.gif .c
	AddIcon /icons/p.gif .pl .py
	AddIcon /icons/f.gif .for
	AddIcon /icons/dvi.gif .dvi
	AddIcon /icons/uuencoded.gif .uu
	AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
	AddIcon /icons/tex.gif .tex
	# It's a suffix rule, so simply matching "core" matches "score" as well !
	AddIcon /icons/bomb.gif /core
	AddIcon (SND,/icons/sound2.gif) .ogg
	AddIcon (VID,/icons/movie.gif) .ogm

	AddIcon /icons/back.gif ..
	AddIcon /icons/hand.right.gif README
	AddIcon /icons/folder.gif ^^DIRECTORY^^
	AddIcon /icons/blank.gif ^^BLANKICON^^

	# Default icons for OpenDocument format
	AddIcon /icons/odf6odt-20x22.png .odt
	AddIcon /icons/odf6ods-20x22.png .ods
	AddIcon /icons/odf6odp-20x22.png .odp
	AddIcon /icons/odf6odg-20x22.png .odg
	AddIcon /icons/odf6odc-20x22.png .odc
	AddIcon /icons/odf6odf-20x22.png .odf
	AddIcon /icons/odf6odb-20x22.png .odb
	AddIcon /icons/odf6odi-20x22.png .odi
	AddIcon /icons/odf6odm-20x22.png .odm

	AddIcon /icons/odf6ott-20x22.png .ott
	AddIcon /icons/odf6ots-20x22.png .ots
	AddIcon /icons/odf6otp-20x22.png .otp
	AddIcon /icons/odf6otg-20x22.png .otg
	AddIcon /icons/odf6otc-20x22.png .otc
	AddIcon /icons/odf6otf-20x22.png .otf
	AddIcon /icons/odf6oti-20x22.png .oti
	AddIcon /icons/odf6oth-20x22.png .oth

	#
	# DefaultIcon is which icon to show for files which do not have an icon
	# explicitly set.
	DefaultIcon /icons/unknown.gif

	#
	# AddDescription allows you to place a short description after a file in
	# server-generated indexes.  These are only displayed for FancyIndexed
	# directories.
	# Format: AddDescription "description" filename
	#AddDescription "GZIP compressed document" .gz
	#AddDescription "tar archive" .tar
	#AddDescription "GZIP compressed tar archive" .tgz

	#
	# ReadmeName is the name of the README file the server will look for by
	# default, and append to directory listings.
	#
	# HeaderName is the name of a file which should be prepended to
	# directory indexes
	ReadmeName README.html
	HeaderName HEADER.html

	#
	# IndexIgnore is a set of filenames which directory indexing should ignore
	# and not include in the listing.  Shell-style wildcarding is permitted.
	IndexIgnore .??* *~ *# RCS CVS *,v *,t

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/autoindex.load
================================================================================

LoadModule autoindex_module /usr/lib/apache2/modules/mod_autoindex.so



================================================================================

File: Apache/conf/mods-available/buffer.load
================================================================================

LoadModule buffer_module /usr/lib/apache2/modules/mod_buffer.so



================================================================================

File: Apache/conf/mods-available/cache.load
================================================================================

LoadModule cache_module /usr/lib/apache2/modules/mod_cache.so



================================================================================

File: Apache/conf/mods-available/cache_disk.conf
================================================================================

<IfModule mod_cache_disk.c>

	# cache cleaning is done by htcacheclean, which can be configured in
	# /etc/default/apache2
	#
	# For further information, see the comments in that file,
	# /usr/share/doc/apache2/README.Debian, and the htcacheclean(8)
	# man page.

	# This path must be the same as the one in /etc/default/apache2
	CacheRoot /var/cache/apache2/mod_cache_disk

	# This will also cache local documents. It usually makes more sense to
	# put this into the configuration for just one virtual host.
	#CacheEnable disk /


    # The result of CacheDirLevels * CacheDirLength must not be higher than
    # 20. Moreover, pay attention on file system limits. Some file systems
    # do not support more than a certain number of inodes and
    # subdirectories (e.g. 32000 for ext3)
    CacheDirLevels 2
    CacheDirLength 1

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/cache_disk.load
================================================================================

# Depends: cache
LoadModule cache_disk_module /usr/lib/apache2/modules/mod_cache_disk.so



================================================================================

File: Apache/conf/mods-available/cache_socache.load
================================================================================

# Depends: cache
LoadModule cache_socache_module /usr/lib/apache2/modules/mod_cache_socache.so



================================================================================

File: Apache/conf/mods-available/cern_meta.load
================================================================================

LoadModule cern_meta_module /usr/lib/apache2/modules/mod_cern_meta.so



================================================================================

File: Apache/conf/mods-available/cgi.load
================================================================================

LoadModule cgi_module /usr/lib/apache2/modules/mod_cgi.so



================================================================================

File: Apache/conf/mods-available/cgid.conf
================================================================================

# Socket for cgid communication
ScriptSock ${APACHE_RUN_DIR}/cgisock

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/cgid.load
================================================================================

LoadModule cgid_module /usr/lib/apache2/modules/mod_cgid.so



================================================================================

File: Apache/conf/mods-available/charset_lite.load
================================================================================

LoadModule charset_lite_module /usr/lib/apache2/modules/mod_charset_lite.so



================================================================================

File: Apache/conf/mods-available/data.load
================================================================================

LoadModule data_module /usr/lib/apache2/modules/mod_data.so



================================================================================

File: Apache/conf/mods-available/dav.load
================================================================================

LoadModule dav_module /usr/lib/apache2/modules/mod_dav.so



================================================================================

File: Apache/conf/mods-available/dav_fs.conf
================================================================================

DAVLockDB ${APACHE_LOCK_DIR}/DAVLock

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/dav_fs.load
================================================================================

# Depends: dav
LoadModule dav_fs_module /usr/lib/apache2/modules/mod_dav_fs.so



================================================================================

File: Apache/conf/mods-available/dav_lock.load
================================================================================

LoadModule dav_lock_module /usr/lib/apache2/modules/mod_dav_lock.so



================================================================================

File: Apache/conf/mods-available/dbd.load
================================================================================

LoadModule dbd_module /usr/lib/apache2/modules/mod_dbd.so



================================================================================

File: Apache/conf/mods-available/deflate.conf
================================================================================

<IfModule mod_deflate.c>
	<IfModule mod_filter.c>
		AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css
		AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/ecmascript
		AddOutputFilterByType DEFLATE application/rss+xml
		AddOutputFilterByType DEFLATE application/xml
	</IfModule>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/deflate.load
================================================================================

# Depends: filter
LoadModule deflate_module /usr/lib/apache2/modules/mod_deflate.so



================================================================================

File: Apache/conf/mods-available/dialup.load
================================================================================

LoadModule dialup_module /usr/lib/apache2/modules/mod_dialup.so



================================================================================

File: Apache/conf/mods-available/dir.conf
================================================================================

<IfModule mod_dir.c>
	DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/dir.load
================================================================================

LoadModule dir_module /usr/lib/apache2/modules/mod_dir.so



================================================================================

File: Apache/conf/mods-available/dump_io.load
================================================================================

LoadModule dumpio_module /usr/lib/apache2/modules/mod_dumpio.so



================================================================================

File: Apache/conf/mods-available/echo.load
================================================================================

LoadModule echo_module /usr/lib/apache2/modules/mod_echo.so



================================================================================

File: Apache/conf/mods-available/env.load
================================================================================

LoadModule env_module /usr/lib/apache2/modules/mod_env.so



================================================================================

File: Apache/conf/mods-available/expires.load
================================================================================

LoadModule expires_module /usr/lib/apache2/modules/mod_expires.so



================================================================================

File: Apache/conf/mods-available/ext_filter.load
================================================================================

LoadModule ext_filter_module /usr/lib/apache2/modules/mod_ext_filter.so



================================================================================

File: Apache/conf/mods-available/file_cache.load
================================================================================

# Depends: cache
LoadModule file_cache_module /usr/lib/apache2/modules/mod_file_cache.so



================================================================================

File: Apache/conf/mods-available/filter.load
================================================================================

LoadModule filter_module /usr/lib/apache2/modules/mod_filter.so



================================================================================

File: Apache/conf/mods-available/headers.load
================================================================================

LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so



================================================================================

File: Apache/conf/mods-available/heartbeat.load
================================================================================

# This module depends on mod_watchdog to be loaded before. In Debian, this
# module is statically linked.
LoadModule heartbeat_module /usr/lib/apache2/modules/mod_heartbeat.so



================================================================================

File: Apache/conf/mods-available/heartmonitor.load
================================================================================

# This module depends on mod_watchdog to be loaded before. In Debian, this
# module is statically linked.
LoadModule heartmonitor_module /usr/lib/apache2/modules/mod_heartmonitor.so



================================================================================

File: Apache/conf/mods-available/http2.load
================================================================================

LoadModule http2_module /usr/lib/apache2/modules/mod_http2.so



================================================================================

File: Apache/conf/mods-available/ident.load
================================================================================

LoadModule ident_module /usr/lib/apache2/modules/mod_ident.so



================================================================================

File: Apache/conf/mods-available/imagemap.load
================================================================================

LoadModule imagemap_module /usr/lib/apache2/modules/mod_imagemap.so



================================================================================

File: Apache/conf/mods-available/include.load
================================================================================

# Depends: mime
LoadModule include_module /usr/lib/apache2/modules/mod_include.so



================================================================================

File: Apache/conf/mods-available/info.conf
================================================================================

<IfModule mod_info.c>

	# Allow remote server configuration reports, with the URL of
	#  http://servername/server-info (requires that mod_info.c be loaded).
	# Uncomment and change the "192.0.2.0/24" to allow access from other hosts.
	#
	<Location /server-info>
		SetHandler server-info
		Require local
		#Require ip 192.0.2.0/24
	</Location>

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/info.load
================================================================================

LoadModule info_module /usr/lib/apache2/modules/mod_info.so



================================================================================

File: Apache/conf/mods-available/lbmethod_bybusyness.load
================================================================================

# Depends: proxy_balancer
LoadModule lbmethod_bybusyness_module /usr/lib/apache2/modules/mod_lbmethod_bybusyness.so



================================================================================

File: Apache/conf/mods-available/lbmethod_byrequests.load
================================================================================

# Depends: proxy_balancer
LoadModule lbmethod_byrequests_module /usr/lib/apache2/modules/mod_lbmethod_byrequests.so



================================================================================

File: Apache/conf/mods-available/lbmethod_bytraffic.load
================================================================================

# Depends: proxy_balancer
LoadModule lbmethod_bytraffic_module /usr/lib/apache2/modules/mod_lbmethod_bytraffic.so



================================================================================

File: Apache/conf/mods-available/lbmethod_heartbeat.load
================================================================================

# Depends: proxy_balancer
LoadModule lbmethod_heartbeat_module /usr/lib/apache2/modules/mod_lbmethod_heartbeat.so



================================================================================

File: Apache/conf/mods-available/ldap.conf
================================================================================

<Location /ldap-status>
	SetHandler ldap-status
	Require local
</Location>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/ldap.load
================================================================================

LoadModule ldap_module /usr/lib/apache2/modules/mod_ldap.so



================================================================================

File: Apache/conf/mods-available/log_debug.load
================================================================================

LoadModule log_debug_module /usr/lib/apache2/modules/mod_log_debug.so



================================================================================

File: Apache/conf/mods-available/log_forensic.load
================================================================================

LoadModule log_forensic_module /usr/lib/apache2/modules/mod_log_forensic.so



================================================================================

File: Apache/conf/mods-available/lua.load
================================================================================

LoadModule lua_module /usr/lib/apache2/modules/mod_lua.so



================================================================================

File: Apache/conf/mods-available/macro.load
================================================================================

LoadModule macro_module /usr/lib/apache2/modules/mod_macro.so



================================================================================

File: Apache/conf/mods-available/mime.conf
================================================================================

<IfModule mod_mime.c>

	#
	# TypesConfig points to the file containing the list of mappings from
	# filename extension to MIME-type.
	#
	TypesConfig /etc/mime.types

	#
	# AddType allows you to add to or override the MIME configuration
	# file mime.types for specific file types.
	#
	#AddType application/x-gzip .tgz
	#
	# AddEncoding allows you to have certain browsers uncompress
	# information on the fly. Note: Not all browsers support this.
	# Despite the name similarity, the following Add* directives have
	# nothing to do with the FancyIndexing customization directives above.
	#
	#AddEncoding x-compress .Z
	#AddEncoding x-gzip .gz .tgz
	#AddEncoding x-bzip2 .bz2
	#
	# If the AddEncoding directives above are commented-out, then you
	# probably should define those extensions to indicate media types:
	#
	AddType application/x-compress .Z
	AddType application/x-gzip .gz .tgz
	AddType application/x-bzip2 .bz2

	#
	# DefaultLanguage and AddLanguage allows you to specify the language of 
	# a document. You can then use content negotiation to give a browser a 
	# file in a language the user can understand.
	#
	# Specify a default language. This means that all data
	# going out without a specific language tag (see below) will 
	# be marked with this one. You probably do NOT want to set
	# this unless you are sure it is correct for all cases.
	#
	# * It is generally better to not mark a page as 
	# * being a certain language than marking it with the wrong
	# * language!
	#
	# DefaultLanguage nl
	#
	# Note 1: The suffix does not have to be the same as the language
	# keyword --- those with documents in Polish (whose net-standard
	# language code is pl) may wish to use "AddLanguage pl .po" to
	# avoid the ambiguity with the common suffix for perl scripts.
	#
	# Note 2: The example entries below illustrate that in some cases 
	# the two character 'Language' abbreviation is not identical to 
	# the two character 'Country' code for its country,
	# E.g. 'Danmark/dk' versus 'Danish/da'.
	#
	# Note 3: In the case of 'ltz' we violate the RFC by using a three char
	# specifier. There is 'work in progress' to fix this and get
	# the reference data for rfc1766 cleaned up.
	#
	# Catalan (ca) - Croatian (hr) - Czech (cs) - Danish (da) - Dutch (nl)
	# English (en) - Esperanto (eo) - Estonian (et) - French (fr) - German (de)
	# Greek-Modern (el) - Hebrew (he) - Italian (it) - Japanese (ja)
	# Korean (ko) - Luxembourgeois* (ltz) - Norwegian Nynorsk (nn)
	# Norwegian (no) - Polish (pl) - Portugese (pt)
	# Brazilian Portuguese (pt-BR) - Russian (ru) - Swedish (sv)
	# Simplified Chinese (zh-CN) - Spanish (es) - Traditional Chinese (zh-TW)
	#
	AddLanguage am .amh
	AddLanguage ar .ara
	AddLanguage be .be
	AddLanguage bg .bg
	AddLanguage bn .bn
	AddLanguage br .br
	AddLanguage bs .bs
	AddLanguage ca .ca
	AddLanguage cs .cz .cs
	AddLanguage cy .cy
	AddLanguage da .dk
	AddLanguage de .de
	AddLanguage dz .dz
	AddLanguage el .el
	AddLanguage en .en
	AddLanguage eo .eo
	# es is ecmascript in /etc/mime.types
	RemoveType  es
	AddLanguage es .es
	AddLanguage et .et
	AddLanguage eu .eu
	AddLanguage fa .fa
	AddLanguage fi .fi
	AddLanguage fr .fr
	AddLanguage ga .ga
	AddLanguage gl .glg
	AddLanguage gu .gu
	AddLanguage he .he
	AddLanguage hi .hi
	AddLanguage hr .hr
	AddLanguage hu .hu
	AddLanguage hy .hy
	AddLanguage id .id
	AddLanguage is .is
	AddLanguage it .it
	AddLanguage ja .ja
	AddLanguage ka .ka
	AddLanguage kk .kk
	AddLanguage km .km
	AddLanguage kn .kn
	AddLanguage ko .ko
	AddLanguage ku .ku
	AddLanguage lo .lo
	AddLanguage lt .lt
	AddLanguage ltz .ltz
	AddLanguage lv .lv
	AddLanguage mg .mg
	AddLanguage mk .mk
	AddLanguage ml .ml
	AddLanguage mr .mr
	AddLanguage ms .msa
	AddLanguage nb .nob
	AddLanguage ne .ne
	AddLanguage nl .nl
	AddLanguage nn .nn
	AddLanguage no .no
	AddLanguage pa .pa
	AddLanguage pl .po
	AddLanguage pt-BR .pt-br
	AddLanguage pt .pt
	AddLanguage ro .ro
	AddLanguage ru .ru
	AddLanguage sa .sa
	AddLanguage se .se
	AddLanguage si .si
	AddLanguage sk .sk
	AddLanguage sl .sl
	AddLanguage sq .sq
	AddLanguage sr .sr
	AddLanguage sv .sv
	AddLanguage ta .ta
	AddLanguage te .te
	AddLanguage th .th
	AddLanguage tl .tl
	RemoveType  tr
	# tr is troff in /etc/mime.types
	AddLanguage tr .tr
	AddLanguage uk .uk
	AddLanguage ur .ur
	AddLanguage vi .vi
	AddLanguage wo .wo
	AddLanguage xh .xh
	AddLanguage zh-CN .zh-cn
	AddLanguage zh-TW .zh-tw

	#
	# Commonly used filename extensions to character sets. You probably
	# want to avoid clashes with the language extensions, unless you
	# are good at carefully testing your setup after each change.
	# See http://www.iana.org/assignments/character-sets for the
	# official list of charset names and their respective RFCs.
	#
	AddCharset us-ascii	.ascii .us-ascii
	AddCharset ISO-8859-1  .iso8859-1  .latin1
	AddCharset ISO-8859-2  .iso8859-2  .latin2 .cen
	AddCharset ISO-8859-3  .iso8859-3  .latin3
	AddCharset ISO-8859-4  .iso8859-4  .latin4
	AddCharset ISO-8859-5  .iso8859-5  .cyr .iso-ru
	AddCharset ISO-8859-6  .iso8859-6  .arb .arabic
	AddCharset ISO-8859-7  .iso8859-7  .grk .greek
	AddCharset ISO-8859-8  .iso8859-8  .heb .hebrew
	AddCharset ISO-8859-9  .iso8859-9  .latin5 .trk
	AddCharset ISO-8859-10  .iso8859-10  .latin6
	AddCharset ISO-8859-13  .iso8859-13
	AddCharset ISO-8859-14  .iso8859-14  .latin8
	AddCharset ISO-8859-15  .iso8859-15  .latin9
	AddCharset ISO-8859-16  .iso8859-16  .latin10
	AddCharset ISO-2022-JP .iso2022-jp .jis
	AddCharset ISO-2022-KR .iso2022-kr .kis
	AddCharset ISO-2022-CN .iso2022-cn .cis
	AddCharset Big5		.Big5	   .big5 .b5
	AddCharset cn-Big5	 .cn-big5
	# For russian, more than one charset is used (depends on client, mostly):
	AddCharset WINDOWS-1251 .cp-1251   .win-1251
	AddCharset CP866	   .cp866
	AddCharset KOI8	  .koi8
	AddCharset KOI8-E	  .koi8-e
	AddCharset KOI8-r	  .koi8-r .koi8-ru
	AddCharset KOI8-U	  .koi8-u
	AddCharset KOI8-ru	 .koi8-uk .ua
	AddCharset ISO-10646-UCS-2 .ucs2
	AddCharset ISO-10646-UCS-4 .ucs4
	AddCharset UTF-7	   .utf7
	AddCharset UTF-8	   .utf8
	AddCharset UTF-16	  .utf16
	AddCharset UTF-16BE	.utf16be
	AddCharset UTF-16LE	.utf16le
	AddCharset UTF-32	  .utf32
	AddCharset UTF-32BE	.utf32be
	AddCharset UTF-32LE	.utf32le
	AddCharset euc-cn	  .euc-cn
	AddCharset euc-gb	  .euc-gb
	AddCharset euc-jp	  .euc-jp
	AddCharset euc-kr	  .euc-kr
	#Not sure how euc-tw got in - IANA doesn't list it???
	AddCharset EUC-TW	  .euc-tw
	AddCharset gb2312	  .gb2312 .gb
	AddCharset iso-10646-ucs-2 .ucs-2 .iso-10646-ucs-2
	AddCharset iso-10646-ucs-4 .ucs-4 .iso-10646-ucs-4
	AddCharset shift_jis   .shift_jis .sjis
	AddCharset BRF		 .brf

	#
	# AddHandler allows you to map certain file extensions to "handlers":
	# actions unrelated to filetype. These can be either built into the server
	# or added with the Action directive (see below)
	#
	# To use CGI scripts outside of ScriptAliased directories:
	# (You will also need to add "ExecCGI" to the "Options" directive.)
	#
	#AddHandler cgi-script .cgi

	#
	# For files that include their own HTTP headers:
	#
	#AddHandler send-as-is asis

	#
	# For server-parsed imagemap files:
	#
	#AddHandler imap-file map

	#
	# For type maps (negotiated resources):
	# (This is enabled by default to allow the Apache "It Worked" page
	#  to be distributed in multiple languages.)
	#
	AddHandler type-map var

	#
	# Filters allow you to process content before it is sent to the client.
	#
	# To parse .shtml files for server-side includes (SSI):
	# (You will also need to add "Includes" to the "Options" directive.)
	#
	AddType text/html .shtml
<IfModule mod_include.c>
	AddOutputFilter INCLUDES .shtml
</IfModule>

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/mime.load
================================================================================

LoadModule mime_module /usr/lib/apache2/modules/mod_mime.so



================================================================================

File: Apache/conf/mods-available/mime_magic.conf
================================================================================

<IfModule mod_mime_magic.c>
	MIMEMagicFile /etc/apache2/magic
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/mime_magic.load
================================================================================

LoadModule mime_magic_module /usr/lib/apache2/modules/mod_mime_magic.so



================================================================================

File: Apache/conf/mods-available/mpm_event.conf
================================================================================

# event MPM
# StartServers: initial number of server processes to start
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadsPerChild: constant number of worker threads in each server process
# MaxRequestWorkers: maximum number of worker threads
# MaxConnectionsPerChild: maximum number of requests a server process serves
<IfModule mpm_event_module>
	StartServers			 2
	MinSpareThreads		 25
	MaxSpareThreads		 75
	ThreadLimit			 64
	ThreadsPerChild		 25
	MaxRequestWorkers	  150
	MaxConnectionsPerChild   0
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/mpm_event.load
================================================================================

# Conflicts: mpm_worker mpm_prefork
LoadModule mpm_event_module /usr/lib/apache2/modules/mod_mpm_event.so



================================================================================

File: Apache/conf/mods-available/mpm_prefork.conf
================================================================================

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# MaxRequestWorkers: maximum number of server processes allowed to start
# MaxConnectionsPerChild: maximum number of requests a server process serves

<IfModule mpm_prefork_module>
	StartServers			 5
	MinSpareServers		  5
	MaxSpareServers		 10
	MaxRequestWorkers	  150
	MaxConnectionsPerChild   0
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/mpm_prefork.load
================================================================================

# Conflicts: mpm_event mpm_worker
LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so



================================================================================

File: Apache/conf/mods-available/mpm_worker.conf
================================================================================

# worker MPM
# StartServers: initial number of server processes to start
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadLimit: ThreadsPerChild can be changed to this maximum value during a
#			  graceful restart. ThreadLimit can only be changed by stopping
#			  and starting Apache.
# ThreadsPerChild: constant number of worker threads in each server process
# MaxRequestWorkers: maximum number of threads
# MaxConnectionsPerChild: maximum number of requests a server process serves

<IfModule mpm_worker_module>
	StartServers			 2
	MinSpareThreads		 25
	MaxSpareThreads		 75
	ThreadLimit			 64
	ThreadsPerChild		 25
	MaxRequestWorkers	  150
	MaxConnectionsPerChild   0
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/mpm_worker.load
================================================================================

# Conflicts: mpm_event mpm_prefork
LoadModule mpm_worker_module /usr/lib/apache2/modules/mod_mpm_worker.so



================================================================================

File: Apache/conf/mods-available/negotiation.conf
================================================================================

<IfModule mod_negotiation.c>

	# LanguagePriority allows you to give precedence to some languages
	# in case of a tie during content negotiation.
	#
	# Just list the languages in decreasing order of preference. We have
	# more or less alphabetized them here. You probably want to change this.
	#
	LanguagePriority en ca cs da de el eo es et fr he hr it ja ko ltz nl nn no pl pt pt-BR ru sv tr zh-CN zh-TW

	#
	# ForceLanguagePriority allows you to serve a result page rather than
	# MULTIPLE CHOICES (Prefer) [in case of a tie] or NOT ACCEPTABLE (Fallback)
	# [in case no accepted languages matched the available variants]
	#
	ForceLanguagePriority Prefer Fallback

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/negotiation.load
================================================================================

LoadModule negotiation_module /usr/lib/apache2/modules/mod_negotiation.so



================================================================================

File: Apache/conf/mods-available/proxy.conf
================================================================================

<IfModule mod_proxy.c>

	# If you want to use apache2 as a forward proxy, uncomment the
	# 'ProxyRequests On' line and the <Proxy *> block below.
	# WARNING: Be careful to restrict access inside the <Proxy *> block.
	# Open proxy servers are dangerous both to your network and to the
	# Internet at large.
	#
	# If you only want to use apache2 as a reverse proxy/gateway in
	# front of some web application server, you DON'T need
	# 'ProxyRequests On'.

	#ProxyRequests On
	#<Proxy *>
	#   AddDefaultCharset off
	#   Require all denied
	#   #Require local
	#</Proxy>

	# Enable/disable the handling of HTTP/1.1 "Via:" headers.
	# ("Full" adds the server version; "Block" removes all outgoing Via: headers)
	# Set to one of: Off | On | Full | Block
	#ProxyVia Off

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/proxy.load
================================================================================

LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so



================================================================================

File: Apache/conf/mods-available/proxy_ajp.load
================================================================================

# Depends: proxy
LoadModule proxy_ajp_module /usr/lib/apache2/modules/mod_proxy_ajp.so



================================================================================

File: Apache/conf/mods-available/proxy_balancer.conf
================================================================================

<IfModule mod_proxy_balancer.c>

	# Balancer manager enables dynamic update of balancer members
	# (needs mod_status). Uncomment to enable.
	#
	#<IfModule mod_status.c>
	#   <Location /balancer-manager>
	#	   SetHandler balancer-manager
	#	   Require local
	#   </Location>
	#</IfModule>

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/proxy_balancer.load
================================================================================

# Depends: proxy alias slotmem_shm
LoadModule proxy_balancer_module /usr/lib/apache2/modules/mod_proxy_balancer.so



================================================================================

File: Apache/conf/mods-available/proxy_connect.load
================================================================================

# Depends: proxy
LoadModule proxy_connect_module /usr/lib/apache2/modules/mod_proxy_connect.so



================================================================================

File: Apache/conf/mods-available/proxy_express.load
================================================================================

# Depends: proxy
LoadModule proxy_express_module /usr/lib/apache2/modules/mod_proxy_express.so



================================================================================

File: Apache/conf/mods-available/proxy_fcgi.load
================================================================================

# Depends: proxy
LoadModule proxy_fcgi_module /usr/lib/apache2/modules/mod_proxy_fcgi.so



================================================================================

File: Apache/conf/mods-available/proxy_fdpass.load
================================================================================

# Depends: proxy
LoadModule proxy_fdpass_module /usr/lib/apache2/modules/mod_proxy_fdpass.so



================================================================================

File: Apache/conf/mods-available/proxy_ftp.conf
================================================================================

<IfModule mod_proxy_ftp.c>

	# Define the character set for proxied FTP listings. Default is ISO-8859-1
	ProxyFtpDirCharset UTF-8

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/proxy_ftp.load
================================================================================

# Depends: proxy
LoadModule proxy_ftp_module /usr/lib/apache2/modules/mod_proxy_ftp.so



================================================================================

File: Apache/conf/mods-available/proxy_hcheck.load
================================================================================

# Depends: proxy
LoadModule proxy_hcheck_module /usr/lib/apache2/modules/mod_proxy_hcheck.so



================================================================================

File: Apache/conf/mods-available/proxy_html.conf
================================================================================

# Configuration example.
#
# For detailed information about these directives see
# <URL:http://httpd.apache.org/docs/2.4/mod/mod_proxy_html.html>
# and for mod_xml2enc see
# <URL:http://httpd.apache.org/docs/2.4/mod/mod_xml2enc.html>
#

# All knowledge of HTML links has been removed from the mod_proxy_html
# code itself, and is instead read from httpd.conf (or included file)
# at server startup.  So you MUST declare it.  This will normally be
# at top level, but can also be used in a <Location>.
#
# Here's the declaration for W3C HTML 4.01 and XHTML 1.0

ProxyHTMLLinks	a		href
ProxyHTMLLinks	area		href
ProxyHTMLLinks	link		href
ProxyHTMLLinks	img		src longdesc usemap
ProxyHTMLLinks	object		classid codebase data usemap
ProxyHTMLLinks	q		cite
ProxyHTMLLinks	blockquote	cite
ProxyHTMLLinks	ins		cite
ProxyHTMLLinks	del		cite
ProxyHTMLLinks	form		action
ProxyHTMLLinks	input		src usemap
ProxyHTMLLinks	head		profile
ProxyHTMLLinks	base		href
ProxyHTMLLinks	script		src for

# To support scripting events (with ProxyHTMLExtended On),
# you'll need to declare them too.

ProxyHTMLEvents	onclick ondblclick onmousedown onmouseup \
		onmouseover onmousemove onmouseout onkeypress \
		onkeydown onkeyup onfocus onblur onload \
		onunload onsubmit onreset onselect onchange

# If you need to support legacy (pre-1998, aka "transitional") HTML or XHTML,
# you'll need to uncomment the following deprecated link attributes.
# Note that these are enabled in earlier mod_proxy_html versions
#
# ProxyHTMLLinks	frame		src longdesc
# ProxyHTMLLinks	iframe		src longdesc
# ProxyHTMLLinks	body		background
# ProxyHTMLLinks	applet		codebase
#
# If you're dealing with proprietary HTML variants,
# declare your own URL attributes here as required.
#
# ProxyHTMLLinks	myelement	myattr otherattr
#
###########
# EXAMPLE #
###########
#
# To define the URL /my-gateway/ as a gateway to an appserver with address
# http://some.app.intranet/ on a private network, after loading the
# modules and including this configuration file:
#
# ProxyRequests Off  <-- this is an important security setting
# ProxyPass /my-gateway/ http://some.app.intranet/
# <Location /my-gateway/>
#	ProxyPassReverse /
#	ProxyHTMLEnable On
#	ProxyHTMLURLMap http://some.app.intranet/ /my-gateway/
#	ProxyHTMLURLMap / /my-gateway/
# </Location>
#
# Many (though not all) real-life setups are more complex.
#
# See the documentation at
# http://apache.webthing.com/mod_proxy_html/
# and the tutorial at
# http://www.apachetutor.org/admin/reverseproxies



================================================================================

File: Apache/conf/mods-available/proxy_html.load
================================================================================

# Depends: proxy xml2enc
LoadModule proxy_html_module /usr/lib/apache2/modules/mod_proxy_html.so



================================================================================

File: Apache/conf/mods-available/proxy_http.load
================================================================================

# Depends: proxy
LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so



================================================================================

File: Apache/conf/mods-available/proxy_http2.load
================================================================================

# Depends: proxy http2
LoadModule proxy_http2_module /usr/lib/apache2/modules/mod_proxy_http2.so



================================================================================

File: Apache/conf/mods-available/proxy_scgi.load
================================================================================

# Depends: proxy
LoadModule proxy_scgi_module /usr/lib/apache2/modules/mod_proxy_scgi.so



================================================================================

File: Apache/conf/mods-available/proxy_wstunnel.load
================================================================================

# Depends: proxy
LoadModule proxy_wstunnel_module /usr/lib/apache2/modules/mod_proxy_wstunnel.so



================================================================================

File: Apache/conf/mods-available/ratelimit.load
================================================================================

# Depends: env
LoadModule ratelimit_module /usr/lib/apache2/modules/mod_ratelimit.so



================================================================================

File: Apache/conf/mods-available/reflector.load
================================================================================

LoadModule reflector_module /usr/lib/apache2/modules/mod_reflector.so



================================================================================

File: Apache/conf/mods-available/remoteip.load
================================================================================

LoadModule remoteip_module /usr/lib/apache2/modules/mod_remoteip.so



================================================================================

File: Apache/conf/mods-available/reqtimeout.conf
================================================================================

<IfModule reqtimeout_module>

	# mod_reqtimeout limits the time waiting on the client to prevent an
	# attacker from causing a denial of service by opening many connections
	# but not sending requests. This file tries to give a sensible default
	# configuration, but it may be necessary to tune the timeout values to
	# the actual situation. Note that it is also possible to configure
	# mod_reqtimeout per virtual host.


	# Wait max 20 seconds for the first byte of the request line+headers
	# From then, require a minimum data rate of 500 bytes/s, but don't
	# wait longer than 40 seconds in total.
	# Note: Lower timeouts may make sense on non-ssl virtual hosts but can
	# cause problem with ssl enabled virtual hosts: This timeout includes
	# the time a browser may need to fetch the CRL for the certificate. If
	# the CRL server is not reachable, it may take more than 10 seconds
	# until the browser gives up.
	RequestReadTimeout header=20-40,minrate=500

	# Wait max 10 seconds for the first byte of the request body (if any)
	# From then, require a minimum data rate of 500 bytes/s
	RequestReadTimeout body=10,minrate=500

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/reqtimeout.load
================================================================================

LoadModule reqtimeout_module /usr/lib/apache2/modules/mod_reqtimeout.so



================================================================================

File: Apache/conf/mods-available/request.load
================================================================================

LoadModule request_module /usr/lib/apache2/modules/mod_request.so



================================================================================

File: Apache/conf/mods-available/rewrite.load
================================================================================

LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so



================================================================================

File: Apache/conf/mods-available/sed.load
================================================================================

LoadModule sed_module /usr/lib/apache2/modules/mod_sed.so



================================================================================

File: Apache/conf/mods-available/session.load
================================================================================

LoadModule session_module /usr/lib/apache2/modules/mod_session.so



================================================================================

File: Apache/conf/mods-available/session_cookie.load
================================================================================

# Depends: session
LoadModule session_cookie_module /usr/lib/apache2/modules/mod_session_cookie.so



================================================================================

File: Apache/conf/mods-available/session_crypto.load
================================================================================

# Depends: session
LoadModule session_crypto_module /usr/lib/apache2/modules/mod_session_crypto.so



================================================================================

File: Apache/conf/mods-available/session_dbd.load
================================================================================

# Depends: session
LoadModule session_dbd_module /usr/lib/apache2/modules/mod_session_dbd.so



================================================================================

File: Apache/conf/mods-available/setenvif.conf
================================================================================

<IfModule mod_setenvif.c>

	#
	# The following directives modify normal HTTP response behavior to
	# handle known problems with browser implementations.
	#
	BrowserMatch "Mozilla/2" nokeepalive
	BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
	BrowserMatch "RealPlayer 4\.0" force-response-1.0
	BrowserMatch "Java/1\.0" force-response-1.0
	BrowserMatch "JDK/1\.0" force-response-1.0

	#
	# The following directive disables redirects on non-GET requests for
	# a directory that does not include the trailing slash.  This fixes a
	# problem with Microsoft WebFolders which does not appropriately handle
	# redirects for folders with DAV methods.
	# Same deal with Apple's DAV filesystem and Gnome VFS support for DAV.
	#
	BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
	BrowserMatch "MS FrontPage" redirect-carefully
	BrowserMatch "^WebDrive" redirect-carefully
	BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
	BrowserMatch "^gnome-vfs/1.0" redirect-carefully
	BrowserMatch "^gvfs/1" redirect-carefully
	BrowserMatch "^XML Spy" redirect-carefully
	BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully
	BrowserMatch " Konqueror/4" redirect-carefully

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/setenvif.load
================================================================================

LoadModule setenvif_module /usr/lib/apache2/modules/mod_setenvif.so



================================================================================

File: Apache/conf/mods-available/slotmem_plain.load
================================================================================

LoadModule slotmem_plain_module /usr/lib/apache2/modules/mod_slotmem_plain.so



================================================================================

File: Apache/conf/mods-available/slotmem_shm.load
================================================================================

LoadModule slotmem_shm_module /usr/lib/apache2/modules/mod_slotmem_shm.so



================================================================================

File: Apache/conf/mods-available/socache_dbm.load
================================================================================

LoadModule socache_dbm_module /usr/lib/apache2/modules/mod_socache_dbm.so



================================================================================

File: Apache/conf/mods-available/socache_memcache.load
================================================================================

LoadModule socache_memcache_module /usr/lib/apache2/modules/mod_socache_memcache.so



================================================================================

File: Apache/conf/mods-available/socache_shmcb.load
================================================================================

LoadModule socache_shmcb_module /usr/lib/apache2/modules/mod_socache_shmcb.so



================================================================================

File: Apache/conf/mods-available/speling.load
================================================================================

LoadModule speling_module /usr/lib/apache2/modules/mod_speling.so



================================================================================

File: Apache/conf/mods-available/ssl.conf
================================================================================

<IfModule mod_ssl.c>

	# Pseudo Random Number Generator (PRNG):
	# Configure one or more sources to seed the PRNG of the SSL library.
	# The seed data should be of good random quality.
	# WARNING! On some platforms /dev/random blocks if not enough entropy
	# is available. This means you then cannot use the /dev/random device
	# because it would lead to very long connection times (as long as
	# it requires to make more entropy available). But usually those
	# platforms additionally provide a /dev/urandom device which doesn't
	# block. So, if available, use this one instead. Read the mod_ssl User
	# Manual for more details.
	#
	SSLRandomSeed startup builtin
	SSLRandomSeed startup file:/dev/urandom 512
	SSLRandomSeed connect builtin
	SSLRandomSeed connect file:/dev/urandom 512

	##
	##  SSL Global Context
	##
	##  All SSL configuration in this context applies both to
	##  the main server and all SSL-enabled virtual hosts.
	##

	#
	#   Some MIME-types for downloading Certificates and CRLs
	#
	AddType application/x-x509-ca-cert .crt
	AddType application/x-pkcs7-crl	.crl

	#   Pass Phrase Dialog:
	#   Configure the pass phrase gathering process.
	#   The filtering dialog program (`builtin' is a internal
	#   terminal dialog) has to provide the pass phrase on stdout.
	SSLPassPhraseDialog  exec:/usr/share/apache2/ask-for-passphrase

	#   Inter-Process Session Cache:
	#   Configure the SSL Session Cache: First the mechanism 
	#   to use and second the expiring timeout (in seconds).
	#   (The mechanism dbm has known memory leaks and should not be used).
	#SSLSessionCache		 dbm:${APACHE_RUN_DIR}/ssl_scache
	SSLSessionCache		shmcb:${APACHE_RUN_DIR}/ssl_scache(512000)
	SSLSessionCacheTimeout  300

	#   Semaphore:
	#   Configure the path to the mutual exclusion semaphore the
	#   SSL engine uses internally for inter-process synchronization. 
	#   (Disabled by default, the global Mutex directive consolidates by default
	#   this)
	#Mutex file:${APACHE_LOCK_DIR}/ssl_mutex ssl-cache


	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate. See the
	#   ciphers(1) man page from the openssl package for list of all available
	#   options.
	#   Enable only secure ciphers:
	SSLCipherSuite HIGH:!aNULL

	# SSL server cipher order preference:
	# Use server priorities for cipher algorithm choice.
	# Clients may prefer lower grade encryption.  You should enable this
	# option if you want to enforce stronger encryption, and can afford
	# the CPU cost, and did not override SSLCipherSuite in a way that puts
	# insecure ciphers first.
	# Default: Off
	#SSLHonorCipherOrder on

	#   The protocols to enable.
	#   Available values: all, SSLv3, TLSv1, TLSv1.1, TLSv1.2
	#   SSL v2  is no longer supported
	SSLProtocol all -SSLv3

	#   Allow insecure renegotiation with clients which do not yet support the
	#   secure renegotiation protocol. Default: Off
	#SSLInsecureRenegotiation on

	#   Whether to forbid non-SNI clients to access name based virtual hosts.
	#   Default: Off
	#SSLStrictSNIVHostCheck On

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/ssl.load
================================================================================

# Depends: setenvif mime socache_shmcb
LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so



================================================================================

File: Apache/conf/mods-available/status.conf
================================================================================

<IfModule mod_status.c>
	# Allow server status reports generated by mod_status,
	# with the URL of http://servername/server-status
	# Uncomment and change the "192.0.2.0/24" to allow access from other hosts.

	<Location /server-status>
		SetHandler server-status
		Require local
		#Require ip 192.0.2.0/24
	</Location>

	# Keep track of extended status information for each request
	ExtendedStatus On

	# Determine if mod_status displays the first 63 characters of a request or
	# the last 63, assuming the request itself is greater than 63 chars.
	# Default: Off
	#SeeRequestTail On


	<IfModule mod_proxy.c>
		# Show Proxy LoadBalancer status in mod_status
		ProxyStatus On
	</IfModule>


</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/status.load
================================================================================

LoadModule status_module /usr/lib/apache2/modules/mod_status.so



================================================================================

File: Apache/conf/mods-available/substitute.load
================================================================================

LoadModule substitute_module /usr/lib/apache2/modules/mod_substitute.so



================================================================================

File: Apache/conf/mods-available/suexec.load
================================================================================

LoadModule suexec_module /usr/lib/apache2/modules/mod_suexec.so



================================================================================

File: Apache/conf/mods-available/unique_id.load
================================================================================

LoadModule unique_id_module /usr/lib/apache2/modules/mod_unique_id.so



================================================================================

File: Apache/conf/mods-available/userdir.conf
================================================================================

<IfModule mod_userdir.c>
	UserDir public_html
	UserDir disabled root

	<Directory /home/*/public_html>
		AllowOverride FileInfo AuthConfig Limit Indexes
		Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
		Require method GET POST OPTIONS
	</Directory>
</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-available/userdir.load
================================================================================

LoadModule userdir_module /usr/lib/apache2/modules/mod_userdir.so



================================================================================

File: Apache/conf/mods-available/usertrack.load
================================================================================

LoadModule usertrack_module /usr/lib/apache2/modules/mod_usertrack.so



================================================================================

File: Apache/conf/mods-available/vhost_alias.load
================================================================================

LoadModule vhost_alias_module /usr/lib/apache2/modules/mod_vhost_alias.so



================================================================================

File: Apache/conf/mods-available/xml2enc.load
================================================================================

LoadModule xml2enc_module /usr/lib/apache2/modules/mod_xml2enc.so



================================================================================

File: Apache/conf/mods-enabled/headers.load
================================================================================

LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so



================================================================================

File: Apache/conf/mods-enabled/http2.load
================================================================================

LoadModule http2_module /usr/lib/apache2/modules/mod_http2.so



================================================================================

File: Apache/conf/mods-enabled/proxy.load
================================================================================

LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so



================================================================================

File: Apache/conf/mods-enabled/proxy_http.load
================================================================================

# Depends: proxy
LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so



================================================================================

File: Apache/conf/mods-enabled/rewrite.load
================================================================================

LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so



================================================================================

File: Apache/conf/mods-enabled/socache_shmcb.load
================================================================================

LoadModule socache_shmcb_module /usr/lib/apache2/modules/mod_socache_shmcb.so



================================================================================

File: Apache/conf/mods-enabled/ssl.conf
================================================================================

<IfModule mod_ssl.c>

	# Pseudo Random Number Generator (PRNG):
	# Configure one or more sources to seed the PRNG of the SSL library.
	# The seed data should be of good random quality.
	# WARNING! On some platforms /dev/random blocks if not enough entropy
	# is available. This means you then cannot use the /dev/random device
	# because it would lead to very long connection times (as long as
	# it requires to make more entropy available). But usually those
	# platforms additionally provide a /dev/urandom device which doesn't
	# block. So, if available, use this one instead. Read the mod_ssl User
	# Manual for more details.
	#
	SSLRandomSeed startup builtin
	SSLRandomSeed startup file:/dev/urandom 512
	SSLRandomSeed connect builtin
	SSLRandomSeed connect file:/dev/urandom 512

	##
	##  SSL Global Context
	##
	##  All SSL configuration in this context applies both to
	##  the main server and all SSL-enabled virtual hosts.
	##

	#
	#   Some MIME-types for downloading Certificates and CRLs
	#
	AddType application/x-x509-ca-cert .crt
	AddType application/x-pkcs7-crl	.crl

	#   Pass Phrase Dialog:
	#   Configure the pass phrase gathering process.
	#   The filtering dialog program (`builtin' is a internal
	#   terminal dialog) has to provide the pass phrase on stdout.
	SSLPassPhraseDialog  exec:/usr/share/apache2/ask-for-passphrase

	#   Inter-Process Session Cache:
	#   Configure the SSL Session Cache: First the mechanism 
	#   to use and second the expiring timeout (in seconds).
	#   (The mechanism dbm has known memory leaks and should not be used).
	#SSLSessionCache		 dbm:${APACHE_RUN_DIR}/ssl_scache
	SSLSessionCache		shmcb:${APACHE_RUN_DIR}/ssl_scache(512000)
	SSLSessionCacheTimeout  300

	#   Semaphore:
	#   Configure the path to the mutual exclusion semaphore the
	#   SSL engine uses internally for inter-process synchronization. 
	#   (Disabled by default, the global Mutex directive consolidates by default
	#   this)
	#Mutex file:${APACHE_LOCK_DIR}/ssl_mutex ssl-cache


	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate. See the
	#   ciphers(1) man page from the openssl package for list of all available
	#   options.
	#   Enable only secure ciphers:
	SSLCipherSuite HIGH:!aNULL

	# SSL server cipher order preference:
	# Use server priorities for cipher algorithm choice.
	# Clients may prefer lower grade encryption.  You should enable this
	# option if you want to enforce stronger encryption, and can afford
	# the CPU cost, and did not override SSLCipherSuite in a way that puts
	# insecure ciphers first.
	# Default: Off
	#SSLHonorCipherOrder on

	#   The protocols to enable.
	#   Available values: all, SSLv3, TLSv1, TLSv1.1, TLSv1.2
	#   SSL v2  is no longer supported
	SSLProtocol all -SSLv3

	#   Allow insecure renegotiation with clients which do not yet support the
	#   secure renegotiation protocol. Default: Off
	#SSLInsecureRenegotiation on

	#   Whether to forbid non-SNI clients to access name based virtual hosts.
	#   Default: Off
	#SSLStrictSNIVHostCheck On

</IfModule>

# vim: syntax=apache ts=4 sw=4 sts=4 sr noet



================================================================================

File: Apache/conf/mods-enabled/ssl.load
================================================================================

# Depends: setenvif mime socache_shmcb
LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so



================================================================================

File: Apache/conf/sites-available/proxy-rewrite.conf
================================================================================

<VirtualHost *:80>
    ServerName redundo.net
    ServerAlias www.redundo.net
    ServerAdmin ap007@aquinas.edu

    ProxyPass /api/ http://redundo-dotnet-app:5000/api/

    ProxyPass / http://redundo-nuxt-app:3000/

    ErrorLog ${APACHE_LOG_DIR}/redundo-website-error.log
    CustomLog ${APACHE_LOG_DIR}/redundo-website-access.log combined
    
    RewriteEngine on
    RewriteCond %{SERVER_NAME} =www.redundo.net [OR]
    RewriteCond %{SERVER_NAME} =redundo.net
    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>



================================================================================

File: Apache/conf/sites-available/proxy-ssl.conf
================================================================================

<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName redundo.net
    ServerAlias www.redundo.net
    ServerAdmin ap007@aquinas.edu

    Protocols h2 h2c http/1.1

    ProxyPass /api/ http://redundo-dotnet-app:5000/api/

    ProxyPass / http://redundo-nuxt-app:3000/

    ErrorLog ${APACHE_LOG_DIR}/redundo-website-error.log
    CustomLog ${APACHE_LOG_DIR}/redundo-website-access.log combined

    Include /etc/letsencrypt/options-ssl-apache.conf
    SSLCertificateFile /etc/letsencrypt/live/redundo.net/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/redundo.net/privkey.pem
</VirtualHost>
</IfModule>



================================================================================

File: Apache/conf/sites-enabled/proxy-no-ssl.conf
================================================================================

<VirtualHost *:80>
    ServerName redundo.net
    ServerAlias www.redundo.net
    ServerAdmin ap007@aquinas.edu

    ProxyPass /api/ http://redundo-dotnet-app:5000/api/

    ProxyPass / http://redundo-nuxt-app:3000/

    ErrorLog ${APACHE_LOG_DIR}/redundo-website-error.log
    CustomLog ${APACHE_LOG_DIR}/redundo-website-access.log combined
</VirtualHost>


================================================================================

File: Apache/Dockerfile
================================================================================

FROM ubuntu:latest
ENV DEBIAN_FRONTEND=noninteractive
ENV WEBMASTER_MAIL=${WEBMASTER_MAIL}
ENV DOMAINS=${DOMAINS}
ENV TIMEZONE=America/Detroit

RUN apt-get update && \
    apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get install apache2 -y && \
    apt-get install software-properties-common -y && \
    add-apt-repository universe -y && \
    add-apt-repository ppa:certbot/certbot -y && \
    apt-get install python-certbot-apache -y

WORKDIR /etc/apache2
RUN rm ./sites-enabled/000-default.conf
COPY ./conf/apache2.conf .
COPY ./conf/init_apache.sh .
COPY ./conf/sites-available ./sites-available
COPY ./conf/sites-enabled ./sites-enabled
COPY ./conf/mods-enabled ./mods-enabled

ENTRYPOINT [ "bash", "/etc/apache2/init_apache.sh" ]


================================================================================

File: Apache/README.md
================================================================================

# Instructions

1. Setup Private keys: [Link](https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04')


================================================================================

File: Postgres/Dockerfile
================================================================================

FROM postgres:alpine
ENV TIMEZONE=America/Detroit
RUN apk add tzdata && \
    cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && \
    echo "${TIMEZONE}" > /etc/timezone && \
    apk del tzdata

